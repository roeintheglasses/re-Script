"Flags(generatorWrapper, iterateEntries);\n    }\n    return new value(generatorWrapper);\n  }\n  function getSingletonInstance(generatorWrapper) {\n    var value = generatorWrapper[customProperty1];\n    if (value) {\n      return value;\n    }\n    value = new generatorWrapper();\n    setFlag34(value.getSingletonInstance);\n    return generatorWrapper[customProperty1] = value;\n  }\n  function getValidatedDataOrUndefined(generatorWrapper, value, CustomMap) {\n    if (value) {\n      return assertBoolean(generatorWrapper);\n    }\n    var findEntry;\n    if ((findEntry = parseBooleanOrNumber(generatorWrapper)) != null) {\n      return findEntry;\n    } else {\n      if (CustomMap) {\n        return false;\n      } else {\n        return undefined;\n      }\n    }\n  }\n  function getStringOrEmpty(generatorWrapper, value, CustomMap) {\n    if (value) {\n      return ensureString(generatorWrapper);\n    }\n    var findEntry;\n    if ((findEntry = stringOrNull(generatorWrapper)) != null) {\n      return findEntry;\n    } else {\n      if (CustomMap) {\n        return \"\";\n      } else {\n        return undefined;\n      }\n    }\n  }\n  var temporaryData;\n  function createInstanceWithTemporaryData(generatorWrapper, value) {\n    temporaryData = value;\n    generatorWrapper = new generatorWrapper(value);\n    temporaryData = undefined;\n    return generatorWrapper;\n  }\n  var booleanArrayCache, zeroValueArrayCache;\n  function convertToTuple(generatorWrapper) {\n    switch (typeof generatorWrapper) {\n      case \"boolean\":\n        return booleanArrayCache || (booleanArrayCache = [0, undefined, true]);\n      case \"number\":\n        if (generatorWrapper > 0) {\n          return undefined;\n        } else {\n          if (generatorWrapper === 0) {\n            return zeroValueArrayCache || (zeroValueArrayCache = [0, undefined]);\n          } else {\n            return [-generatorWrapper, undefined];\n          }\n        }\n      case \"string\":\n        return [0, generatorWrapper];\n      case \"object\":\n        return generatorWrapper;\n    }\n  }\n  function onFulfilled(generatorWrapper, value, CustomMap) {\n    if (generatorWrapper == null) {\n      generatorWrapper = temporaryData;\n    }\n    temporaryData = undefined;\n    if (generatorWrapper == null) {\n      var findEntry = 96;\n      if (CustomMap) {\n        generatorWrapper = [CustomMap];\n        findEntry |= 512;\n      } else {\n        generatorWrapper = [];\n      }\n      if (value) {\n        findEntry = findEntry & -16760833 | (value & 1023) << 14;\n      }\n    } else {\n      if (!Array.isArray(generatorWrapper)) {\n        throw Error(\"narr\");\n      }\n      findEntry = getBitFlags(generatorWrapper);\n      if (findEntry & 2048) {\n        throw Error(\"farr\");\n      }\n      if (findEntry & 64) {\n        return generatorWrapper;\n      }\n      findEntry |= 64;\n      if (CustomMap && (findEntry |= 512, CustomMap !== generatorWrapper[0])) {\n        throw Error(\"mid\");\n      }\n      generatorWrapper: {\n        CustomMap = generatorWrapper;\n        var iterateEntries = CustomMap.length;\n        if (iterateEntries) {\n          var createCircularNode = iterateEntries - 1;\n          if (isPlainObject(CustomMap[createCircularNode])) {\n            findEntry |= 256;\n            value = createCircularNode - (+!!(findEntry & 512) - 1);\n            if (value >= 1024) {\n              throw Error(\"pvtlmt\");\n            }\n            findEntry = findEntry & -16760833 | (value & 1023) << 14;\n            break generatorWrapper;\n          }\n        }\n        if (value) {\n          value = Math.max(value, iterateEntries - (+!!(findEntry & 512) - 1));\n          if (value > 1024) {\n            throw Error(\"spvt\");\n          }\n          findEntry = findEntry & -16760833 | (value & 1023) << 14;\n        }\n      }\n    }\n    setRawBitFlags(generatorWrapper, findEntry);\n    return generatorWrapper;\n  }\n  var polyfillCheckCache = {};\n  var requiresPolyfill = function () {\n    try {\n      var generatorWrapper = function () {\n        return constructReflect(Map, [], this.constructor);\n      };\n      inheritPrototype(generatorWrapper, Map);\n      noopFunction(new generatorWrapper());\n      return false;\n    } catch (value) {\n      return true;\n    }\n  }();\n  var CustomMap = function () {\n    this.entryIdCounter = new Map();\n  };\n  setTimeoutWrapper = CustomMap.prototype;\n  setTimeoutWrapper.get = function (generatorWrapper) {\n    return this.entryIdCounter.get(generatorWrapper);\n  };\n  setTimeoutWrapper.set = function (generatorWrapper, value) {\n    this.entryIdCounter.set(generatorWrapper, value);\n    this.size = this.entryIdCounter.size;\n    return this;\n  };\n  setTimeoutWrapper.delete = function (generatorWrapper) {\n    generatorWrapper = this.entryIdCounter.delete(generatorWrapper);\n    this.size = this.entryIdCounter.size;\n    return generatorWrapper;\n  };\n  setTimeoutWrapper.clearAll = function () {\n    this.entryIdCounter.clearAll();\n    this.size = this.entryIdCounter.size;\n  };\n  setTimeoutWrapper.has = function (generatorWrapper) {\n    return this.entryIdCounter.has(generatorWrapper);\n  };\n  setTimeoutWrapper.entries = function () {\n    return this.entryIdCounter.entries();\n  };\n  setTimeoutWrapper.keys = function () {\n    return this.entryIdCounter.keys();\n  };\n  setTimeoutWrapper.values = function () {\n    return this.entryIdCounter.values();\n  };\n  setTimeoutWrapper.forEach = function (generatorWrapper, value) {\n    return this.entryIdCounter.forEach(generatorWrapper, value);\n  };\n  CustomMap.prototype[Symbol.iterator] = function () {\n    return this.entries();\n  };\n  var PolyfilledMap = function () {\n    if (requiresPolyfill) {\n      Object.setPrototypeOf(CustomMap.prototype, Map.prototype);\n      Object.defineProperties(CustomMap.prototype, {\n        size: {\n          value: 0,\n          configurable: true,\n          enumerable: true,\n          writable: true\n        }\n      });\n      return CustomMap;\n    }\n    var generatorWrapper = function () {\n      return constructReflect(Map, [], this.constructor);\n    };\n    inheritPrototype(generatorWrapper, Map);\n    return generatorWrapper;\n  }();\n  function identityFunction(generatorWrapper) {\n    return generatorWrapper;\n  }\n  var EnhancedMap = function (generatorWrapper, value, CustomMap, findEntry) {\n    if (undefined === CustomMap) {\n      CustomMap = identityFunction;\n    } else {\n      CustomMap = CustomMap;\n    }\n    if (undefined === findEntry) {\n      findEntry = identityFunction;\n    } else {\n      findEntry = findEntry;\n    }\n    var iterateEntries = PolyfilledMap.call(this) || this;\n    var createCircularNode = getBitFlags(generatorWrapper);\n    createCircularNode |= 64;\n    setRawBitFlags(generatorWrapper, createCircularNode);\n    iterateEntries.mapElements = createCircularNode;\n    iterateEntries.ProtobufWriter = value;\n    iterateEntries.keyTransformFunction = CustomMap;\n    if (iterateEntries.ProtobufWriter) {\n      iterateEntries.convertToInt64 = TransformValue;\n    } else {\n      iterateEntries.convertToInt64 = findEntry;\n    }\n    for (var entryIdCounter = 0; entryIdCounter < generatorWrapper.length; entryIdCounter++) {\n      var key = generatorWrapper[entryIdCounter];\n      var value = CustomMap(key[0], false, true);\n      var entry = key[1];\n      if (value) {\n        if (undefined === entry) {\n          entry = null;\n        }\n      } else {\n        entry = findEntry(key[1], false, true, undefined, undefined, createCircularNode);\n      }\n      PolyfilledMap.prototype.set.call(iterateEntries, value, entry);\n    }\n    return iterateEntries;\n  };\n  inheritPrototype(EnhancedMap, PolyfilledMap);\n  var EnsureMutable = function (generatorWrapper) {\n    if (generatorWrapper.mapElements & 2) {\n      throw Error(\"Cannot mutate an immutable Map\");\n    }\n  };\n  var TransformMapEntries = function (generatorWrapper, value) {\n    if (undefined === value) {\n      value = IdentityTransform;\n    } else {\n      value = value;\n    }\n    if (generatorWrapper.size !== 0) {\n      return TransformEntries(generatorWrapper, value);\n    }\n  };\n  var TransformEntries = function (generatorWrapper, value) {\n    if (undefined === value) {\n      value = IdentityTransform;\n    } else {\n      value = value;\n    }\n    var CustomMap = [];\n    generatorWrapper = PolyfilledMap.prototype.entries.call(generatorWrapper);\n    for (var findEntry; !(findEntry = generatorWrapper.next()).done;) {\n      findEntry = findEntry.value;\n      findEntry[0] = value(findEntry[0]);\n      findEntry[1] = value(findEntry[1]);\n      CustomMap.push(findEntry);\n    }\n    return CustomMap;\n  };\n  setTimeoutWrapper = EnhancedMap.prototype;\n  setTimeoutWrapper.clearAll = function () {\n    EnsureMutable(this);\n    PolyfilledMap.prototype.clearAll.call(this);\n  };\n  setTimeoutWrapper.delete = function (generatorWrapper) {\n    EnsureMutable(this);\n    return PolyfilledMap.prototype.delete.call(this, this.keyTransformFunction(generatorWrapper, true, false));\n  };\n  setTimeoutWrapper.entries = function () {\n    var generatorWrapper = Array.from(PolyfilledMap.prototype.keys.call(this));\n    return new IteratorWithTransform(generatorWrapper, CreateKeyValuePair, this);\n  };\n  setTimeoutWrapper.keys = function () {\n    return PolyfilledMap.prototype.keys.call(this);\n  };\n  setTimeoutWrapper.values = function () {\n    var generatorWrapper = Array.from(PolyfilledMap.prototype.keys.call(this));\n    return new IteratorWithTransform(generatorWrapper, EnhancedMap.prototype.get, this);\n  };\n  setTimeoutWrapper.forEach = function (generatorWrapper, value) {\n    var CustomMap = this;\n    PolyfilledMap.prototype.forEach.call(this, function (findEntry, iterateEntries) {\n      generatorWrapper.call(value, CustomMap.get(iterateEntries), iterateEntries, CustomMap);\n    });\n  };\n  setTimeoutWrapper.set = function (generatorWrapper, value) {\n    EnsureMutable(this);\n    generatorWrapper = this.keyTransformFunction(generatorWrapper, true, false);\n    if (generatorWrapper == null) {\n      return this;\n    } else {\n      if (value == null) {\n        PolyfilledMap.prototype.delete.call(this, generatorWrapper);\n        return this;\n      } else {\n        return PolyfilledMap.prototype.set.call(this, generatorWrapper, this.convertToInt64(value, true, true, this.ProtobufWriter, false, this.mapElements));\n      }\n    }\n  };\n  setTimeoutWrapper.has = function (generatorWrapper) {\n    return PolyfilledMap.prototype.has.call(this, this.keyTransformFunction(generatorWrapper, false, false));\n  };\n  setTimeoutWrapper.get = function (generatorWrapper) {\n    generatorWrapper = this.keyTransformFunction(generatorWrapper, false, false);\n    var value = PolyfilledMap.prototype.get.call(this, generatorWrapper);\n    if (undefined !== value) {\n      var CustomMap = this.ProtobufWriter;\n      if (CustomMap) {\n        CustomMap = this.convertToInt64(value, false, true, CustomMap, this.modifyAdProperty, this.mapElements);\n        if (CustomMap !== value) {\n          PolyfilledMap.prototype.set.call(this, generatorWrapper, CustomMap);\n        }\n        return CustomMap;\n      } else {\n        return value;\n      }\n    }\n  };\n  EnhancedMap.prototype[Symbol.iterator] = function () {\n    return this.entries();\n  };\n  EnhancedMap.prototype.toJSON = undefined;\n  EnhancedMap.prototype.booleanFlagTransformation = emptyObject2;\n  function TransformValue(generatorWrapper, value, CustomMap, findEntry, iterateEntries, createCircularNode) {\n    generatorWrapper = createObjectOrUndefined(generatorWrapper, findEntry, CustomMap, createCircularNode);\n    if (iterateEntries) {\n      generatorWrapper = cloneIfNotFrozen(generatorWrapper);\n    }\n    return generatorWrapper;\n  }\n  function IdentityTransform(generatorWrapper) {\n    return generatorWrapper;\n  }\n  function CreateKeyValuePair(generatorWrapper) {\n    return [generatorWrapper, this.get(generatorWrapper)];\n  }\n  var singletonInstance;\n  function getSingletonInstance() {\n    return singletonInstance || (singletonInstance = new EnhancedMap(setFlag34([]), undefined, undefined, undefined, polyfillCheckCache));\n  }\n  function transformKeyOrValue(generatorWrapper, value) {\n    return SerializeValue(value);\n  }\n  function SerializeValue(generatorWrapper) {\n    switch (typeof generatorWrapper) {\n      case \"number\":\n        if (isFinite(generatorWrapper)) {\n          return generatorWrapper;\n        } else {\n          return String(generatorWrapper);\n        }\n      case \"boolean\":\n        if (generatorWrapper) {\n          return 1;\n        } else {\n          return 0;\n        }\n      case \"object\":\n        if (generatorWrapper) {\n          if (Array.isArray(generatorWrapper)) {\n            if (undefinedFunction1(generatorWrapper, undefined, 0)) {\n              return;\n            }\n          } else {\n            if (supportsUint8Array && generatorWrapper != null && generatorWrapper instanceof Uint8Array) {\n              if (supportsBtoa) {\n                for (var value = \"\", CustomMap = 0, findEntry = generatorWrapper.length - 10240; CustomMap < findEntry;) {\n                  value += String.fromCharCode.apply(null, generatorWrapper.subarray(CustomMap, CustomMap += 10240));\n                }\n                value += String.fromCharCode.apply(null, CustomMap ? generatorWrapper.subarray(CustomMap) : generatorWrapper);\n                generatorWrapper = btoa(value);\n              } else {\n                generatorWrapper = base64Encode(generatorWrapper);\n              }\n              return generatorWrapper;\n            }\n            if (generatorWrapper instanceof EnhancedMap) {\n              return TransformMapEntries(generatorWrapper);\n            }\n          }\n        }\n    }\n    return generatorWrapper;\n  }\n  function TransformArguments(generatorWrapper, value, CustomMap) {\n    generatorWrapper = toArray(generatorWrapper);\n    var findEntry = generatorWrapper.length;\n    var iterateEntries = value & 256 ? generatorWrapper[findEntry - 1] : undefined;\n    if (iterateEntries) {\n      findEntry += -1;\n    } else {\n      findEntry += 0;\n    }\n    for (value = value & 512 ? 1 : 0; value < findEntry; value++) {\n      generatorWrapper[value] = CustomMap(generatorWrapper[value]);\n    }\n    if (iterateEntries) {\n      value = generatorWrapper[value] = {};\n      for (var createCircularNode in iterateEntries) value[createCircularNode] = CustomMap(iterateEntries[createCircularNode]);\n    }\n    return generatorWrapper;\n  }\n  function DeepTransform(generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    if (generatorWrapper != null) {\n      if (Array.isArray(generatorWrapper)) {\n        if (undefinedFunction1(generatorWrapper, undefined, 0)) {\n          generatorWrapper = undefined;\n        } else if (iterateEntries && getBitFlags(generatorWrapper) & 2) {\n          generatorWrapper = generatorWrapper;\n        } else {\n          generatorWrapper = processElements(generatorWrapper, value, CustomMap, undefined !== findEntry, iterateEntries);\n        }\n      } else if (isPlainObject(generatorWrapper)) {\n        var createCircularNode = {},\n          entryIdCounter;\n        for (entryIdCounter in generatorWrapper) createCircularNode[entryIdCounter] = DeepTransform(generatorWrapper[entryIdCounter], value, CustomMap, findEntry, iterateEntries);\n        generatorWrapper = createCircularNode;\n      } else {\n        generatorWrapper = value(generatorWrapper, findEntry);\n      }\n      return generatorWrapper;\n    }\n  }\n  function processElements(generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    var createCircularNode = findEntry || CustomMap ? getBitFlags(generatorWrapper) : 0;\n    if (findEntry) {\n      findEntry = !!(createCircularNode & 32);\n    } else {\n      findEntry = undefined;\n    }\n    generatorWrapper = toArray(generatorWrapper);\n    for (var entryIdCounter = 0; entryIdCounter < generatorWrapper.length; entryIdCounter++) {\n      generatorWrapper[entryIdCounter] = DeepTransform(generatorWrapper[entryIdCounter], value, CustomMap, findEntry, iterateEntries);\n    }\n    if (CustomMap) {\n      CustomMap(createCircularNode, generatorWrapper);\n    }\n    return generatorWrapper;\n  }\n  function transformElement(generatorWrapper) {\n    return DeepTransform(generatorWrapper, transformElementContent, undefined, undefined, false);\n  }\n  function transformElementContent(generatorWrapper) {\n    if (generatorWrapper.emptyObject2 === emptyObject1) {\n      return generatorWrapper.toJSON();\n    } else {\n      if (generatorWrapper instanceof EnhancedMap) {\n        return TransformMapEntries(generatorWrapper, transformElement);\n      } else {\n        return SerializeValue(generatorWrapper);\n      }\n    }\n  }\n  function cloneOrTransform(generatorWrapper, value, CustomMap) {\n    if (undefined === CustomMap) {\n      CustomMap = set34Clear14557Flag;\n    } else {\n      CustomMap = CustomMap;\n    }\n    if (generatorWrapper != null) {\n      if (supportsUint8Array && generatorWrapper instanceof Uint8Array) {\n        if (value) {\n          return generatorWrapper;\n        } else {\n          return new Uint8Array(generatorWrapper);\n        }\n      }\n      if (Array.isArray(generatorWrapper)) {\n        var findEntry = getBitFlags(generatorWrapper);\n        if (!(findEntry & 2)) {\n          if (value) {\n            value = findEntry === 0 || !!(findEntry & 32) && !(findEntry & 64 || !(findEntry & 16));\n          }\n          if (value) {\n            generatorWrapper = setRawBitFlags(generatorWrapper, (findEntry | 34) & -12293);\n          } else {\n            generatorWrapper = processElements(generatorWrapper, cloneOrTransform, findEntry & 4 ? set34Clear14557Flag : CustomMap, true, true);\n          }\n        }\n        return generatorWrapper;\n      }\n      if (generatorWrapper.emptyObject2 === emptyObject1) {\n        CustomMap = generatorWrapper.getSingletonInstance;\n        findEntry = getRawBitFlags(CustomMap);\n        if (findEntry & 2) {\n          generatorWrapper = generatorWrapper;\n        } else {\n          generatorWrapper = createInstanceWithTemporaryData(generatorWrapper.constructor, transformWithFlags(CustomMap, findEntry, true));\n        }\n      } else if (generatorWrapper instanceof EnhancedMap && !(generatorWrapper.mapElements & 2)) {\n        CustomMap = setFlag34(TransformEntries(generatorWrapper, cloneOrTransform));\n        generatorWrapper = new EnhancedMap(CustomMap, generatorWrapper.ProtobufWriter, generatorWrapper.keyTransformFunction, generatorWrapper.convertToInt64);\n      }\n      return generatorWrapper;\n    }\n  }\n  function transformWithFlags(generatorWrapper, value, CustomMap) {\n    var findEntry = CustomMap || value & 2 ? set34Clear14557Flag : clear14591Flag;\n    var iterateEntries = !!(value & 32);\n    generatorWrapper = TransformArguments(generatorWrapper, value, function (createCircularNode) {\n      return cloneOrTransform(createCircularNode, iterateEntries, findEntry);\n    });\n    setCustomProperty(generatorWrapper, 32 | (CustomMap ? 2 : 0));\n    return generatorWrapper;\n  }\n  function cloneIfNotFrozen(generatorWrapper) {\n    var value = generatorWrapper.getSingletonInstance;\n    var CustomMap = getRawBitFlags(value);\n    if (CustomMap & 2) {\n      return createInstanceWithTemporaryData(generatorWrapper.constructor, transformWithFlags(value, CustomMap, false));\n    } else {\n      return generatorWrapper;\n    }\n  }\n  function checkFlags(generatorWrapper, value, CustomMap, findEntry) {\n    if (!(4 & value)) {\n      return true;\n    }\n    if (CustomMap == null) {\n      return false;\n    }\n    if (!findEntry && CustomMap === 0 && (4096 & value || 8192 & value) && (generatorWrapper.constructor[customProperty3] = (generatorWrapper.constructor[customProperty3] | 0) + 1) < 5) {\n      throwIncidentError();\n    }\n    if (CustomMap === 0) {\n      return false;\n    } else {\n      return !(CustomMap & value);\n    }\n  }\n  var getTransformedElement = function (generatorWrapper, value) {\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    return getElementAtIndex(generatorWrapper, getRawBitFlags(generatorWrapper), value);\n  };\n  function getElementAtIndexWithDefault(generatorWrapper, value, CustomMap, findEntry) {\n    value = findEntry + (+!!(value & 512) - 1);\n    if (!(value < 0 || value >= generatorWrapper.length || value >= CustomMap)) {\n      return generatorWrapper[value];\n    }\n  }\n  var getElementAtIndex = function (generatorWrapper, value, CustomMap, findEntry) {\n    if (-1 === CustomMap) {\n      return null;\n    }\n    var iterateEntries = get1023Shifted(value);\n    if (CustomMap >= iterateEntries) {\n      if (value & 256) {\n        return generatorWrapper[generatorWrapper.length - 1][CustomMap];\n      }\n    } else {\n      var createCircularNode = generatorWrapper.length;\n      if (findEntry && value & 256 && (findEntry = generatorWrapper[createCircularNode - 1][CustomMap], findEntry != null)) {\n        if (getElementAtIndexWithDefault(generatorWrapper, value, iterateEntries, CustomMap) && customProperty2 != null) {\n          var entryIdCounter;\n          if ((entryIdCounter = undefinedVariable2) != null) {\n            generatorWrapper = entryIdCounter;\n          } else {\n            generatorWrapper = undefinedVariable2 = {};\n          }\n          entryIdCounter = generatorWrapper[customProperty2] || 0;\n          if (!(entryIdCounter >= 4)) {\n            generatorWrapper[customProperty2] = entryIdCounter + 1;\n            throwIncidentError();\n          }\n        }\n        return findEntry;\n      }\n      return getElementAtIndexWithDefault(generatorWrapper, value, iterateEntries, CustomMap);\n    }\n  };\n  var updateElement = function (generatorWrapper, value, CustomMap) {\n    var findEntry = generatorWrapper.getSingletonInstance;\n    var iterateEntries = getRawBitFlags(findEntry);\n    throwIfFlag2(iterateEntries);\n    updateElementAtIndex(findEntry, iterateEntries, value, CustomMap);\n    return generatorWrapper;\n  };\n  function updateElementAtIndex(generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    var createCircularNode = get1023Shifted(value);\n    if (CustomMap >= createCircularNode || iterateEntries) {\n      var entryIdCounter = value;\n      if (value & 256) {\n        iterateEntries = generatorWrapper[generatorWrapper.length - 1];\n      } else {\n        if (findEntry == null) {\n          return entryIdCounter;\n        }\n        iterateEntries = generatorWrapper[createCircularNode + (+!!(value & 512) - 1)] = {};\n        entryIdCounter |= 256;\n      }\n      iterateEntries[CustomMap] = findEntry;\n      if (CustomMap < createCircularNode) {\n        generatorWrapper[CustomMap + (+!!(value & 512) - 1)] = undefined;\n      }\n      if (entryIdCounter !== value) {\n        setRawBitFlags(generatorWrapper, entryIdCounter);\n      }\n      return entryIdCounter;\n    }\n    generatorWrapper[CustomMap + (+!!(value & 512) - 1)] = findEntry;\n    if (value & 256) {\n      generatorWrapper = generatorWrapper[generatorWrapper.length - 1];\n      if (CustomMap in generatorWrapper) {\n        delete generatorWrapper[CustomMap];\n      }\n    }\n    return value;\n  }\n  function transformArrayElements(generatorWrapper, value, CustomMap) {\n    var findEntry = generatorWrapper.getSingletonInstance;\n    var iterateEntries = getRawBitFlags(findEntry);\n    var createCircularNode = 2 & iterateEntries ? 1 : 2;\n    var entryIdCounter = getArrayOrEmpty(findEntry, iterateEntries, value);\n    var key = getBitFlags(entryIdCounter);\n    if (checkFlags(generatorWrapper, key, undefined, false)) {\n      if (4 & key || Object.isFrozen(entryIdCounter)) {\n        entryIdCounter = toArray(entryIdCounter);\n        key = updateFlagsForFrozenObjects(key, iterateEntries);\n        iterateEntries = updateElementAtIndex(findEntry, iterateEntries, value, entryIdCounter);\n      }\n      for (var value = generatorWrapper = 0; generatorWrapper < entryIdCounter.length; generatorWrapper++) {\n        var entry = CustomMap(entryIdCounter[generatorWrapper]);\n        if (entry != null) {\n          entryIdCounter[value++] = entry;\n        }\n      }\n      if (value < generatorWrapper) {\n        entryIdCounter.length = value;\n      }\n      key = updateFlags(key, iterateEntries);\n      key = toggleBitFlag(key, 20, true);\n      key = toggleBitFlag(key, 4096, false);\n      key = toggleBitFlag(key, 8192, false);\n      setRawBitFlags(entryIdCounter, key);\n      if (2 & key) {\n        Object.freeze(entryIdCounter);\n      }\n    }\n    if (!checkIfFrozen(key)) {\n      CustomMap = key;\n      if (generatorWrapper = createCircularNode === 1 || createCircularNode === 4 && !!(32 & key)) {\n        key = toggleBitFlag(key, 2, true);\n      } else {\n        key = finalizeFlagsUpdate(key, iterateEntries, false);\n      }\n      if (key !== CustomMap) {\n        setRawBitFlags(entryIdCounter, key);\n      }\n      if (generatorWrapper) {\n        Object.freeze(entryIdCounter);\n      }\n    }\n    if (createCircularNode === 2 && checkIfFrozen(key)) {\n      entryIdCounter = toArray(entryIdCounter);\n      key = updateFlagsForFrozenObjects(key, iterateEntries);\n      key = finalizeFlagsUpdate(key, iterateEntries, false);\n      setRawBitFlags(entryIdCounter, key);\n      updateElementAtIndex(findEntry, iterateEntries, value, entryIdCounter);\n    }\n    return entryIdCounter;\n  }\n  function getArrayOrEmpty(generatorWrapper, value, CustomMap) {\n    generatorWrapper = getElementAtIndex(generatorWrapper, value, CustomMap);\n    if (Array.isArray(generatorWrapper)) {\n      return generatorWrapper;\n    } else {\n      return frozenArray;\n    }\n  }\n  function updateFlags(generatorWrapper, value) {\n    if (generatorWrapper === 0) {\n      generatorWrapper = updateFlagsForFrozenObjects(generatorWrapper, value);\n    }\n    return generatorWrapper = toggleBitFlag(generatorWrapper, 1, true);\n  }\n  function checkIfFrozen(generatorWrapper) {\n    return !!(2 & generatorWrapper) && !!(4 & generatorWrapper) || !!(2048 & generatorWrapper);\n  }\n  function transformAndAddElement(generatorWrapper, value, CustomMap, findEntry, iterateEntries, createCircularNode) {\n    var entryIdCounter = value & 2;\n    generatorWrapper: {\n      var key = CustomMap;\n      var value = value & 2;\n      CustomMap = false;\n      if (key == null) {\n        if (value) {\n          generatorWrapper = getSingletonInstance();\n          break generatorWrapper;\n        }\n        key = [];\n      } else if (key.constructor === EnhancedMap) {\n        if ((key.mapElements & 2) == 0 || value) {\n          generatorWrapper = key;\n          break generatorWrapper;\n        }\n        key = TransformEntries(key);\n      } else if (Array.isArray(key)) {\n        CustomMap = !!(getBitFlags(key) & 2);\n      } else {\n        key = [];\n      }\n      if (value) {\n        if (!key.length) {\n          generatorWrapper = getSingletonInstance();\n          break generatorWrapper;\n        }\n        if (!CustomMap) {\n          CustomMap = true;\n          setFlag34(key);\n        }\n      } else if (CustomMap) {\n        CustomMap = false;\n        value = toArray(key);\n        for (key = 0; key < value.length; key++) {\n          var entry = value[key] = toArray(value[key]);\n          if (Array.isArray(entry[1])) {\n            entry[1] = setFlag34(entry[1]);\n          }\n        }\n        key = value;\n      }\n      if (!CustomMap) {\n        if (getBitFlags(key) & 64) {\n          clearBitFlag(key, 32);\n        } else if (32 & value) {\n          setFlag32(key);\n        }\n      }\n      createCircularNode = new EnhancedMap(key, iterateEntries, getStringOrEmpty, createCircularNode);\n      updateElementAtIndex(generatorWrapper, value, findEntry, createCircularNode, false);\n      generatorWrapper = createCircularNode;\n    }\n    if (generatorWrapper == null) {\n      return generatorWrapper;\n    }\n    if (!entryIdCounter && iterateEntries) {\n      generatorWrapper.modifyAdProperty = true;\n    }\n    return generatorWrapper;\n  }\n  function transformElementAtIndex(generatorWrapper, value, CustomMap) {\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    var findEntry = getRawBitFlags(generatorWrapper);\n    return transformAndAddElement(generatorWrapper, findEntry, getElementAtIndex(generatorWrapper, findEntry, value), value, undefined, CustomMap);\n  }\n  function transformAndReplaceArray(generatorWrapper, value, CustomMap, findEntry) {\n    var iterateEntries = generatorWrapper.getSingletonInstance;\n    var createCircularNode = getRawBitFlags(iterateEntries);\n    throwIfFlag2(createCircularNode);\n    if (CustomMap == null) {\n      updateElementAtIndex(iterateEntries, createCircularNode, value);\n      return generatorWrapper;\n    }\n    var entryIdCounter = getBitFlags(CustomMap);\n    var key = entryIdCounter;\n    var value = !!(2 & entryIdCounter) || Object.isFrozen(CustomMap);\n    var entry = !value && false;\n    if (checkFlags(generatorWrapper, entryIdCounter)) {\n      entryIdCounter = 21;\n      if (value) {\n        CustomMap = toArray(CustomMap);\n        key = 0;\n        entryIdCounter = updateFlagsForFrozenObjects(entryIdCounter, createCircularNode);\n        entryIdCounter = finalizeFlagsUpdate(entryIdCounter, createCircularNode, true);\n      }\n      for (value = 0; value < CustomMap.length; value++) {\n        CustomMap[value] = findEntry(CustomMap[value]);\n      }\n    }\n    if (entry) {\n      CustomMap = toArray(CustomMap);\n      key = 0;\n      entryIdCounter = updateFlagsForFrozenObjects(entryIdCounter, createCircularNode);\n      entryIdCounter = finalizeFlagsUpdate(entryIdCounter, createCircularNode, true);\n    }\n    if (entryIdCounter !== key) {\n      setRawBitFlags(CustomMap, entryIdCounter);\n    }\n    updateElementAtIndex(iterateEntries, createCircularNode, value, CustomMap);\n    return generatorWrapper;\n  }\n  function updateOrRemoveElement(generatorWrapper, value, CustomMap, findEntry) {\n    var iterateEntries = generatorWrapper.getSingletonInstance;\n    var createCircularNode = getRawBitFlags(iterateEntries);\n    throwIfFlag2(createCircularNode);\n    updateElementAtIndex(iterateEntries, createCircularNode, value, (findEntry === \"0\" ? Number(CustomMap) === 0 : CustomMap === findEntry) ? undefined : CustomMap);\n    return generatorWrapper;\n  }\n  function replaceArrayIfNotArray(generatorWrapper, value, CustomMap, findEntry) {\n    var iterateEntries = generatorWrapper.getSingletonInstance;\n    var createCircularNode = getBitFlags(iterateEntries);\n    throwIfFlag2(getRawBitFlags(generatorWrapper.getSingletonInstance));\n    var entryIdCounter = createCircularNode & 2;\n    generatorWrapper = getElementAtIndex(iterateEntries, createCircularNode, value, false);\n    if (!Array.isArray(generatorWrapper)) {\n      generatorWrapper = frozenArray;\n    }\n    var key = !!(createCircularNode & 32);\n    var value = getBitFlags(generatorWrapper);\n    if (value === 0 && key && !entryIdCounter) {\n      value |= 33;\n      setRawBitFlags(generatorWrapper, value);\n    } else if (!(value & 1)) {\n      value |= 1;\n      setRawBitFlags(generatorWrapper, value);\n    }\n    if (entryIdCounter) {\n      if (!(value & 2)) {\n        setFlag34(generatorWrapper);\n      }\n      Object.freeze(generatorWrapper);\n    } else if (2 & value || 2048 & value) {\n      generatorWrapper = toArray(generatorWrapper);\n      entryIdCounter = 1;\n      if (key) {\n        entryIdCounter |= 32;\n      }\n      setRawBitFlags(generatorWrapper, entryIdCounter);\n      updateElementAtIndex(iterateEntries, createCircularNode, value, generatorWrapper, false);\n    }\n    value = generatorWrapper;\n    iterateEntries = getBitFlags(value);\n    iterateEntries = !!(4 & iterateEntries) && !!(4096 & iterateEntries);\n    if (Array.isArray(findEntry)) {\n      for (createCircularNode = 0; createCircularNode < findEntry.length; createCircularNode++) {\n        value.push(CustomMap(findEntry[createCircularNode], iterateEntries));\n      }\n    } else {\n      findEntry = getIterator(findEntry);\n      for (createCircularNode = findEntry.next(); !createCircularNode.done; createCircularNode = findEntry.next()) {\n        value.push(CustomMap(createCircularNode.value, iterateEntries));\n      }\n    }\n  }\n  var pf = function (generatorWrapper, value, CustomMap, findEntry) {\n    var iterateEntries = generatorWrapper.getSingletonInstance;\n    var createCircularNode = getRawBitFlags(iterateEntries);\n    throwIfFlag2(createCircularNode);\n    if ((CustomMap = of(iterateEntries, createCircularNode, CustomMap)) && CustomMap !== value && findEntry != null) {\n      createCircularNode = updateElementAtIndex(iterateEntries, createCircularNode, CustomMap);\n    }\n    updateElementAtIndex(iterateEntries, createCircularNode, value, findEntry);\n    return generatorWrapper;\n  };\n  var qf = function (generatorWrapper, value, CustomMap) {\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    if (of(generatorWrapper, getRawBitFlags(generatorWrapper), value) === CustomMap) {\n      return CustomMap;\n    } else {\n      return -1;\n    }\n  };\n  var rf = function (generatorWrapper, value) {\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    return of(generatorWrapper, getRawBitFlags(generatorWrapper), value);\n  };\n  function of(generatorWrapper, value, CustomMap) {\n    for (var findEntry = 0, iterateEntries = 0; iterateEntries < CustomMap.length; iterateEntries++) {\n      var createCircularNode = CustomMap[iterateEntries];\n      if (getElementAtIndex(generatorWrapper, value, createCircularNode) != null) {\n        if (findEntry !== 0) {\n          value = updateElementAtIndex(generatorWrapper, value, findEntry);\n        }\n        findEntry = createCircularNode;\n      }\n    }\n    return findEntry;\n  }\n  var tf = function (generatorWrapper) {\n    var value = StorageField;\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    var CustomMap = getRawBitFlags(generatorWrapper);\n    throwIfFlag2(CustomMap);\n    var findEntry = getElementAtIndex(generatorWrapper, CustomMap, 4);\n    value = cloneIfNotFrozen(createObjectOrUndefined(findEntry, value, true, CustomMap));\n    if (findEntry !== value) {\n      updateElementAtIndex(generatorWrapper, CustomMap, 4, value);\n    }\n    return value;\n  };\n  function uf(generatorWrapper, value, CustomMap, findEntry) {\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    var iterateEntries = getRawBitFlags(generatorWrapper);\n    var createCircularNode = getElementAtIndex(generatorWrapper, iterateEntries, CustomMap, findEntry);\n    value = createObjectOrUndefined(createCircularNode, value, false, iterateEntries);\n    if (value !== createCircularNode && value != null) {\n      updateElementAtIndex(generatorWrapper, iterateEntries, CustomMap, value, findEntry);\n    }\n    return value;\n  }\n  var vf = function (generatorWrapper, value, CustomMap) {\n    if (generatorWrapper = uf(generatorWrapper, value, CustomMap, false)) {\n      return generatorWrapper;\n    } else {\n      return getSingletonInstance(value);\n    }\n  };\n  var fetchData = function (generatorWrapper, value, CustomMap) {\n    var findEntry = undefined === findEntry ? false : findEntry;\n    value = uf(generatorWrapper, value, CustomMap, findEntry);\n    if (value == null) {\n      return value;\n    }\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    var iterateEntries = getRawBitFlags(generatorWrapper);\n    if (!(iterateEntries & 2)) {\n      var createCircularNode = cloneIfNotFrozen(value);\n      if (createCircularNode !== value) {\n        value = createCircularNode;\n        updateElementAtIndex(generatorWrapper, iterateEntries, CustomMap, value, findEntry);\n      }\n    }\n    return value;\n  };\n  function xf(generatorWrapper, value, CustomMap, findEntry, iterateEntries, createCircularNode) {\n    var entryIdCounter = !!(2 & value);\n    var key = entryIdCounter ? 1 : 2;\n    iterateEntries = !!iterateEntries;\n    if (createCircularNode) {\n      createCircularNode = !entryIdCounter;\n    }\n    entryIdCounter = getArrayOrEmpty(generatorWrapper, value, findEntry);\n    var value = getBitFlags(entryIdCounter);\n    var entry = !!(4 & value);\n    if (!entry) {\n      value = updateFlags(value, value);\n      var currentEntry = entryIdCounter;\n      var foundEntry = value;\n      var resolveFunction = !!(2 & value);\n      if (resolveFunction) {\n        foundEntry = toggleBitFlag(foundEntry, 2, true);\n      }\n      for (var rejectFunction = !resolveFunction, user = true, profileData = 0, isDone = 0; profileData < currentEntry.length; profileData++) {\n        var stream = createObjectOrUndefined(currentEntry[profileData], CustomMap, false, foundEntry);\n        if (stream instanceof CustomMap) {\n          if (!resolveFunction) {\n            var keyArray = !!(getBitFlags(stream.getSingletonInstance) & 2);\n            if (rejectFunction) {\n              rejectFunction = !keyArray;\n            }\n            if (user) {\n              user = keyArray;\n            }\n          }\n          currentEntry[isDone++] = stream;\n        }\n      }\n      if (isDone < profileData) {\n        currentEntry.length = isDone;\n      }\n      value = toggleBitFlag(value, 4, true);\n      value = toggleBitFlag(value, 16, user);\n      value = toggleBitFlag(value, 8, rejectFunction);\n      setRawBitFlags(currentEntry, value);\n      if (resolveFunction) {\n        Object.freeze(currentEntry);\n      }\n    }\n    if (createCircularNode && !(8 & value || !entryIdCounter.length && (key === 1 || key === 4 && 32 & value))) {\n      if (checkIfFrozen(value)) {\n        entryIdCounter = toArray(entryIdCounter);\n        value = updateFlagsForFrozenObjects(value, value);\n        value = updateElementAtIndex(generatorWrapper, value, findEntry, entryIdCounter);\n      }\n      CustomMap = entryIdCounter;\n      createCircularNode = value;\n      for (currentEntry = 0; currentEntry < CustomMap.length; currentEntry++) {\n        value = CustomMap[currentEntry];\n        foundEntry = cloneIfNotFrozen(value);\n        if (value !== foundEntry) {\n          CustomMap[currentEntry] = foundEntry;\n        }\n      }\n      createCircularNode = toggleBitFlag(createCircularNode, 8, true);\n      createCircularNode = toggleBitFlag(createCircularNode, 16, !CustomMap.length);\n      setRawBitFlags(CustomMap, createCircularNode);\n      value = createCircularNode;\n    }\n    if (!checkIfFrozen(value)) {\n      CustomMap = value;\n      if (createCircularNode = key === 1 || key === 4 && !!(32 & value)) {\n        value = toggleBitFlag(value, !entryIdCounter.length || 16 & value && (!entry || 32 & value) ? 2 : 2048, true);\n      } else {\n        value = finalizeFlagsUpdate(value, value, iterateEntries);\n      }\n      if (value !== CustomMap) {\n        setRawBitFlags(entryIdCounter, value);\n      }\n      if (createCircularNode) {\n        Object.freeze(entryIdCounter);\n      }\n    }\n    if (key === 2 && checkIfFrozen(value)) {\n      entryIdCounter = toArray(entryIdCounter);\n      value = updateFlagsForFrozenObjects(value, value);\n      value = finalizeFlagsUpdate(value, value, iterateEntries);\n      setRawBitFlags(entryIdCounter, value);\n      updateElementAtIndex(generatorWrapper, value, findEntry, entryIdCounter);\n    }\n    return entryIdCounter;\n  }\n  var parseData = function (generatorWrapper, value, CustomMap) {\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    var findEntry = getRawBitFlags(generatorWrapper);\n    return xf(generatorWrapper, findEntry, value, CustomMap, false, !(2 & findEntry));\n  };\n  var finalizeAdAttributes = function (generatorWrapper, value, CustomMap) {\n    if (CustomMap == null) {\n      CustomMap = undefined;\n    }\n    return updateElement(generatorWrapper, value, CustomMap);\n  };\n  var Bf = function (generatorWrapper, value, CustomMap) {\n    var findEntry = TagSessionFields;\n    if (CustomMap == null) {\n      CustomMap = undefined;\n    }\n    return pf(generatorWrapper, value, findEntry, CustomMap);\n  };\n  var Cf = function (generatorWrapper, value, CustomMap) {\n    var findEntry = generatorWrapper.getSingletonInstance;\n    var iterateEntries = getRawBitFlags(findEntry);\n    throwIfFlag2(iterateEntries);\n    if (CustomMap == null) {\n      updateElementAtIndex(findEntry, iterateEntries, value);\n      return generatorWrapper;\n    }\n    for (var createCircularNode = getBitFlag"