"      if (createCircularNode) {\n            if (CustomMap === null) {\n              entryIdCounter.push(\"startIndex\");\n            }\n          } else {\n            entryIdCounter.push(\"lmt\");\n          }\n        } else {\n          entryIdCounter.push(\"source\");\n        }\n      } else {\n        entryIdCounter.push(\"itag\");\n      }\n    } else {\n      entryIdCounter.push(\"videoId\");\n    }\n    if (entryIdCounter.length > 0) {\n      settlePromise(resolvePromise.getAdInstance(), \"civp\", entryIdCounter.join(\"-\"));\n      return null;\n    } else {\n      return {\n        getTrustedTypesPolicy: generatorWrapper,\n        includesBrand: findEntry,\n        source: iterateEntries,\n        getBase64EncodedArray: createCircularNode,\n        startIndex: CustomMap + value\n      };\n    }\n  };\n  var HB = function (generatorWrapper) {\n    for (var value = [generatorWrapper.getTrustedTypesPolicy, generatorWrapper.source, generatorWrapper.startIndex].join(), CustomMap = 0, findEntry = 0; findEntry < value.length; findEntry++) {\n      CustomMap = Math.imul(31, CustomMap) + value.charCodeAt(findEntry) | 0;\n    }\n    return CustomMap.toString() + \",\" + generatorWrapper.includesBrand;\n  };\n  var GB = function (generatorWrapper, value, CustomMap) {\n    var findEntry = AB(generatorWrapper.entryIdCounter).objectStore(\"MediaSourceVideoChunk\");\n    return Promise.resolve(findEntry.get(value)).then(function (iterateEntries) {\n      if (!iterateEntries) {\n        settlePromise(resolvePromise.getAdInstance(), \"cenf\", \"1\");\n        return null;\n      }\n      if (iterateEntries.getBase64EncodedArray !== CustomMap) {\n        settlePromise(resolvePromise.getAdInstance(), \"cdl\", \"1\");\n        findEntry.removeElement(value).then(null, function (createCircularNode) {\n          settlePromise(resolvePromise.getAdInstance(), \"crdlvf\", createCircularNode.message);\n        });\n        return null;\n      }\n      settlePromise(resolvePromise.getAdInstance(), \"cefml\", \"1\");\n      return {\n        includesBrand: iterateEntries.includesBrand,\n        isAndroidBrowser: iterateEntries.isAndroidBrowser,\n        handleGeneratorError: iterateEntries.handleGeneratorError,\n        video: iterateEntries.video\n      };\n    }, function (iterateEntries) {\n      settlePromise(resolvePromise.getAdInstance(), \"cgvf\", iterateEntries.message);\n      return null;\n    });\n  };\n  var deleteVideoChunk = function (generatorWrapper, value) {\n    generatorWrapper = AB(generatorWrapper.entryIdCounter).objectStore(\"MediaSourceVideoChunk\");\n    Promise.resolve(putValue(generatorWrapper, value)).then(function () {\n      settlePromise(resolvePromise.getAdInstance(), \"cavs\", \"1\");\n    }, function (CustomMap) {\n      settlePromise(resolvePromise.getAdInstance(), \"cavf\", CustomMap.message);\n    });\n  };\n  var VideoChunkLoader = function (generatorWrapper) {\n    MediaElement.call(this);\n    var value = this;\n    this.resolvePromise = this.tasks = this.entryIdCounter = 0;\n    this.handleAsync = this.logError = null;\n    this.uri = new table(generatorWrapper);\n    this.state = 0;\n    if (this.isDone = isSupportedEnvironment() && !isGCacheURL(this.uri)) {\n      this.setTimeoutWrapper = createInstanceWithArguments(CB);\n    } else {\n      this.setTimeoutWrapper = null;\n    }\n    executeOrDelayUntilDisposed(this, function () {\n      markAsCompletedWrapper(value.setTimeoutWrapper);\n    });\n    if (this.isDone) {\n      this.logError = this.setTimeoutWrapper.initializeMraid();\n    } else {\n      this.logError = null;\n    }\n  };\n  inheritPrototype(VideoChunkLoader, MediaElement);\n  VideoChunkLoader.prototype.dispatchUnhandledRejection = function () {\n    return this.entryIdCounter;\n  };\n  VideoChunkLoader.prototype.onFulfilled = function () {\n    return this.state === 3;\n  };\n  VideoChunkLoader.prototype.handleThenable = function (generatorWrapper) {\n    if (this.state === 1) {\n      this.entryIdCounter += generatorWrapper;\n      this.state = 2;\n    } else if (this.state === 0) {\n      this.entryIdCounter += generatorWrapper;\n      this.state = 1;\n      checkAndHandleLoadingState(this);\n    }\n  };\n  var checkAndHandleLoadingState = function (generatorWrapper) {\n    wrapGeneratorToPromise(function (value) {\n      if (value.entryIdCounter == 1) {\n        if (generatorWrapper.state === 2) {\n          generatorWrapper.state = 1;\n        }\n        return generatorYield(value, loadVideoChunk(generatorWrapper), 4);\n      }\n      var CustomMap = generatorWrapper.resolvePromise > 3;\n      if (CustomMap && generatorWrapper.handleAsync !== null) {\n        var findEntry = createCustomEvent(\"media_source_error\", {\n          code: generatorWrapper.tasks > 0 ? MediaError.MEDIA_ERR_NETWORK : MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED,\n          message: 'Response code \"' + generatorWrapper.handleAsync + '\" with ' + generatorWrapper.entryIdCounter + \" bytes requested and \" + generatorWrapper.tasks + \" bytes loaded\"\n        });\n        generatorWrapper.dispatchEvent(findEntry);\n      }\n      if (generatorWrapper.tasks < generatorWrapper.entryIdCounter && generatorWrapper.state !== 3 && !CustomMap) {\n        value.entryIdCounter = 1;\n      } else {\n        if (generatorWrapper.state !== 3) {\n          generatorWrapper.state = 0;\n        }\n        value.entryIdCounter = 0;\n      }\n    });\n  };\n  var loadVideoChunk = function (generatorWrapper) {\n    var value;\n    return wrapGeneratorToPromise(function (CustomMap) {\n      switch (CustomMap.entryIdCounter) {\n        case 1:\n          value = generatorWrapper.tasks + \"-\" + (generatorWrapper.entryIdCounter - 1);\n          setParameter(generatorWrapper.uri, \"range\", value);\n          if (!generatorWrapper.isDone) {\n            CustomMap.entryIdCounter = 2;\n            break;\n          }\n          return generatorYield(CustomMap, generatorWrapper.logError, 3);\n        case 3:\n          return CustomMap.return(loadVideoChunkFromCache(generatorWrapper));\n        case 2:\n          CustomMap.setTimeoutWrapper = 4;\n          return generatorYield(CustomMap, loadVideoChunkViaXHR(generatorWrapper), 6);\n        case 6:\n          resetGeneratorState(CustomMap);\n          break;\n        case 4:\n          getGeneratorException(CustomMap);\n          handleFallbackAndIncrementRetry(generatorWrapper);\n          CustomMap.entryIdCounter = 0;\n      }\n    });\n  };\n  var loadVideoChunkFromCache = function (generatorWrapper) {\n    var value;\n    return wrapGeneratorToPromise(function (CustomMap) {\n      switch (CustomMap.entryIdCounter) {\n        case 1:\n          return generatorYield(CustomMap, generatorWrapper.setTimeoutWrapper.containsElement(generatorWrapper.uri), 2);\n        case 2:\n          if (value = CustomMap.tasks) {\n            if (value.handleGeneratorError) {\n              generatorWrapper.state = 3;\n            }\n            processVideoChunkData(generatorWrapper, value.video, 0);\n            CustomMap.entryIdCounter = 0;\n            break;\n          }\n          CustomMap.setTimeoutWrapper = 4;\n          return generatorYield(CustomMap, loadVideoChunkViaXHR(generatorWrapper), 6);\n        case 6:\n          resetGeneratorState(CustomMap);\n          break;\n        case 4:\n          getGeneratorException(CustomMap);\n          handleFallbackAndIncrementRetry(generatorWrapper);\n          CustomMap.entryIdCounter = 0;\n      }\n    });\n  };\n  var handleFallbackAndIncrementRetry = function (generatorWrapper) {\n    if (handleThenable(Lm)) {\n      generatorWrapper: {\n        var value = new UriParameterManager(generatorWrapper.uri);\n        var CustomMap, findEntry;\n        if ((CustomMap = value.uri) == null ? 0 : (findEntry = CustomMap.setTimeoutWrapper) == null ? 0 : findEntry.startsWith(\"/videoplayback\")) {\n          var iterateEntries = (CustomMap = getParameterById(value, \"mn\")) ? CustomMap.split(\",\") : null;\n          findEntry = getParameterById(value, \"fvip\");\n          CustomMap = value.uri.handleThenable();\n          if (iterateEntries && findEntry) {\n            var createCircularNode = (Number(getParameterById(value, \"fallback_count\")) || 0) + 1;\n            if (iterateEntries = iterateEntries[createCircularNode]) {\n              CustomMap.tasks = \"r\" + findEntry + \"---\" + iterateEntries + \".googlevideo.com\";\n              setParameter(CustomMap, \"fallback_count\", createCircularNode);\n              value = CustomMap;\n              break generatorWrapper;\n            }\n          }\n          var entryIdCounter, key;\n          findEntry = Number(((key = (entryIdCounter = CustomMap.entryIdCounter.get(\"cmo\")) == null ? undefined : entryIdCounter.split(\"=\")) != null ? key : [])[1]) || 0;\n          if (value.uri.tasks.match(/^r{1,2}(\\d+)---(.+)\\.googlevideo.com$/)) {\n            CustomMap.tasks = \"redirector.googlevideo.com\";\n          }\n          setParameter(CustomMap, \"cmo\", \"pf=\" + (findEntry + 1));\n          value = CustomMap;\n        } else {\n          value = value.uri;\n        }\n      }\n      generatorWrapper.uri = value;\n      generatorWrapper.dispatchEvent(createCustomEvent(\"bandaid_fallback_count\"));\n    }\n    generatorWrapper.resolvePromise++;\n  };\n  var loadVideoChunkViaXHR = function (generatorWrapper) {\n    return new Promise(function (value, CustomMap) {\n      var findEntry = new XMLHttpRequest();\n      var iterateEntries = 0;\n      var createCircularNode = generatorWrapper.entryIdCounter - generatorWrapper.tasks;\n      findEntry.addEventListener(\"load\", function () {\n        logError(\"lvlcl\");\n        if (findEntry.status >= 400) {\n          settlePromise(resolvePromise.getAdInstance(), \"lvlxes\", findEntry.status.toString());\n          generatorWrapper.handleAsync = findEntry.status;\n          CustomMap();\n        } else {\n          var entryIdCounter = findEntry.response;\n          if (entryIdCounter.byteLength < createCircularNode) {\n            generatorWrapper.state = 3;\n          }\n          var key = processVideoChunkData(generatorWrapper, entryIdCounter, iterateEntries);\n          iterateEntries += key;\n          if (generatorWrapper.isDone && entryIdCounter.byteLength > 0) {\n            generatorWrapper.setTimeoutWrapper.isIpod(entryIdCounter, generatorWrapper.uri, 0, entryIdCounter.byteLength < createCircularNode);\n          }\n          value();\n        }\n      });\n      findEntry.addEventListener(\"timeout\", function () {\n        logError(\"lvlct\");\n        generatorWrapper.handleAsync = findEntry.status;\n        CustomMap();\n      });\n      findEntry.addEventListener(\"error\", function () {\n        logError(\"lvlce\");\n        generatorWrapper.handleAsync = findEntry.status;\n        CustomMap();\n      });\n      findEntry.addEventListener(\"progress\", function () {\n        if (findEntry.status >= 400) {\n          generatorWrapper.handleAsync = findEntry.status;\n        } else {\n          var entryIdCounter = processVideoChunkData(generatorWrapper, findEntry.response, iterateEntries);\n          iterateEntries += entryIdCounter;\n        }\n      });\n      findEntry.responseType = \"arraybuffer\";\n      findEntry.open(\"get\", generatorWrapper.uri.toString());\n      findEntry.send(null);\n    });\n  };\n  var processVideoChunkData = function (generatorWrapper, value, CustomMap) {\n    if (value === null) {\n      return 0;\n    }\n    value = value.slice(CustomMap);\n    generatorWrapper.tasks += value.byteLength;\n    generatorWrapper.dispatchEvent({\n      type: \"progress\",\n      CustomError: value\n    });\n    return value.byteLength;\n  };\n  VideoChunkLoader.prototype.getAdEnvironment = function () {\n    if (this.isDone && this.setTimeoutWrapper.getUniqueId()) {\n      this.setTimeoutWrapper.closeCache();\n    }\n    MediaElement.prototype.getAdEnvironment.call(this);\n  };\n  var loadingThresholds = {\n    buildAdUrl: 200000,\n    addParameter: 70000,\n    validateStringPrototypeMethod: 300000,\n    serializeParameters: 5000,\n    sendImageRequestWithRetry: 5000,\n    addKeyValuePair: 6000\n  };\n  function isMediaSourceSupported() {\n    return !!window.MediaSource;\n  }\n  function isSupportedVideoType(generatorWrapper) {\n    if ([43, 44, 45].includes(generatorWrapper) && isAndroidBrowser) {\n      return false;\n    } else {\n      if (itagCodecMap[generatorWrapper]) {\n        generatorWrapper = getMediaSourceString(generatorWrapper);\n        return !!generatorWrapper && isMediaSourceSupported() && MediaSource.isTypeSupported(generatorWrapper);\n      } else {\n        return false;\n      }\n    }\n  }\n  var LoadingStrategy = function () {};\n  LoadingStrategy.prototype.parsedIntegerTransformation = function (generatorWrapper, value, CustomMap) {\n    if (CustomMap === 0) {\n      return 1000000;\n    } else {\n      if (value - generatorWrapper < 5000) {\n        return 300000;\n      } else {\n        return 0;\n      }\n    }\n  };\n  var SourceBufferManager = function (generatorWrapper, value) {\n    var CustomMap = this;\n    this.entryIdCounter = generatorWrapper;\n    this.index = value;\n    this.tasks = [];\n    if (!this.entryIdCounter) {\n      logError(\"msms_sbf\" + this.index);\n    }\n    this.entryIdCounter.addEventListener(\"updateend\", function () {\n      executeBufferAppend(CustomMap);\n    });\n    this.entryIdCounter.addEventListener(\"error\", function () {\n      logError(\"msms_sbe\" + CustomMap.index);\n    });\n  };\n  var executeBufferAppend = function (generatorWrapper) {\n    if (generatorWrapper.tasks.length > 0 && !generatorWrapper.entryIdCounter.updating) {\n      var value = generatorWrapper.tasks.shift();\n      generatorWrapper.entryIdCounter.appendBuffer(value);\n    }\n  };\n  var CacheVideoChunkStorage = function () {\n    this.entryIdCounter = this.cache = null;\n  };\n  setTimeoutWrapper = CacheVideoChunkStorage.prototype;\n  setTimeoutWrapper.initializeMraid = function () {\n    var generatorWrapper = this;\n    return window.caches.open(\"CACHE_VIDEO_CHUNK_PERSISTENT_STORAGE\").then(function (value) {\n      generatorWrapper.cache = value;\n    }, function (value) {\n      settlePromise(resolvePromise.getAdInstance(), \"codf\", value.message);\n    });\n  };\n  setTimeoutWrapper.getUniqueId = function () {\n    return this.cache !== null;\n  };\n  setTimeoutWrapper.closeCache = function () {\n    return Promise.resolve();\n  };\n  setTimeoutWrapper.containsElement = function (generatorWrapper) {\n    var value = this;\n    generatorWrapper = generateCacheKey(this, generatorWrapper);\n    if (this.getUniqueId() && generatorWrapper) {\n      return this.cache.match(generatorWrapper).then(function (CustomMap) {\n        if (!CustomMap) {\n          settlePromise(resolvePromise.getAdInstance(), \"cenf\", \"1\");\n          return Promise.resolve(null);\n        }\n        settlePromise(resolvePromise.getAdInstance(), \"cef\", \"1\");\n        return CustomMap.arrayBuffer().then(function (findEntry) {\n          var iterateEntries = getRangeStart(value.entryIdCounter),\n            createCircularNode;\n          if (createCircularNode = value.entryIdCounter.uri.entryIdCounter.get(\"range\")) {\n            createCircularNode = createCircularNode.split(\"-\")[1];\n            if (!createCircularNode || isNaN(Number(createCircularNode))) {\n              createCircularNode = null;\n            } else {\n              createCircularNode = Number(createCircularNode);\n            }\n          } else {\n            createCircularNode = null;\n          }\n          iterateEntries = iterateEntries + findEntry.byteLength - 1;\n          createCircularNode = createCircularNode > iterateEntries;\n          return {\n            includesBrand: getParameterById(value.entryIdCounter, \"itag\"),\n            isAndroidBrowser: iterateEntries,\n            handleGeneratorError: createCircularNode,\n            video: findEntry\n          };\n        });\n      }, function (CustomMap) {\n        settlePromise(resolvePromise.getAdInstance(), \"cgvf\", CustomMap.message);\n        return Promise.resolve(null);\n      });\n    } else {\n      settlePromise(resolvePromise.getAdInstance(), \"cgvf\", \"1\");\n      return Promise.resolve(null);\n    }\n  };\n  setTimeoutWrapper.isIpod = function (generatorWrapper, value) {\n    value = generateCacheKey(this, value);\n    generatorWrapper = new Response(generatorWrapper);\n    if (this.getUniqueId() && value) {\n      this.cache.put(value, generatorWrapper).then(function () {\n        settlePromise(resolvePromise.getAdInstance(), \"cavs\", \"1\");\n      }, function (CustomMap) {\n        settlePromise(resolvePromise.getAdInstance(), \"cavf\", CustomMap.message);\n      });\n    } else {\n      settlePromise(resolvePromise.getAdInstance(), \"cavf\", \"1\");\n      Promise.resolve();\n    }\n  };\n  var generateCacheKey = function (generatorWrapper, value) {\n    generatorWrapper.entryIdCounter = new UriParameterManager(value);\n    value = generatorWrapper.entryIdCounter.getAdId();\n    var CustomMap = getParameterById(generatorWrapper.entryIdCounter, \"itag\");\n    var findEntry = getParameterById(generatorWrapper.entryIdCounter, \"source\");\n    var iterateEntries = getParameterById(generatorWrapper.entryIdCounter, \"lmt\");\n    generatorWrapper = getParameterById(generatorWrapper.entryIdCounter, \"range\");\n    if (value && CustomMap && findEntry && generatorWrapper) {\n      return new Request(\"http://url/videoplayback?id=\" + value + \"&itag=\" + CustomMap + \"&source=\" + findEntry + \"&lmt=\" + iterateEntries + \"&range=\" + generatorWrapper);\n    }\n    settlePromise(resolvePromise.getAdInstance(), \"civp\", \"1\");\n    return null;\n  };\n  var MediaSourceManager = function (generatorWrapper) {\n    AdEnvironmentConfig.call(this);\n    var value = this;\n    this.setTimeoutWrapper = generatorWrapper;\n    this.entryIdCounter = [];\n    this.isDone = null;\n    this.onFulfilled = 0;\n    this.handleThenable = false;\n    this.handleThenable = 0;\n    this.dispatchUnhandledRejection = [];\n    if (handleThenable(Am)) {\n      var CustomMap = null;\n      if (isSupportedEnvironment()) {\n        if (handleThenable(Cm)) {\n          CustomMap = createInstanceWithArguments(CacheVideoChunkStorage);\n        } else {\n          CustomMap = createInstanceWithArguments(CB);\n        }\n      }\n      this.handleAsync = this.setTimeoutWrapper.map(function (findEntry) {\n        return createInstanceWithArguments(MediaSourceLoader, findEntry.url, isGCacheURL(findEntry.url) ? null : CustomMap);\n      });\n    } else {\n      this.handleAsync = this.setTimeoutWrapper.map(function (findEntry) {\n        return createInstanceWithArguments(VideoChunkLoader, findEntry.url);\n      });\n    }\n    this.tasks = createInstanceWithArguments(MediaSource);\n    this.resolvePromise = function () {\n      setupSourceBuffers(value);\n    };\n    this.tasks.addEventListener(\"sourceopen\", this.resolvePromise);\n    this.logError = initializeSegmentTrackers(this);\n  };\n  inheritPrototype(MediaSourceManager, AdEnvironmentConfig);\n  var initializeSegmentTrackers = function (generatorWrapper) {\n    for (var value = [], CustomMap = 0; CustomMap < generatorWrapper.setTimeoutWrapper.length; ++CustomMap) {\n      value.push(new LoadingStrategy());\n    }\n    return value;\n  };\n  var setupSourceBuffers = function (generatorWrapper) {\n    logError(\"msms_oso\");\n    value = {\n      setErrorContext: undefined,\n      supportsUint8Array: undefined,\n      includesIgnoreCase: undefined,\n      resetGeneratorState: value.resetGeneratorState,\n      supportsBtoa: undefined\n    };\n    for (var value = {\n      resetGeneratorState: 0\n    }; value.resetGeneratorState < generatorWrapper.setTimeoutWrapper.length; ++value.resetGeneratorState) {\n      var CustomMap = generatorWrapper.setTimeoutWrapper[value.resetGeneratorState];\n      settlePromise(resolvePromise.getAdInstance(), \"msms_mime\" + value.resetGeneratorState, CustomMap.mimeType);\n      settlePromise(resolvePromise.getAdInstance(), \"msms_cs\" + value.resetGeneratorState, CustomMap.validateStringPrototypeMethod.toString());\n      if (handleThenable(Bm)) {\n        value.setErrorContext = new SourceBufferManager(generatorWrapper.tasks.addSourceBuffer(CustomMap.mimeType), value.resetGeneratorState);\n        value.supportsUint8Array = generatorWrapper.handleAsync[value.resetGeneratorState];\n        value.supportsUint8Array.window(\"progress\", function (findEntry) {\n          return function (iterateEntries) {\n            var createCircularNode = findEntry.setErrorContext;\n            var entryIdCounter = findEntry.supportsUint8Array;\n            iterateEntries = iterateEntries.CustomError;\n            if (iterateEntries.byteLength !== 0) {\n              createCircularNode.tasks.push(iterateEntries);\n              executeBufferAppend(createCircularNode);\n            }\n            if (entryIdCounter.onFulfilled()) {\n              generatorWrapper.onFulfilled++;\n              if (generatorWrapper.onFulfilled === generatorWrapper.entryIdCounter.length) {\n                endAllSourceBuffers(generatorWrapper);\n              }\n            }\n          };\n        }(value));\n        value.supportsUint8Array.window(\"media_source_error\", function (findEntry) {\n          generatorWrapper.dispatchEvent(findEntry);\n        });\n        generatorWrapper.entryIdCounter.push(value.setErrorContext.entryIdCounter);\n      } else {\n        value.includesIgnoreCase = generatorWrapper.tasks.addSourceBuffer(CustomMap.mimeType);\n        if (value.includesIgnoreCase) {\n          value.supportsBtoa = generatorWrapper.handleAsync[value.resetGeneratorState];\n          if (handleThenable(Am)) {\n            value.includesIgnoreCase.addEventListener(\"updateend\", function (findEntry) {\n              return function () {\n                if (generatorWrapper.dispatchUnhandledRejection.length > 0 && !findEntry.includesIgnoreCase.updating) {\n                  var iterateEntries = generatorWrapper.dispatchUnhandledRejection.shift();\n                  findEntry.includesIgnoreCase.appendBuffer(iterateEntries);\n                }\n              };\n            }(value));\n          }\n          value.includesIgnoreCase.addEventListener(\"error\", function (findEntry) {\n            return function () {\n              logError(\"msms_sbe\" + findEntry.resetGeneratorState);\n            };\n          }(value));\n          value.supportsBtoa.window(\"progress\", function (findEntry) {\n            return function (iterateEntries) {\n              var createCircularNode = findEntry.includesIgnoreCase;\n              var entryIdCounter = findEntry.supportsBtoa;\n              iterateEntries = iterateEntries.CustomError;\n              if (iterateEntries.byteLength !== 0) {\n                if (handleThenable(Am)) {\n                  if (createCircularNode.updating) {\n                    generatorWrapper.dispatchUnhandledRejection.push(iterateEntries);\n                  } else {\n                    createCircularNode.appendBuffer(iterateEntries);\n                  }\n                } else {\n                  createCircularNode.appendBuffer(iterateEntries);\n                }\n              }\n              if (entryIdCounter.onFulfilled()) {\n                generatorWrapper.onFulfilled++;\n                if (generatorWrapper.onFulfilled === generatorWrapper.entryIdCounter.length) {\n                  endAllSourceBuffers(generatorWrapper);\n                }\n              }\n            };\n          }(value));\n          value.supportsBtoa.window(\"media_source_error\", function (findEntry) {\n            generatorWrapper.dispatchEvent(findEntry);\n          });\n          generatorWrapper.entryIdCounter.push(value.includesIgnoreCase);\n        } else {\n          logError(\"msms_sbf\" + value.resetGeneratorState);\n        }\n      }\n    }\n    settlePromise(resolvePromise.getAdInstance(), \"msms_ns\", generatorWrapper.entryIdCounter.length.toString());\n    generatorWrapper.handleThenable = true;\n    updateSegmentTrackers(generatorWrapper);\n  };\n  var endAllSourceBuffers = function (generatorWrapper) {\n    Promise.all(generatorWrapper.entryIdCounter.map(function (value) {\n      return new Promise(function (CustomMap) {\n        if (value.updating) {\n          value.addEventListener(\"updateend\", function () {\n            CustomMap();\n          });\n        } else {\n          CustomMap();\n        }\n      });\n    })).then(function () {\n      generatorWrapper.tasks.endOfStream();\n    });\n  };\n  var updateSegmentTrackers = function (generatorWrapper) {\n    if (generatorWrapper.handleThenable) {\n      for (var value = 0; value < generatorWrapper.setTimeoutWrapper.length; ++value) {\n        var CustomMap = generatorWrapper.handleAsync[value];\n        var findEntry = generatorWrapper.entryIdCounter[value];\n        if (findEntry.buffered.length === 0) {\n          findEntry = 0;\n        } else {\n          findEntry = 1000 * findEntry.buffered.end(0);\n        }\n        findEntry = generatorWrapper.logError[value].parsedIntegerTransformation(generatorWrapper.handleThenable, findEntry, CustomMap.dispatchUnhandledRejection());\n        if (findEntry !== 0) {\n          CustomMap.handleThenable(findEntry);\n        }\n      }\n    }\n  };\n  var generateObjectURL = function (generatorWrapper) {\n    generatorWrapper.isDone = createObjectURLWithValidation(generatorWrapper.tasks).toString();\n    return generatorWrapper.isDone;\n  };\n  MediaSourceManager.prototype.getAdEnvironment = function () {\n    if (this.isDone) {\n      window.URL.revokeObjectURL(this.isDone);\n    }\n    for (var generatorWrapper = getIterator(this.handleAsync), value = generatorWrapper.next(); !value.done; value = generatorWrapper.next()) {\n      value.value.markAsCompleted();\n    }\n    this.tasks.removeEventListener(\"sourceopen\", this.resolvePromise);\n    AdEnvironmentConfig.prototype.getAdEnvironment.call(this);\n  };\n  MediaSourceManager.prototype.ByteArray = function (generatorWrapper) {\n    this.logError.filter(function () {\n      return false;\n    }).map(function (value) {\n      return value;\n    }).forEach(function (value) {\n      value.entryIdCounter = Object.assign({}, loadingThresholds, value.entryIdCounter, generatorWrapper);\n    });\n  };\n  var adRequestUrlPattern = RegExp(\"/pagead/conversion|/pagead/adview|/pagead/gen_204|/activeview?|csi.gstatic.com/csi|google.com/pagead/xsul|google.com/ads/measurement/l|googleads.g.doubleclick.net/pagead/ide_cookie|googleads.g.doubleclick.net/xbbe/pixel\");\n  var outstreamScriptPattern = RegExp(\"outstream.min.js\");\n  var outstreamStylePattern = RegExp(\"outstream.min.css\");\n  var fontRequestPattern = RegExp(\"fonts.gstatic.com\");\n  var videoPlaybackUrlPattern = RegExp(\"googlevideo.com/videoplayback|c.2mdn.net/videoplayback|gcdn.2mdn.net/videoplayback\");\n  var customElementsScriptPattern = RegExp(\"custom.elements.min.js\");\n  function calculateAndReportResourceTiming(generatorWrapper, value) {\n    var CustomMap = 0;\n    var findEntry = 0;\n    var iterateEntries = 0;\n    var createCircularNode = 0;\n    var entryIdCounter = 0;\n    var key = 0;\n    var value = 0;\n    var entry = false;\n    var currentEntry = false;\n    if (typeof getFromGlobalScope(\"performance.getEntriesByType\", globalScope) === \"function\" && \"transferSize\" in globalScope.PerformanceResourceTiming.prototype) {\n      var foundEntry = globalScope.performance.getEntriesByType(\"resource\");\n      foundEntry = getIterator(foundEntry);\n      for (var resolveFunction = foundEntry.next(); !resolveFunction.done; resolveFunction = foundEntry.next()) {\n        resolveFunction = resolveFunction.value;\n        if (!adRequestUrlPattern.test(resolveFunction.name)) {\n          createCircularNode += 1;\n          if (resolveFunction.transferSize) {\n            CustomMap += resolveFunction.transferSize;\n            if (resolveFunction.encodedBodySize && resolveFunction.transferSize < resolveFunction.encodedBodySize) {\n              key += 1;\n              iterateEntries += resolveFunction.encodedBodySize;\n              if (outstreamScriptPattern.test(resolveFunction.name)) {\n                entry = true;\n              }\n              if (outstreamStylePattern.test(resolveFunction.name)) {\n                currentEntry = true;\n              }\n            }\n            if (videoPlaybackUrlPattern.test(resolveFunction.name)) {\n              findEntry += resolveFunction.transferSize;\n            }\n          } else if (resolveFunction.transferSize === 0 && resolveFunction.encodedBodySize === 0) {\n            if (customElementsScriptPattern.test(resolveFunction.name)) {\n              CustomMap += 6686;\n            } else if (!fontRequestPattern.test(resolveFunction.name)) {\n              value += 1;\n              addMultipleKeyValues(resolvePromise.getAdInstance(), {\n                event_name: \"unmeasurable_asset\",\n                resource_name: resolveFunction.name,\n                encoded_body_size: resolveFunction.encodedBodySize,\n                transfer_size: resolveFunction.transferSize\n              });\n            }\n          } else {\n            entryIdCounter += 1;\n            iterateEntries += resolveFunction.encodedBodySize;\n            if (outstreamScriptPattern.test(resolveFunction.name)) {\n              entry = true;\n            }\n            if (outstreamStylePattern.test(resolveFunction.name)) {\n              currentEntry = true;\n            }\n          }\n        }\n      }\n      foundEntry = 0;\n      if (generatorWrapper.duration) {\n        for (resolveFunction = 0; resolveFunction < generatorWrapper.buffered.length; resolveFunction++) {\n          foundEntry += generatorWrapper.buffered.end(resolveFunction) - generatorWrapper.buffered.startTimer(resolveFunction);\n        }\n        foundEntry = Math.min(foundEntry, generatorWrapper.duration);\n      }\n      addMultipleKeyValues(resolvePromise.getAdInstance(), {\n        event_name: value,\n        asset_bytes: CustomMap,\n        video_bytes: findEntry,\n        cached_data_bytes: iterateEntries,\n        js_cached: entry,\n        css_cached: currentEntry,\n        num_assets: createCircularNode,\n        num_assets_cached: entryIdCounter,\n        num_assets_cache_validated: key,\n        num_assets_unmeasurable: value,\n        video_played_seconds: generatorWrapper.currentTime.toFixed(2),\n        video_muted: generatorWrapper.muted,\n        video_seconds_loaded: foundEntry.toFixed(2)\n      });\n    } else {\n      settlePromise(resolvePromise.getAdInstance(), \"error\", \"reporting_timing_not_supported\");\n    }\n  }\n  var MediaSourceConfig = function (generatorWrapper, value, CustomMap, findEntry) {\n    this.url = generatorWrapper;\n    this.mimeType = value;\n    this.validateStringPrototypeMethod = CustomMap;\n    if (undefined === findEntry) {\n      this.entryIdCounter = null;\n    } else {\n      this.entryIdCounter = findEntry;\n    }\n  };\n  function reportVideoPlaybackQuality(generatorWrapper) {\n    var value = resolvePromise.getAdInstance();\n    var CustomMap = generatorWrapper.getVideoPlaybackQuality && generatorWrapper.getVideoPlaybackQuality();\n    if (CustomMap) {\n      generatorWrapper = generatorWrapper.currentTime;\n      settlePromise(value, \"vqdf\", String(CustomMap.droppedVideoFrames));\n      settlePromise(value, \"vqtf\", String(CustomMap.totalVideoFrames));\n      settlePromise(value, \"vqfr\", String(Math.roundRectangle(CustomMap.totalVideoFrames / generatorWrapper)));\n    } else {\n      settlePromise(value, \"vqu\", \"1\");\n    }\n  }\n  var EventName = function (generatorWrapper) {\n    this.entryIdCounter = generatorWrapper;\n  };\n  EventName.prototype.toString = function () {\n    return this.entryIdCounter;\n  };\n  var videoMuteEvent = new EventName(\"video_mute\");\n  var videoCaptionVisibilityEvent = new EventName(\"video_caption_visibility\");\n  var EventDispatcher = function (generatorWrapper) {\n    tryCall.call(this);\n    this.isDone = 1;\n    this.setTimeoutWrapper = [];\n    this.createDeferred = 0;\n    this.entryIdCounter = [];\n    this.tasks = {};\n    this.dispatchUnhandledRejection = !!generatorWrapper;\n  };\n  inheritPrototype(EventDispatcher, tryCall);\n  var registerEvent = function (generatorWrapper, value, CustomMap) {\n    var findEntry = videoCaptionVisibilityEvent.toString();\n    var iterateEntries = generatorWrapper.tasks[findEntry];\n    if (!iterateEntries) {\n      iterateEntries = generatorWrapper.tasks[findEntry] = [];\n    }\n    var createCircularNode = generatorWrapper.isDone;\n    generatorWrapper.entryIdCounter[createCircularNode] = findEntry;\n    generatorWrapper.entryIdCounter[createCircularNode + 1] = value;\n    generatorWrapper.entryIdCounter[createCircularNode + 2] = CustomMap;\n    generatorWrapper.isDone = createCircularNode + 3;\n    iterateEntries.push(createCircularNode);\n  };\n  var unregisterEvent = function (generatorWrapper, value, CustomMap) {\n    var findEntry = generatorWrapper.tasks[videoCaptionVisibilityEvent.toString()];\n    if (findEntry) {\n      var iterateEntries = generatorWrapper.entryIdCounter;\n      if (findEntry = findEntry.find(function (createCircularNode) {\n        return iterateEntries[createCircularNode + 1] == value && iterateEntries[createCircularNode + 2] == CustomMap;\n      })) {\n        generatorWrapper.handleAsync(findEntry);\n      }\n    }\n  };\n  EventDispatcher.prototype.handleAsync = function (generatorWrapper) {\n    var value = this.entryIdCounter[generatorWrapper];\n    if (value) {\n      var CustomMap = this.tasks[value];\n      if (this.createDeferred != 0) {\n        this.setTimeoutWrapper.push(generatorWrapper);\n        this.entryIdCounter[generatorWrapper + 1] = function () {};\n      } else {\n        if (CustomMap) {\n          removeElement(CustomMap, generatorWrapper);\n        }\n        delete this.entryIdCounter[generatorWrapper];\n        delete this.entryIdCounter[generatorWrapper + 1];\n        delete this.entryIdCounter[generatorWrapper + 2];\n      }\n    }\n    return !!value;\n  };\n  EventDispatcher.prototype.onFulfilled = function (generatorWrapper, value) {\n    var CustomMap = this.tasks[generatorWrapper];\n    if (CustomMap) {\n      for (var findEntry = Array(arguments.length - 1), iterateEntries = 1, createCircularNode = arguments.length; iterateEntries < createCircularNode; iterateEntries++) {\n        findEntry[iterateEntries - 1] = arguments[iterateEntries];\n      }\n      if (this.dispatchUnhandledRejection) {\n        for (iterateEntries = 0; iterateEntries < CustomMap.length; iterateEntries++) {\n          var entryIdCounter = CustomMap[iterateEntries];\n          invokeEventCallback(this.entryIdCounter[entryIdCounter + 1], this.entryIdCounter[entryIdCounter + 2], findEntry);\n        }\n      } else {\n        this.createDeferred++;\n        try {\n          iterateEntries = 0;\n          for (createCircularNode = CustomMap.length; iterateEntries < createCircularNode && !this.handleIteratorResult(); iterateEntries++) {\n            entryIdCounter = CustomMap[iterateEntries];\n            this.entryIdCounter[entryIdCounter + 1].apply(this.entryIdCounter[entryIdCounter + 2], findEntry);\n          }\n        } finally {\n          this.createDeferred--;\n          if (this.setTimeoutWrapper.length > 0 && this.createDeferred == 0) {\n            for (; CustomMap = this.setTimeoutWrapper.pop();) {\n              this.handleAsync(CustomMap);\n            }\n          }\n        }\n      }\n    }\n  };\n  var invokeEventCallback = function (generatorWrapper, value, CustomMap) {\n    enqueueTask(function () {\n      generatorWrapper.apply(value, CustomMap);\n    });\n  };\n  EventDispatcher.prototype.clearAll = function (generatorWrapper) {\n    if (generatorWrapper) {\n      var value = this.tasks[generatorWrapper];\n      if (value) {\n        value.forEach(this.handleAsync, this);\n        delete this.tasks[generatorWrapper];\n      }\n    } else {\n      this.entryIdCounter.length = 0;\n      this.tasks = {};\n    }\n  };\n  EventDispatcher.prototype.getAdEnvironment = function () {\n    EventDispatcher.executeGeneratorAsPromise.getAdEnvironment.call(this);\n    this.clearAll();\n    this.setTimeoutWrapper.length = 0;\n  };\n  var EventDispatcherWrapper = function (generatorWrapper) {\n    tryCall.call(this);\n    this.entryIdCounter = new EventDispatcher(generatorWrapper);\n    registerDisposable(this, this.entryIdCounter);\n  };\n  inheritPrototype(EventDispatcherWrapper, tryCall);\n  EventDispatcherWrapper.prototype.clearAll = function (generatorWrapper) {\n    this.entryIdCounter.clearAll(undefined !== generatorWrapper ? generatorWrapper.toString() : undefined);\n  };\n  var BaseComponent = function (generatorWrapper) {\n    if (undefined === generatorWrapper) {\n      generatorWrapper = null;\n    } else {\n      generatorWrapper = generatorWrapper;\n    }\n    tryCall.call(this);\n    this.entryIdCounter = new EventDispatcher(this);\n    registerDisposable(this, this.entryIdCounter);\n    this.isOperaBrowser = generatorWrapper;\n  };\n  inheritPrototype(BaseComponent, tryCall);\n  var bindComponentEvent = function (generatorWrapper, value, CustomMap) {\n    if (generatorWrapper.isOperaBrowser) {\n      registerEvent(generatorWrapper.isOperaBrowser.entryIdCounter, value, CustomMap);\n      executeOrDelayUntilDisposed(generatorWrapper, function () {\n        unregisterEvent(generatorWrapper.isOperaBrowser.entryIdCounter, value, CustomMap);\n      });\n    }\n  };\n  var CaptionVisibilityComponent = function (generatorWrapper, value) {\n    BaseComponent.call(this, value);\n    bindComponentEvent(this, function (CustomMap) {\n      if (CustomMap) {\n        generatorWrapper.entryIdCounter.mode = \"showing\";\n      } else {\n        generatorWrapper.endsWith();\n      }\n    }, this);\n  };\n  inheritPrototype(CaptionVisibilityComponent, BaseComponent);\n  var BaseSDKComponent = function () {\n    AdEnvironmentConfig.call(this);\n    this.setTimeoutWrapper = new EventDispatcher(this);\n    registerDisposable(this, this.setTimeoutWrapper);\n  };\n  inheritPrototype(BaseSDKComponent, AdEnvironmentConfig);\n  var placeholderForFutureFunction = function (generatorWrapper, value, CustomMap) {\n    if (undefined === CustomMap) {\n      CustomMap = true;\n    } else {\n      CustomMap = CustomMap;\n    }\n    BaseSDKComponent.call(this);\n    generatorWrapper.setAttribute(\"crossorigin\", \"anonymous\");\n    var findEntry = createElementWithOptionalClassesAndAttributes(\"TRACK\");\n    findEntry.setAttribute(\"kind\", \"captions\");\n    findEntry.setAttribute(\"src\", value);\n    findEntry.setAttribute(\"default\", \"\");\n    generatorWrapper.appendChild(findEntry);\n    this.tasks = document.createElement(\"style\");\n    generatorWrapper.appendChild(this.tasks);\n    this.entryIdCounter = generatorWrapper.textTracks[0];\n    setupCueChangeHandler(this);\n    if (CustomMap) {\n      this.entryIdCounter.mode = \"showing\";\n    } else {\n      this.endsWith();\n    }\n  };\n  inheritPrototype(placeholderForFutureFunction, BaseSDKComponent);\n  var setupCueChangeHandler = function (generatorWrapper) {\n    var value = generatorWrapper.entryIdCounter;\n    document.addEventListener(\"updateCueStyles\", function (CustomMap) {\n      generatorWrapper.tasks.textContent = CustomMap.detail.style;\n    }, true);\n    value.addEventListener(\"cuechange\", function () {\n      for (var CustomMap = value.cues, findEntry = 0; findEntry < CustomMap.length; findEntry++) {\n        var iterateEntries = CustomMap[findEntry];\n        iterateEntries.align = \"center\";\n        iterateEntries.position = \"auto\";\n      }\n    }, {\n      once: true\n    });\n  };\n  placeholderForFutureFunction.prototype.endsWith = function () {\n    this.entryIdCounter.mode = \"hidden\";\n  };\n  function setupReportingObserver(generatorWrapper, value) {\n    if (typeof ReportingObserver !== \"undefined\") {\n      var CustomMap = function (iterateEntries) {\n        iterateEntries = getIterator(iterateEntries);\n        for (var createCircularNode = iterateEntries.next(); !createCircularNode.done; createCircularNode = iterateEntries.next()) {\n          createCircularNode = createCircularNode.value;\n          if (generatorWrapper(createCircularNode)) {\n            value(createCircularNode);\n          }\n        }\n      };\n      var findEntry = new ReportingObserver(CustomMap, {\n        buffered: true\n      });\n      globalScope.addEventListener(\"pagehide\", function () {\n        CustomMap(findEntry.takeRecords(), findEntry);\n        findEntry.disconnect();\n      });\n      findEntry.observe();\n    }\n  }\n  function handleHeavyAdIntervention(generatorWrapper) {\n    if (undefined === generatorWrapper) {\n      generatorWrapper = null;\n    } else {\n      generatorWrapper = generatorWrapper;\n    }\n    setupReportingObserver(function (value) {\n      return value.body && value.body.writeBytes === \"HeavyAdIntervention\";\n    }, function (value) {\n      var CustomMap = value.body.message;\n      var findEntry = resolvePromise.getAdInstance();\n      settlePromise(findEntry, \"ham\", CustomMap);\n      if (CustomMap.includes(\"CPU\")) {\n        settlePromise(findEntry, \"hacpu\", \"true\");\n      } else if (CustomMap.includes(\"network\")) {\n        settlePromise(findEntry, \"habytes\", \"true\");\n      }\n      if (generatorWrapper) {\n        generatorWrapper(value);\n      }\n    });\n  }\n  var videoAttributes = \"autoplay controls crossorigin demuxedaudiosrc demuxedvideosrc loop muted playsinline poster preload src webkit-playsinline x-webkit-airplay\".split(\" \");\n  var videoMethods = \"autoplay buffered controls crossOrigin currentSrc currentTime defaultMuted defaultPlaybackRate disablePictureInPicture disableRemotePlayback duration ended loop muted networkState onerror onwaitingforkey paused played playsinline poster preload preservesPitch mozPreservesPitch webkitPreservesPitch readyState seekable videoWidth videoHeight volume textTracks canPlayType captureStream getVideoPlaybackQuality load pause play requestPictureInPicture setSinkId oncanplay oncanplaythrough onload onplay onpause onended onfullscreenchange onfullscreenerror addEventListener dispatchEvent removeEventListener requestFullscreen\".split(\" \");\n  var mutationObserverConfig = {\n    childList: true\n  };\n  var supportsClassFields = !RegExp(\"^\\\\s*class\\\\s*\\\\{\\\\s*\\\\}\\\\s*$\").test(function () {}.toString());\n  var CustomHTMLElement = HTMLElement;\n  if (supportsClassFields) {\n    CustomHTMLElement = function () {\n      var generatorWrapper = Object.getPrototypeOf(this).constructor;\n      return globalScope.Reflect.construct(HTMLElement, [], generatorWrapper);\n    };\n    Object.setPrototypeOf(CustomHTMLElement, HTML"