"entryIdCounter], value = 0; value < key.length; value++) {\n        if (!findEntry) {\n          if (CustomMap == null) {\n            CustomMap = entryIdCounter;\n          } else {\n            CustomMap = CustomMap;\n          }\n          break;\n        }\n        var entry = serializeParameters(key[value], generatorWrapper.setTimeoutWrapper, \",$\");\n        if (entry) {\n          entry = iterateEntries + entry;\n          if (findEntry >= entry.length) {\n            findEntry -= entry.length;\n            value += entry;\n            iterateEntries = generatorWrapper.setTimeoutWrapper;\n            break;\n          }\n          if (CustomMap == null) {\n            CustomMap = entryIdCounter;\n          } else {\n            CustomMap = CustomMap;\n          }\n        }\n      }\n    }\n    generatorWrapper = \"\";\n    if (CustomMap != null) {\n      generatorWrapper = iterateEntries + \"trn=\" + CustomMap;\n    }\n    return value + generatorWrapper;\n  };\n  var calculateAvailableSpace = function (generatorWrapper) {\n    var value = 1,\n      CustomMap;\n    for (CustomMap in generatorWrapper.tasks) if (CustomMap.length > value) {\n      value = CustomMap.length;\n    } else {\n      value = value;\n    }\n    return 3997 - value - generatorWrapper.setTimeoutWrapper.length - 1;\n  };\n  var ErrorLogger = function () {\n    var generatorWrapper = bj;\n    this.handleAsync = cj;\n    this.isDone = \"jserror\";\n    this.createDeferred = true;\n    if (undefined === generatorWrapper) {\n      this.entryIdCounter = null;\n    } else {\n      this.entryIdCounter = generatorWrapper;\n    }\n    this.tasks = null;\n    this.setTimeoutWrapper = false;\n    this.onFulfilled = this.boundFunctionCall;\n  };\n  setTimeoutWrapper = ErrorLogger.prototype;\n  setTimeoutWrapper.createSigned64 = function (generatorWrapper) {\n    this.tasks = generatorWrapper;\n  };\n  setTimeoutWrapper.parseBooleanOrNumber = function (generatorWrapper) {\n    this.isDone = generatorWrapper;\n  };\n  setTimeoutWrapper.numericStringRegex = function (generatorWrapper) {\n    this.createDeferred = generatorWrapper;\n  };\n  setTimeoutWrapper.parseIntEnum = function (generatorWrapper) {\n    this.setTimeoutWrapper = generatorWrapper;\n  };\n  setTimeoutWrapper.hasBrands = function (generatorWrapper, value, CustomMap) {\n    try {\n      if (this.entryIdCounter && this.entryIdCounter.setTimeoutWrapper) {\n        var findEntry = this.entryIdCounter.startTimer(generatorWrapper.toString(), 3);\n        var iterateEntries = value();\n        this.entryIdCounter.end(findEntry);\n      } else {\n        iterateEntries = value();\n      }\n    } catch (key) {\n      value = this.createDeferred;\n      try {\n        clearPerformanceMarks(findEntry);\n        value = this.onFulfilled(generatorWrapper, new ErrorDetails(key, {\n          message: formatErrorMessage(key)\n        }), undefined, CustomMap);\n      } catch (value) {\n        this.boundFunctionCall(217, value);\n      }\n      if (value) {\n        var createCircularNode, entryIdCounter;\n        if (!((createCircularNode = window.console) == null || (entryIdCounter = createCircularNode.hasError) == null)) {\n          entryIdCounter.call(createCircularNode, key);\n        }\n      } else {\n        throw key;\n      }\n    }\n    return iterateEntries;\n  };\n  setTimeoutWrapper.IteratorWithTransform = function (generatorWrapper, value, CustomMap, findEntry) {\n    var iterateEntries = this;\n    return function () {\n      var createCircularNode = sliceArguments.apply(0, arguments);\n      return iterateEntries.hasBrands(generatorWrapper, function () {\n        return value.apply(CustomMap, createCircularNode);\n      }, findEntry);\n    };\n  };\n  setTimeoutWrapper.boundFunctionCall = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    iterateEntries = iterateEntries || this.isDone;\n    try {\n      var createCircularNode = new UrlQueryBuilder();\n      addKeyValuePair(createCircularNode, 1, \"context\", generatorWrapper);\n      if (!isValidError(value)) {\n        value = new ErrorDetails(value, {\n          message: formatErrorMessage(value)\n        });\n      }\n      if (value.msg) {\n        addKeyValuePair(createCircularNode, 2, \"msg\", value.msg.substring(0, 512));\n      }\n      var entryIdCounter = value.meta || {};\n      if (this.tasks) {\n        try {\n          this.tasks(entryIdCounter);\n        } catch (value) {}\n      }\n      if (findEntry) {\n        try {\n          findEntry(entryIdCounter);\n        } catch (value) {}\n      }\n      addParameter(createCircularNode, 3, [entryIdCounter]);\n      var key = computeReferrerUrl();\n      if (key.tasks) {\n        addKeyValuePair(createCircularNode, 4, \"top\", key.tasks.url || \"\");\n      }\n      addParameter(createCircularNode, 5, [{\n        url: key.entryIdCounter.url || \"\"\n      }, {\n        url: key.entryIdCounter.url ? extractBaseUrl(key.entryIdCounter.url) : \"\"\n      }]);\n      sendAdEvent(this.handleAsync, iterateEntries, createCircularNode, this.setTimeoutWrapper, CustomMap);\n    } catch (value) {\n      try {\n        sendAdEvent(this.handleAsync, iterateEntries, {\n          context: \"ecmserr\",\n          rctx: generatorWrapper,\n          msg: formatErrorMessage(value),\n          url: key && key.entryIdCounter.url\n        }, this.setTimeoutWrapper, CustomMap);\n      } catch (entry) {}\n    }\n    return this.createDeferred;\n  };\n  var formatErrorMessage = function (generatorWrapper) {\n    var value = generatorWrapper.toString();\n    if (generatorWrapper.name && -1 == value.indexOf(generatorWrapper.name)) {\n      value += \": \" + generatorWrapper.name;\n    }\n    if (generatorWrapper.message && -1 == value.indexOf(generatorWrapper.message)) {\n      value += \": \" + generatorWrapper.message;\n    }\n    if (generatorWrapper.stack) {\n      generatorWrapper = generatorWrapper.stack;\n      var CustomMap = value;\n      try {\n        if (-1 == generatorWrapper.indexOf(CustomMap)) {\n          generatorWrapper = CustomMap + \"\\n\" + generatorWrapper;\n        }\n        for (var findEntry; generatorWrapper != findEntry;) {\n          findEntry = generatorWrapper;\n          generatorWrapper = generatorWrapper.replace(RegExp(\"((https?:/..*/)[^/:]*:\\\\d+(?:.|\\n)*)\\\\2\"), \"$1\");\n        }\n        value = generatorWrapper.replace(RegExp(\"\\n *\", \"g\"), \"\\n\");\n      } catch (iterateEntries) {\n        value = CustomMap;\n      }\n    }\n    return value;\n  };\n  var sendImageRequestWithRetry = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    sendImageRequest(generatorWrapper, value, undefined === CustomMap ? null : CustomMap, undefined === findEntry ? false : findEntry, undefined === iterateEntries ? false : iterateEntries);\n  };\n  function sendImageRequest(generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    if (undefined === iterateEntries) {\n      iterateEntries = false;\n    } else {\n      iterateEntries = iterateEntries;\n    }\n    if (!generatorWrapper.google_image_requests) {\n      generatorWrapper.google_image_requests = [];\n    }\n    var createCircularNode = createHtmlElement(\"IMG\", generatorWrapper.document);\n    if (CustomMap || findEntry) {\n      var entryIdCounter = function (key) {\n        if (CustomMap) {\n          CustomMap(key);\n        }\n        if (findEntry) {\n          removeElement(generatorWrapper.google_image_requests, createCircularNode);\n        }\n        removeEventListenerWithNormalization(createCircularNode, \"load\", entryIdCounter);\n        removeEventListenerWithNormalization(createCircularNode, \"error\", entryIdCounter);\n      };\n      addEventListenerWithNormalization(createCircularNode, \"load\", entryIdCounter);\n      addEventListenerWithNormalization(createCircularNode, \"error\", entryIdCounter);\n    }\n    if (iterateEntries) {\n      createCircularNode.attributionSrc = \"\";\n    }\n    createCircularNode.src = value;\n    generatorWrapper.google_image_requests.push(createCircularNode);\n  }\n  var sendBeaconWithParams = function (generatorWrapper, value) {\n    var CustomMap = undefined === CustomMap ? false : CustomMap;\n    var findEntry = \"https://pagead2.googlesyndication.com/pagead/gen_204?id=\" + value;\n    forEachInObject(generatorWrapper, function (iterateEntries, createCircularNode) {\n      if (iterateEntries || iterateEntries === 0) {\n        findEntry += \"&\" + createCircularNode + \"=\" + encodeURIComponent(\"\" + iterateEntries);\n      }\n    });\n    sendBeacon(findEntry, CustomMap);\n  };\n  var sendBeacon = function (generatorWrapper, value) {\n    var CustomMap = window;\n    if (undefined === value) {\n      value = false;\n    } else {\n      value = value;\n    }\n    var findEntry = undefined === findEntry ? false : findEntry;\n    if (CustomMap.fetch) {\n      value = {\n        keepalive: true,\n        credentials: \"include\",\n        redirect: \"follow\",\n        method: \"get\",\n        mode: \"no-cors\"\n      };\n      if (findEntry) {\n        value.mode = \"cors\";\n        if (\"setAttributionReporting\" in XMLHttpRequest.prototype) {\n          value.attributionReporting = {\n            eventSourceEligible: \"true\",\n            triggerEligible: \"false\"\n          };\n        } else {\n          value.headers = {\n            \"Attribution-Reporting-Eligible\": \"event-source\"\n          };\n        }\n      }\n      CustomMap.fetch(generatorWrapper, value);\n    } else {\n      sendImageRequestWithRetry(CustomMap, generatorWrapper, undefined, value, findEntry);\n    }\n  };\n  function serializeDataWithFilter(generatorWrapper, value) {\n    try {\n      var CustomMap = function (findEntry) {\n        var iterateEntries = {};\n        return [(iterateEntries[findEntry.updateElement] = findEntry.TransformEntries, iterateEntries)];\n      };\n      return JSON.stringify([generatorWrapper.filter(function (findEntry) {\n        return findEntry.get1023Shifted;\n      }).map(CustomMap), value.toJSON(), generatorWrapper.filter(function (findEntry) {\n        return !findEntry.get1023Shifted;\n      }).map(CustomMap)]);\n    } catch (findEntry) {\n      logErrorWithBeacon(findEntry, value);\n      return \"\";\n    }\n  }\n  function logErrorWithBeacon(generatorWrapper, value) {\n    try {\n      sendBeaconWithParams({\n        currentEntry: formatErrorMessage(generatorWrapper instanceof Error ? generatorWrapper : Error(String(generatorWrapper))),\n        value: getAdPropertyNumeric(value, 1) || null,\n        getIterator: dispatchUnhandledRejection(value, 2) || null\n      }, \"rcs_internal\");\n    } catch (CustomMap) {}\n  }\n  var MessageBuilder = function (generatorWrapper, value) {\n    var CustomMap = new ErrorLogger();\n    generatorWrapper = updateOrRemoveElement(CustomMap, 1, parseNullableIntEnum(generatorWrapper), 0);\n    value = updateOrRemoveElement(generatorWrapper, 2, optionalString(value), \"\");\n    generatorWrapper = value.getSingletonInstance;\n    CustomMap = getRawBitFlags(generatorWrapper);\n    if (CustomMap & 2) {\n      this.setTimeoutWrapper = value;\n    } else {\n      this.setTimeoutWrapper = createInstanceWithTemporaryData(value.constructor, transformWithFlags(generatorWrapper, CustomMap, true));\n    }\n  };\n  var Message = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(Message, AdElement);\n  var MessagePart = [1, 2, 3];\n  var MessageHeader = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(MessageHeader, AdElement);\n  var MessagePayload = [2, 4];\n  var MessageFooter = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(MessageFooter, AdElement);\n  MessageFooter.findGlobalObject = [4];\n  var MessageSignature = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(MessageSignature, AdElement);\n  var MessageTimestamp = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(MessageTimestamp, AdElement);\n  var setMessageType = function (generatorWrapper, value) {\n    return updateOrRemoveElement(generatorWrapper, 1, parseNullableIntEnum(value), 0);\n  };\n  var setMessageId = function (generatorWrapper, value) {\n    return updateOrRemoveElement(generatorWrapper, 2, parseNullableIntEnum(value), 0);\n  };\n  var MessageBody = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(MessageBody, AdElement);\n  var MessageBodyTypes = [1, 2];\n  var MessageWrapper = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(MessageWrapper, AdElement);\n  var wrapMessage = function (generatorWrapper, value) {\n    return finalizeAdAttributes(generatorWrapper, 1, value);\n  };\n  var setWrapperType = function (generatorWrapper, value) {\n    return Cf(generatorWrapper, 2, value);\n  };\n  var setWrapperSignature = function (generatorWrapper, value) {\n    return transformAndReplaceArray(generatorWrapper, 4, value, parseInt32);\n  };\n  var setWrapperTimestamp = function (generatorWrapper, value) {\n    return Cf(generatorWrapper, 5, value);\n  };\n  var setWrapperId = function (generatorWrapper, value) {\n    return updateOrRemoveElement(generatorWrapper, 6, parseNullableIntEnum(value), 0);\n  };\n  MessageWrapper.findGlobalObject = [2, 4, 5];\n  var WrapperMetadata = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(WrapperMetadata, AdElement);\n  WrapperMetadata.findGlobalObject = [5];\n  var MetadataTypes = [1, 2, 3, 4, 6];\n  var TagSession = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(TagSession, AdElement);\n  TagSession.findGlobalObject = [2, 3];\n  var TagSessionMetadata = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(TagSessionMetadata, AdElement);\n  TagSessionMetadata.findGlobalObject = [2, 8];\n  var SessionTypes = [3, 4, 5];\n  var SessionMetadataTypes = [6, 7];\n  var TagSessionBuilder = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(TagSessionBuilder, AdElement);\n  TagSessionBuilder.prototype.getAdSessionCorrelator = function () {\n    return getAdPropertyFallbackNumeric(this, 2);\n  };\n  var buildTagSession = function (generatorWrapper) {\n    var value = new TagSessionBuilder();\n    return Bf(value, 4, generatorWrapper);\n  };\n  var TagSessionFields = [4, 5, 7, 8, 9];\n  var QueryMetadata = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(QueryMetadata, AdElement);\n  var QueryData = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(QueryData, AdElement);\n  var QueryPayload = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(QueryPayload, AdElement);\n  QueryPayload.prototype.getEscapedQueryIdVariantC = function () {\n    return dispatchUnhandledRejection(this, 4);\n  };\n  QueryPayload.findGlobalObject = [2, 23, 29];\n  var QueryHeader = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(QueryHeader, AdElement);\n  var QueryWrapper = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(QueryWrapper, AdElement);\n  QueryWrapper.prototype.getEscapedQueryIdVariantC = function () {\n    return dispatchUnhandledRejection(this, 2);\n  };\n  QueryWrapper.findGlobalObject = [28, 30];\n  var QueryService = function (generatorWrapper) {\n    this.keysOfObject = new QueryHandler(generatorWrapper);\n  };\n  var QueryHandler = function (generatorWrapper) {\n    this.findKeyInObject = new QueryProcessor(generatorWrapper);\n  };\n  var QueryProcessor = function (generatorWrapper) {\n    this.updateAdProperty = new ProcessQuery(generatorWrapper);\n  };\n  var ProcessQuery = function (generatorWrapper) {\n    this.setFlag34 = function (value) {\n      var CustomMap = value.parseNullableIntEnum;\n      var findEntry = value.updateLengthPrefix;\n      value = value.status;\n      var iterateEntries = new MessageFooter();\n      iterateEntries = updateOrRemoveElement(iterateEntries, 1, optionalString(\"SOomke\"), \"\");\n      var createCircularNode = new Message();\n      findEntry = pf(createCircularNode, 1, MessagePart, optionalString(findEntry));\n      findEntry = addElementToAd(iterateEntries, 4, Message, findEntry);\n      iterateEntries = new Message();\n      value = pf(iterateEntries, 1, MessagePart, optionalString(value));\n      value = addElementToAd(findEntry, 4, Message, value);\n      findEntry = new MessageHeader();\n      CustomMap = pf(findEntry, 2, MessagePayload, convertToInt64(Math.roundRectangle(CustomMap)));\n      CustomMap = finalizeAdAttributes(value, 3, CustomMap);\n      generatorWrapper(CustomMap);\n    };\n  };\n  var QueryMessageBuilder = function () {\n    MessageBuilder.apply(this, arguments);\n    var generatorWrapper = this;\n    this.arrayTransformationInstance = new QueryService(function (value) {\n      return generatorWrapper.resolvePromise(value);\n    });\n  };\n  inheritPrototype(QueryMessageBuilder, MessageBuilder);\n  var QueryMessageProcessor = function () {\n    QueryMessageBuilder.apply(this, arguments);\n  };\n  inheritPrototype(QueryMessageProcessor, QueryMessageBuilder);\n  QueryMessageProcessor.prototype.assertBoolean = function () {\n    this.isDone.apply(this, toArray(sliceArguments.apply(0, arguments).map(function (generatorWrapper) {\n      return {\n        get1023Shifted: true,\n        updateElement: 4,\n        TransformEntries: generatorWrapper.toJSON()\n      };\n    })));\n  };\n  QueryMessageProcessor.prototype.resolvePromise = function () {\n    this.isDone.apply(this, toArray(sliceArguments.apply(0, arguments).map(function (generatorWrapper) {\n      return {\n        get1023Shifted: false,\n        updateElement: 1,\n        TransformEntries: generatorWrapper.toJSON()\n      };\n    })));\n  };\n  var sendHttpRequest = function (generatorWrapper, value) {\n    if (globalThis.fetch) {\n      globalThis.fetch(generatorWrapper, {\n        method: \"POST\",\n        body: value,\n        keepalive: value.length < 65536,\n        credentials: \"omit\",\n        mode: \"no-cors\",\n        redirect: \"follow\"\n      }).catch(function () {});\n    } else {\n      var CustomMap = new XMLHttpRequest();\n      CustomMap.open(\"POST\", generatorWrapper, true);\n      CustomMap.send(value);\n    }\n  };\n  var AdEventLogger = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries, createCircularNode, entryIdCounter, key) {\n    QueryMessageProcessor.call(this, generatorWrapper, value);\n    this.dispatchUnhandledRejection = CustomMap;\n    this.executeCallbacks = findEntry;\n    this.handleThenable = iterateEntries;\n    this.onFulfilled = createCircularNode;\n    this.settlePromise = entryIdCounter;\n    this.createDeferred = key;\n    this.entryIdCounter = [];\n    this.tasks = null;\n    this.handleAsync = false;\n  };\n  inheritPrototype(AdEventLogger, QueryMessageProcessor);\n  var flushAdEvents = function (generatorWrapper) {\n    if (generatorWrapper.tasks !== null) {\n      clearTimeout(generatorWrapper.tasks);\n      generatorWrapper.tasks = null;\n    }\n    if (generatorWrapper.entryIdCounter.length) {\n      var value = serializeDataWithFilter(generatorWrapper.entryIdCounter, generatorWrapper.setTimeoutWrapper);\n      generatorWrapper.executeCallbacks(generatorWrapper.dispatchUnhandledRejection + \"?e=1\", value);\n      generatorWrapper.entryIdCounter = [];\n    }\n  };\n  AdEventLogger.prototype.isDone = function () {\n    var generatorWrapper = sliceArguments.apply(0, arguments);\n    var value = this;\n    try {\n      if (this.settlePromise && serializeDataWithFilter(this.entryIdCounter.concat(generatorWrapper), this.setTimeoutWrapper).length >= 65536) {\n        flushAdEvents(this);\n      }\n      if (this.createDeferred && !this.handleAsync) {\n        this.handleAsync = true;\n        this.createDeferred.entryIdCounter(function () {\n          flushAdEvents(value);\n        });\n      }\n      this.entryIdCounter.push.apply(this.entryIdCounter, toArray(generatorWrapper));\n      if (this.entryIdCounter.length >= this.onFulfilled) {\n        flushAdEvents(this);\n      }\n      if (this.entryIdCounter.length && this.tasks === null) {\n        this.tasks = setTimeout(function () {\n          flushAdEvents(value);\n        }, this.handleThenable);\n      }\n    } catch (CustomMap) {\n      logErrorWithBeacon(CustomMap, this.setTimeoutWrapper);\n    }\n  };\n  var AdEventLoggerWithThrottling = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries, createCircularNode) {\n    AdEventLogger.call(this, generatorWrapper, value, \"https://pagead2.googlesyndication.com/pagead/ping\", sendHttpRequest, undefined === CustomMap ? 1000 : CustomMap, undefined === findEntry ? 100 : findEntry, (undefined === iterateEntries ? false : iterateEntries) && !!globalThis.fetch, createCircularNode);\n  };\n  inheritPrototype(AdEventLoggerWithThrottling, AdEventLogger);\n  var handleThenable = function (generatorWrapper, value, CustomMap, findEntry) {\n    this.top = generatorWrapper;\n    this.right = value;\n    this.bottom = CustomMap;\n    this.left = findEntry;\n  };\n  handleThenable.prototype.getRectangleWidth = function () {\n    return this.right - this.left;\n  };\n  handleThenable.prototype.getRectangleHeight = function () {\n    return this.bottom - this.top;\n  };\n  var createRectangle = function (generatorWrapper) {\n    return new handleThenable(generatorWrapper.top, generatorWrapper.right, generatorWrapper.bottom, generatorWrapper.left);\n  };\n  setTimeoutWrapper = handleThenable.prototype;\n  setTimeoutWrapper.rectangleContains = function (generatorWrapper) {\n    if (this && generatorWrapper) {\n      if (generatorWrapper instanceof handleThenable) {\n        return generatorWrapper.left >= this.left && generatorWrapper.right <= this.right && generatorWrapper.top >= this.top && generatorWrapper.bottom <= this.bottom;\n      } else {\n        return generatorWrapper.inheritPrototype >= this.left && generatorWrapper.inheritPrototype <= this.right && generatorWrapper.globalScope >= this.top && generatorWrapper.globalScope <= this.bottom;\n      }\n    } else {\n      return false;\n    }\n  };\n  setTimeoutWrapper.expandRectangle = function (generatorWrapper, value, CustomMap, findEntry) {\n    if (isObjectOrFunction(generatorWrapper)) {\n      this.top -= generatorWrapper.top;\n      this.right += generatorWrapper.right;\n      this.bottom += generatorWrapper.bottom;\n      this.left -= generatorWrapper.left;\n    } else {\n      this.top -= generatorWrapper;\n      this.right += Number(value);\n      this.bottom += Number(CustomMap);\n      this.left -= Number(findEntry);\n    }\n    return this;\n  };\n  setTimeoutWrapper.ceilRectangle = function () {\n    this.top = Math.ceilRectangle(this.top);\n    this.right = Math.ceilRectangle(this.right);\n    this.bottom = Math.ceilRectangle(this.bottom);\n    this.left = Math.ceilRectangle(this.left);\n    return this;\n  };\n  setTimeoutWrapper.floorRectangle = function () {\n    this.top = Math.floorRectangle(this.top);\n    this.right = Math.floorRectangle(this.right);\n    this.bottom = Math.floorRectangle(this.bottom);\n    this.left = Math.floorRectangle(this.left);\n    return this;\n  };\n  setTimeoutWrapper.roundRectangle = function () {\n    this.top = Math.roundRectangle(this.top);\n    this.right = Math.roundRectangle(this.right);\n    this.bottom = Math.roundRectangle(this.bottom);\n    this.left = Math.roundRectangle(this.left);\n    return this;\n  };\n  var translateRectangle = function (generatorWrapper, value, CustomMap) {\n    if (value instanceof Coordinate) {\n      generatorWrapper.left += value.inheritPrototype;\n      generatorWrapper.right += value.inheritPrototype;\n      generatorWrapper.top += value.globalScope;\n      generatorWrapper.bottom += value.globalScope;\n    } else {\n      generatorWrapper.left += value;\n      generatorWrapper.right += value;\n      if (typeof CustomMap === \"number\") {\n        generatorWrapper.top += CustomMap;\n        generatorWrapper.bottom += CustomMap;\n      }\n    }\n    return generatorWrapper;\n  };\n  handleThenable.prototype.scaleRectangle = function (generatorWrapper, value) {\n    if (typeof value === \"number\") {\n      value = value;\n    } else {\n      value = generatorWrapper;\n    }\n    this.left *= generatorWrapper;\n    this.right *= generatorWrapper;\n    this.top *= value;\n    this.bottom *= value;\n    return this;\n  };\n  var RectangleDimensions = function (generatorWrapper, value, CustomMap, findEntry) {\n    this.left = generatorWrapper;\n    this.top = value;\n    this.width = CustomMap;\n    this.height = findEntry;\n  };\n  var rectangleFromDimensions = function (generatorWrapper) {\n    return new handleThenable(generatorWrapper.top, generatorWrapper.left + generatorWrapper.width, generatorWrapper.top + generatorWrapper.height, generatorWrapper.left);\n  };\n  setTimeoutWrapper = RectangleDimensions.prototype;\n  setTimeoutWrapper.rectangleContains = function (generatorWrapper) {\n    if (generatorWrapper instanceof Coordinate) {\n      return generatorWrapper.inheritPrototype >= this.left && generatorWrapper.inheritPrototype <= this.left + this.width && generatorWrapper.globalScope >= this.top && generatorWrapper.globalScope <= this.top + this.height;\n    } else {\n      return this.left <= generatorWrapper.left && this.left + this.width >= generatorWrapper.left + generatorWrapper.width && this.top <= generatorWrapper.top && this.top + this.height >= generatorWrapper.top + generatorWrapper.height;\n    }\n  };\n  setTimeoutWrapper.getRectangleSize = function () {\n    return new Size(this.width, this.height);\n  };\n  setTimeoutWrapper.ceilRectangle = function () {\n    this.left = Math.ceilRectangle(this.left);\n    this.top = Math.ceilRectangle(this.top);\n    this.width = Math.ceilRectangle(this.width);\n    this.height = Math.ceilRectangle(this.height);\n    return this;\n  };\n  setTimeoutWrapper.floorRectangle = function () {\n    this.left = Math.floorRectangle(this.left);\n    this.top = Math.floorRectangle(this.top);\n    this.width = Math.floorRectangle(this.width);\n    this.height = Math.floorRectangle(this.height);\n    return this;\n  };\n  setTimeoutWrapper.roundRectangle = function () {\n    this.left = Math.roundRectangle(this.left);\n    this.top = Math.roundRectangle(this.top);\n    this.width = Math.roundRectangle(this.width);\n    this.height = Math.roundRectangle(this.height);\n    return this;\n  };\n  setTimeoutWrapper.scaleRectangle = function (generatorWrapper, value) {\n    if (typeof value === \"number\") {\n      value = value;\n    } else {\n      value = generatorWrapper;\n    }\n    this.left *= generatorWrapper;\n    this.width *= generatorWrapper;\n    this.top *= value;\n    this.height *= value;\n    return this;\n  };\n  function getContextData(generatorWrapper) {\n    if (undefined === generatorWrapper) {\n      generatorWrapper = globalScope;\n    } else {\n      generatorWrapper = generatorWrapper;\n    }\n    var value = generatorWrapper.context || generatorWrapper.AMP_CONTEXT_DATA;\n    if (!value) {\n      try {\n        value = generatorWrapper.parent.context || generatorWrapper.parent.AMP_CONTEXT_DATA;\n      } catch (iterateEntries) {}\n    }\n    var CustomMap, findEntry;\n    if (((CustomMap = value) == null ? 0 : CustomMap.pageViewId) && ((findEntry = value) == null ? 0 : findEntry.canonicalUrl)) {\n      return value;\n    } else {\n      return null;\n    }\n  }\n  var PersistentState = function () {\n    this.stream = {};\n  };\n  var generateCorrelator = function () {\n    var generatorWrapper = getContextData(window);\n    if (generatorWrapper) {\n      if (generatorWrapper) {\n        var value = generatorWrapper.pageViewId;\n        generatorWrapper = generatorWrapper.clientId;\n        if (typeof generatorWrapper === \"string\") {\n          value += generatorWrapper.replace(/\\D/g, \"\").substr(0, 6);\n        }\n      } else {\n        value = null;\n      }\n      return +value;\n    }\n    value = getTopAccessibleContext(window);\n    generatorWrapper = value.google_global_correlator;\n    if (!generatorWrapper) {\n      value.google_global_correlator = generatorWrapper = 1 + Math.floorRectangle(Math.random() * Math.pow(2, 43));\n    }\n    return generatorWrapper;\n  };\n  var getCachedValueOrCompute = function (generatorWrapper, value) {\n    var CustomMap = adRegionConfig[7] || \"google_ps_7\";\n    generatorWrapper = generatorWrapper.stream;\n    var findEntry = generatorWrapper[CustomMap];\n    if (undefined === findEntry) {\n      generatorWrapper[CustomMap] = value();\n      return generatorWrapper[CustomMap];\n    } else {\n      return findEntry;\n    }\n  };\n  var getOrGenerateCorrelator = function (generatorWrapper) {\n    var value = generateCorrelator();\n    return getCachedValueOrCompute(generatorWrapper, function () {\n      return value;\n    });\n  };\n  var getMasterOrGlobalCorrelator = function () {\n    if (masterPersistentState) {\n      var generatorWrapper = masterPersistentState;\n    } else {\n      generatorWrapper = ((generatorWrapper = undefined === generatorWrapper ? getContextData() : generatorWrapper) ? isAccessibleFrame(generatorWrapper.master) ? generatorWrapper.master : null : null) || window;\n      var value = generatorWrapper.google_persistent_state_async;\n      if (value != null && typeof value == \"object\" && value.stream != null && typeof value.stream == \"object\") {\n        generatorWrapper = masterPersistentState = value;\n      } else {\n        generatorWrapper = generatorWrapper.google_persistent_state_async = masterPersistentState = new PersistentState();\n      }\n    }\n    return getOrGenerateCorrelator(generatorWrapper);\n  };\n  var masterPersistentState = null;\n  var adFormatRegionMapping = {};\n  var adRegionConfig = (adFormatRegionMapping[8] = \"google_prev_ad_formats_by_region\", adFormatRegionMapping[9] = \"google_prev_ad_slotnames_by_region\", adFormatRegionMapping);\n  var errorReportingUrl = identityFunction([\"https://pagead2.googlesyndication.com/pagead/js/err_rep.js\"]);\n  var ErrorReporter = function () {\n    var generatorWrapper = undefined === generatorWrapper ? \"jserror\" : generatorWrapper;\n    var value = undefined === value ? 0.01 : value;\n    var CustomMap = undefined === CustomMap ? createSafeHtmlFromTemplate(errorReportingUrl) : CustomMap;\n    this.tasks = generatorWrapper;\n    this.setTimeoutWrapper = false;\n    this.entryIdCounter = null;\n    this.createDeferred = false;\n    this.onFulfilled = Math.random();\n    this.handleAsync = value;\n    this.isDone = this.boundFunctionCall;\n    this.settlePromise = CustomMap;\n  };\n  setTimeoutWrapper = ErrorReporter.prototype;\n  setTimeoutWrapper.parseBooleanOrNumber = function (generatorWrapper) {\n    this.tasks = generatorWrapper;\n  };\n  setTimeoutWrapper.createSigned64 = function (generatorWrapper) {\n    this.entryIdCounter = generatorWrapper;\n  };\n  setTimeoutWrapper.numericStringRegex = function (generatorWrapper) {\n    this.setTimeoutWrapper = generatorWrapper;\n  };\n  setTimeoutWrapper.parseIntEnum = function (generatorWrapper) {\n    this.createDeferred = generatorWrapper;\n  };\n  setTimeoutWrapper.boundFunctionCall = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    if (undefined === CustomMap) {\n      CustomMap = this.handleAsync;\n    } else {\n      CustomMap = CustomMap;\n    }\n    if (undefined === iterateEntries) {\n      iterateEntries = this.tasks;\n    } else {\n      iterateEntries = iterateEntries;\n    }\n    if ((this.createDeferred ? this.onFulfilled : Math.random()) > CustomMap) {\n      return this.setTimeoutWrapper;\n    }\n    if (!isValidError(value)) {\n      value = new ErrorDetails(value, {\n        context: generatorWrapper,\n        writeBytes: iterateEntries\n      });\n    }\n    if (findEntry || this.entryIdCounter) {\n      value.meta = {};\n      if (this.entryIdCounter) {\n        this.entryIdCounter(value.meta);\n      }\n      if (findEntry) {\n        findEntry(value.meta);\n      }\n    }\n    globalScope.google_js_errors = globalScope.google_js_errors || [];\n    globalScope.google_js_errors.push(value);\n    if (!globalScope.error_rep_loaded) {\n      value = globalScope.document;\n      generatorWrapper = createHtmlElement(\"SCRIPT\", value);\n      setElementSrcFromTrustedUrl(generatorWrapper, this.settlePromise);\n      if ((value = value.getElementsByTagName(\"script\")[0]) && value.parentNode) {\n        value.parentNode.insertBefore(generatorWrapper, value);\n      }\n      globalScope.error_rep_loaded = true;\n    }\n    return this.setTimeoutWrapper;\n  };\n  setTimeoutWrapper.hasBrands = function (generatorWrapper, value, CustomMap) {\n    try {\n      return value();\n    } catch (findEntry) {\n      if (!this.isDone(generatorWrapper, findEntry, this.handleAsync, CustomMap, this.tasks)) {\n        throw findEntry;\n      }\n    }\n  };\n  setTimeoutWrapper.IteratorWithTransform = function (generatorWrapper, value, CustomMap, findEntry) {\n    var iterateEntries = this;\n    return function () {\n      var createCircularNode = sliceArguments.apply(0, arguments);\n      return iterateEntries.hasBrands(generatorWrapper, function () {\n        return value.apply(CustomMap, createCircularNode);\n      }, findEntry);\n    };\n  };\n  var getVisibilityStateCode = function (generatorWrapper) {\n    if (generatorWrapper.prerendering) {\n      return 3;\n    } else {\n      return {\n        visible: 1,\n        hidden: 2,\n        prerender: 3,\n        preview: 4,\n        unloaded: 5\n      }[generatorWrapper.visibilityState || generatorWrapper.webkitVisibilityState || generatorWrapper.mozVisibilityState || \"\"] || 0;\n    }\n  };\n  var getVisibilityChangeEventName = function (generatorWrapper) {\n    var value;\n    if (generatorWrapper.visibilityState) {\n      value = \"visibilitychange\";\n    } else if (generatorWrapper.mozVisibilityState) {\n      value = \"mozvisibilitychange\";\n    } else if (generatorWrapper.webkitVisibilityState) {\n      value = \"webkitvisibilitychange\";\n    }\n    return value;\n  };\n  var getRumEventQueue = function (generatorWrapper) {\n    generatorWrapper = generatorWrapper._google_rum_ns_ = generatorWrapper._google_rum_ns_ || {};\n    return generatorWrapper.updateMetrics = generatorWrapper.updateMetrics || [];\n  };\n  function sanitizeInput(generatorWrapper) {\n    if (generatorWrapper === null) {\n      generatorWrapper = \"null\";\n    } else if (undefined === generatorWrapper) {\n      generatorWrapper = \"undefined\";\n    } else {\n      generatorWrapper = generatorWrapper;\n    }\n    var value = getTrustedTypesPolicy();\n    if (value) {\n      generatorWrapper = value.createHTML(generatorWrapper);\n    } else {\n      generatorWrapper = generatorWrapper;\n    }\n    return new SafeHtml(generatorWrapper, safeStyleMarker);\n  }\n  function appendToUrl(generatorWrapper, value, CustomMap) {\n    forEachInObject(value, function (findEntry, iterateEntries) {\n      var createCircularNode = CustomMap && CustomMap[iterateEntries];\n      if (!(!findEntry && findEntry !== 0 || createCircularNode)) {\n        generatorWrapper += \"&\" + encodeURIComponent(iterateEntries) + \"=\" + encodeURIComponent(String(findEntry));\n        if (CustomMap) {\n          CustomMap[iterateEntries] = true;\n        }\n      }\n    });\n    return generatorWrapper;\n  }\n  var PerformanceLogger = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries, createCircularNode, entryIdCounter, key) {\n    if (undefined === createCircularNode) {\n      createCircularNode = Infinity;\n    } else {\n      createCircularNode = createCircularNode;\n    }\n    if (undefined === entryIdCounter) {\n      entryIdCounter = false;\n    } else {\n      entryIdCounter = entryIdCounter;\n    }\n    PerformanceMonitor.call(this, generatorWrapper, key);\n    var value = this;\n    this.totalAdBufferingTime = value;\n    this.domain = CustomMap;\n    this.path = findEntry;\n    this.createIterator = iterateEntries;\n    this.settlePromise = 0;\n    this.handleAsync = {};\n    this.handleThenable = {};\n    this.year = [];\n    this.report = {};\n    this.tasks = 0;\n    this.dispatchUnhandledRejection = [];\n    this.resolvePromise = createCircularNode;\n    generatorWrapper = this.entryIdCounter.navigator;\n    this.updateMaxSize = !(this.domain !== \"csi.gstatic.com\" || !generatorWrapper || !generatorWrapper.sendBeacon);\n    if (!(this.entryIdCounter.performance && this.entryIdCounter.performance.now)) {\n      setPerformanceMetric(this, \"dat\", 1);\n    }\n    if (generatorWrapper && generatorWrapper.deviceMemory) {\n      setPerformanceMetric(this, \"dmc\", generatorWrapper.deviceMemory);\n    }\n    if (this.entryIdCounter === this.entryIdCounter.top) {\n      setPerformanceMetric(this, \"top\", 1);\n    }\n    this.tryCall = !entryIdCounter;\n    this.logError = function () {\n      value.entryIdCounter.setTimeout(function () {\n        flushData(value);\n      }, 1100);\n    };\n    this.handleThenable = function () {\n      setPerformanceMetric(value, \"uet\", 2);\n      for (var currentEntry = getIterator(value.year), foundEntry = currentEntry.next(); !foundEntry.done; foundEntry = currentEntry.next()) {\n        foundEntry = foundEntry.value;\n        try {\n          foundEntry();\n        } catch (rejectFunction) {}\n      }\n      currentEntry = value.entryIdCounter;\n      var resolveFunction = undefined === resolveFunction ? {} : resolveFunction;\n      if (typeof window.CustomEvent === \"function\") {\n        foundEntry = new CustomEvent(\"rum_blp\", resolveFunction);\n      } else {\n        foundEntry = document.createEvent(\"CustomEvent\");\n        foundEntry.initCustomEvent(\"rum_blp\", !!resolveFunction.bubbles, !!resolveFunction.cancelable, resolveFunction.detail);\n      }\n      currentEntry.dispatchEvent(foundEntry);\n      flushData(value);\n      if (value.handleAsync.uet != null) {\n        value.createDeferred -= 3 + value.handleAsync.uet.length + 2;\n        delete value.handleAsync.uet;\n      }\n    };\n    this.definePropertyPolyfill = debounceFunction(function () {\n      flushData(value);\n    });\n    this.firstQuartileTime = function () {\n      var currentEntry = value.entryIdCounter.document;\n      if (currentEntry.hidden != null ? currentEntry.hidden : currentEntry.mozHidden != null ? currentEntry.mozHidden : currentEntry.webkitHidden != null && currentEntry.webkitHidden) {\n        value.definePropertyPolyfill();\n      }\n    };\n    this.executeCallbacks = this.entryIdCounter.setTimeout(function () {\n      flushData(value);\n    }, 5000);\n    this.createDeferred = value.length + CustomMap.length + findEntry.length + iterateEntries.length + 3;\n    forEachElement(this.events, function (currentEntry) {\n      processEvent(value, currentEntry);\n    });\n    value = getRumEventQueue(this.entryIdCounter);\n    var entry = function () {\n      var currentEntry = sliceArguments.apply(0, arguments)[0];\n      var foundEntry = currentEntry[0];\n      currentEntry = currentEntry[1];\n      var resolveFunction = foundEntry.length + currentEntry.length + 2;\n      if (value.createDeferred + value.tasks + resolveFunction > 8000) {\n        flushData(value);\n      }\n      value.dispatchUnhandledRejection.push([foundEntry, currentEntry]);\n      value.tasks += resolveFunction;\n      checkAndFlushIfNeeded(value);\n      return 0;\n    };\n    forEachElement(value, function (currentEntry) {\n      return entry(currentEntry);\n    });\n    value.length = 0;\n    value.push = entry;\n    setPerformanceMetric(this, \"puid\", (this.settlePromise + 1).toString(36) + \"~\" + Date.now().toString(36));\n    initPerformanceLogger(this);\n  };\n  inheritPrototype(PerformanceLogger, PerformanceMonitor);\n  var initPerformanceLogger = function (generatorWrapper) {\n    if (generatorWrapper.entryIdCounter.document.readyState === \"complete\") {\n      generatorWrapper.entryIdCounter.setTimeout(function () {\n        flushData(generatorWrapper);\n      }, 0);\n    } else {\n      addEventListenerWithNormalization(generatorWrapper.entryIdCounter, \"load\", generatorWrapper.logError);\n    }\n    var value = getVisibilityChangeEventName(generatorWrapper.entryIdCounter.document);\n    if (typeof value !== \"undefined\") {\n      addEventListenerWithNormalization(generatorWrapper.entryIdCounter, value, generatorWrapper.firstQuartileTime);\n    }\n    addEventListenerWithNormalization(generatorWrapper.entryIdCounter, \"pagehide\", generatorWrapper.handleThenable);\n  };\n  var setPerformanceMetric = function (generatorWrapper, value, CustomMap) {\n    CustomMap = String(CustomMap);\n    if (generatorWrapper.handleAsync[value] != null) {\n      generatorWrapper.createDeferred = generatorWrapper.createDeferred + (CustomMap.length - generatorWrapper.handleAsync[value].length);\n    } else {\n      generatorWrapper.createDeferred = generatorWrapper.createDeferred + (value.length + CustomMap.length + 2);\n    }\n    generatorWrapper.handleAsync[value] = CustomMap;\n  };\n  var logEventWithDimension = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    if (undefined === iterateEntries) {\n      iterateEntries = \"\";\n    } else {\n      iterateEntries = iterateEntries;\n    }\n    var createCircularNode = calculateEventDimensionLength(generatorWrapper, value, CustomMap, findEntry, iterateEntries);\n    if (generatorWrapper.createDeferred + generatorWrapper.tasks + createCircularNode > 8000) {\n      flushData(generatorWrapper);\n      createCircularNode = value.length + CustomMap.length + 2;\n    }\n    recordEvent(generatorWrapper, value, CustomMap, findEntry, iterateEntries);\n    generatorWrapper.tasks += createCircularNode;\n    checkAndFlushIfNeeded(generatorWrapper);\n  };\n  var calculateEventDimensionLength = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    if (generatorWrapper.report[value] == null) {\n      return value.length + CustomMap.length + 2;\n    } else {\n      if (findEntry) {\n        return CustomMap.length + (undefined === iterateEntries ? \"\" : iterateEntries).length;\n      } else {\n        return CustomMap.length - generatorWrapper.report[value].length;\n      }\n    }\n  };\n  var recordEvent = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    if (findEntry && generatorWrapper.report[value] != null) {\n      generatorWrapper.report[value] = generatorWrapper.report[value] + (\"\" + (undefined === iterateEntries ? \"\" : iterateEntries) + CustomMap);\n    } else {\n      generatorWrapper.report[value] = CustomMap;\n    }\n  };\n  var checkAndFlushIfNeeded = function (generatorWrapper) {\n    if (generatorWrapper.createDeferred + generatorWrapper.tasks >= 6000) {\n      flushData(generatorWrapper);\n    }\n  };\n  var flushData = function (generatorWrapper) {\n    if (generatorWrapper.setTimeoutWrapper && generatorWrapper.tryCall) {\n      try {\n        if (generatorWrapper.tasks) {\n          generatorWrapper.sendBeacon(generatorWrapper.report);\n          if (generatorWrapper.settlePromise === generatorWrapper.resolvePromise) {\n            generatorWrapper.isDone();\n          }\n        }\n      } catch (value) {\n        new ErrorReporter().boundFunctionCall(358, value);\n      }\n      generatorWrapper.report = {};\n      generatorWrapper.tasks = 0;\n      generatorWrapper.events.length = 0;\n      generatorWrapper.entryIdCounter.clearTimeout(generatorWrapper.executeCallbacks);\n      generatorWrapper.executeCallbacks = 0;\n    }\n  };\n  var generateBeaconUrl = function (generatorWrapper, value) {\n    var CustomMap = generatorWrapper.totalAdBufferingTime + \"//\" + generatorWrapper.domain + generatorWrapper.path + generatorWrapper.createIterator;\n    var findEntry = {};\n    CustomMap = appendToUrl(CustomMap, generatorWrapper.handleAsync, findEntry);\n    CustomMap = appendToUrl(CustomMap, value, findEntry);\n    value = generatorWrapper.entryIdCounter;\n    if (value.google_timing_params) {\n      CustomMap = appendToUrl(CustomMap, value.google_timing_params, findEntry);\n      value.google_timing_params = undefined;\n    }\n    forEachElement(generatorWrapper.dispatchUnhandledRejection, function (iterateEntries) {\n      var createCircularNode = getIterator(iterateEntries);\n      iterateEntries = createCircularNode.next().value;\n      createCircularNode = createCircularNode.next().value;\n      var entryIdCounter = {};\n      CustomMap = appendToUrl(CustomMap, (entryIdCounter[iterateEntries] = createCircularNode, entryIdCounter));\n    });\n    generatorWrapper.dispatchUnhandledRejection.length = 0;\n    return CustomMap;\n  };\n  PerformanceLogger.prototype.sendBeacon = function (generatorWrapper) {\n    this.settlePromise++;\n    generatorWrapper = generateBeaconUrl(this, generatorWrapper);\n    var value = false;\n    try {\n      value = !!(this.updateMaxSize && this.entryIdCounter.navigator && this.entryIdCounter.navigator.sendBeacon(generatorWrapper, null));\n    } catch (CustomMap) {\n      this.updateMaxSize = false;\n    }\n    if (!value) {\n      sendImageRequestWithRetry(this.entryIdCounter, generatorWrapper);\n    }\n    setPerformanceMetric(this, \"puid\", (this.settlePromise + 1).toString(36) + \"~\" + Date.now().toString(36));\n  };\n  var processEvent = function (generatorWrapper, value) {\n    var CustomMap = \"met.\" + value.type;\n    var findEntry = typeof value.value === \"number\" ? Math.roundRectangle(value.value).toString(36) : value.value;\n    var iterateEntries = Math.roundRectangle(value.duration);\n    value = \"\" + value.label + (value.slotId != null ? \"_\" + value.slotId : \"\") + (\".\" + findEntry) + (iterateEntries > 0 ? \"_\" + iterateEntries.toString(36) : \"\") + (value.taskId != null ? \"__\" + Math.roundRectangle(value.taskId).toString(36) : \"\");\n    logEventWithDimension(generatorWrapper, CustomMap, value, true, \"~\");\n  };\n  PerformanceLogger.prototype.onFulfilled = function (generatorWrapper) {\n    if (this.setTimeoutWrapper && this.settlePromise < this.resolvePromise) {\n      PerformanceMonitor.prototype.onFulfilled.call(this, generatorWrapper);\n      processEvent(this, generatorWrapper);\n    }\n  };\n  PerformanceLogger.prototype.isDone = function () {\n    PerformanceMonitor.prototype.isDone.call(this);\n    this.entryIdCounter.clearTimeout(this.executeCallbacks);\n    this.tasks = this.executeCallbacks = 0;\n    this.report = {};\n    clearObject(this.handleThenable);\n    clearObject(this.handleAsync);\n    removeEventListenerWithNormalization(this.entryIdCounter, \"load\", this.logError);\n    removeEventListenerWithNormalization(this.entryIdCounter, \"pagehide\", this.handleThenable);\n  };\n  var getSingletonInstance = function (generatorWrapper) {\n    var value = \"vb\";\n    if (generatorWrapper.userAgentData && generatorWrapper.hasOwnProperty(value)) {\n      return generatorWrapper.userAgentData;\n    }\n    value = new generatorWrapper();\n    return generatorWrapper.userAgentData = value;\n  };\n  var resolvePromise = function () {\n    this.entryIdCounter = new PerformanceLogger(1, \"https:\", \"csi.gstatic.com\", \"/csi?v=2&s=\", \"ima\", undefined, true);\n    var generatorWrapper = getMasterOrGlobalCorrelator();\n    if (generatorWrapper != null) {\n      setPerformanceMetric(this.entryIdCounter, \"c\", generatorWrapper);\n    }\n    generatorWrapper = parseInt(this.entryIdCounter.handleAsync.CustomMap, 10) / 2;\n    if (generatorWrapper != null) {\n      setPerformanceMetric(this.entryIdCounter, \"slotId\", generatorWrapper);\n    }\n  };\n  var settlePromise = function (generatorWrapper, value, CustomMap) {\n    if (CustomMap != null) {\n      generatorWrapper = generatorWrapper.entryIdCounter;\n      var findEntry = value + \"=\" + CustomMap;\n      if (!generatorWrapper.handleThenable[findEntry]) {\n        logEventWithDimension(generatorWrapper, value, CustomMap, false);\n        if (findEntry.length < 1000) {\n          generatorWrapper.handleThenable[findEntry] = true;\n        }\n      }\n    }\n  };\n  var addMultipleKeyValues = function (generatorWrapper, value) {\n    for (var CustomMap in value) if (typeof value[CustomMap] === \"object\") {\n      value[CustomMap] = encodeURIComponent(JSON.str"