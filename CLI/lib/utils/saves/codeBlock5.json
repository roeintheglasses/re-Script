"rateEntries = generatorWrapper.getSingletonInstance;\n    var createCircularNode = getRawBitFlags(iterateEntries);\n    throwIfFlag2(createCircularNode);\n    if ((CustomMap = of(iterateEntries, createCircularNode, CustomMap)) && CustomMap !== value && findEntry != null) {\n      createCircularNode = updateElementAtIndex(iterateEntries, createCircularNode, CustomMap);\n    }\n    updateElementAtIndex(iterateEntries, createCircularNode, value, findEntry);\n    return generatorWrapper;\n  };\n  var qf = function (generatorWrapper, value, CustomMap) {\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    if (of(generatorWrapper, getRawBitFlags(generatorWrapper), value) === CustomMap) {\n      return CustomMap;\n    } else {\n      return -1;\n    }\n  };\n  var rf = function (generatorWrapper, value) {\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    return of(generatorWrapper, getRawBitFlags(generatorWrapper), value);\n  };\n  function of(generatorWrapper, value, CustomMap) {\n    for (var findEntry = 0, iterateEntries = 0; iterateEntries < CustomMap.length; iterateEntries++) {\n      var createCircularNode = CustomMap[iterateEntries];\n      if (getElementAtIndex(generatorWrapper, value, createCircularNode) != null) {\n        if (findEntry !== 0) {\n          value = updateElementAtIndex(generatorWrapper, value, findEntry);\n        }\n        findEntry = createCircularNode;\n      }\n    }\n    return findEntry;\n  }\n  var tf = function (generatorWrapper) {\n    var value = StorageField;\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    var CustomMap = getRawBitFlags(generatorWrapper);\n    throwIfFlag2(CustomMap);\n    var findEntry = getElementAtIndex(generatorWrapper, CustomMap, 4);\n    value = cloneIfNotFrozen(createObjectOrUndefined(findEntry, value, true, CustomMap));\n    if (findEntry !== value) {\n      updateElementAtIndex(generatorWrapper, CustomMap, 4, value);\n    }\n    return value;\n  };\n  function uf(generatorWrapper, value, CustomMap, findEntry) {\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    var iterateEntries = getRawBitFlags(generatorWrapper);\n    var createCircularNode = getElementAtIndex(generatorWrapper, iterateEntries, CustomMap, findEntry);\n    value = createObjectOrUndefined(createCircularNode, value, false, iterateEntries);\n    if (value !== createCircularNode && value != null) {\n      updateElementAtIndex(generatorWrapper, iterateEntries, CustomMap, value, findEntry);\n    }\n    return value;\n  }\n  var vf = function (generatorWrapper, value, CustomMap) {\n    if (generatorWrapper = uf(generatorWrapper, value, CustomMap, false)) {\n      return generatorWrapper;\n    } else {\n      return getSingletonInstance(value);\n    }\n  };\n  var fetchData = function (generatorWrapper, value, CustomMap) {\n    var findEntry = undefined === findEntry ? false : findEntry;\n    value = uf(generatorWrapper, value, CustomMap, findEntry);\n    if (value == null) {\n      return value;\n    }\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    var iterateEntries = getRawBitFlags(generatorWrapper);\n    if (!(iterateEntries & 2)) {\n      var createCircularNode = cloneIfNotFrozen(value);\n      if (createCircularNode !== value) {\n        value = createCircularNode;\n        updateElementAtIndex(generatorWrapper, iterateEntries, CustomMap, value, findEntry);\n      }\n    }\n    return value;\n  };\n  function xf(generatorWrapper, value, CustomMap, findEntry, iterateEntries, createCircularNode) {\n    var entryIdCounter = !!(2 & value);\n    var key = entryIdCounter ? 1 : 2;\n    iterateEntries = !!iterateEntries;\n    if (createCircularNode) {\n      createCircularNode = !entryIdCounter;\n    }\n    entryIdCounter = getArrayOrEmpty(generatorWrapper, value, findEntry);\n    var value = getBitFlags(entryIdCounter);\n    var entry = !!(4 & value);\n    if (!entry) {\n      value = updateFlags(value, value);\n      var currentEntry = entryIdCounter;\n      var foundEntry = value;\n      var resolveFunction = !!(2 & value);\n      if (resolveFunction) {\n        foundEntry = toggleBitFlag(foundEntry, 2, true);\n      }\n      for (var rejectFunction = !resolveFunction, user = true, profileData = 0, isDone = 0; profileData < currentEntry.length; profileData++) {\n        var stream = createObjectOrUndefined(currentEntry[profileData], CustomMap, false, foundEntry);\n        if (stream instanceof CustomMap) {\n          if (!resolveFunction) {\n            var keyArray = !!(getBitFlags(stream.getSingletonInstance) & 2);\n            if (rejectFunction) {\n              rejectFunction = !keyArray;\n            }\n            if (user) {\n              user = keyArray;\n            }\n          }\n          currentEntry[isDone++] = stream;\n        }\n      }\n      if (isDone < profileData) {\n        currentEntry.length = isDone;\n      }\n      value = toggleBitFlag(value, 4, true);\n      value = toggleBitFlag(value, 16, user);\n      value = toggleBitFlag(value, 8, rejectFunction);\n      setRawBitFlags(currentEntry, value);\n      if (resolveFunction) {\n        Object.freeze(currentEntry);\n      }\n    }\n    if (createCircularNode && !(8 & value || !entryIdCounter.length && (key === 1 || key === 4 && 32 & value))) {\n      if (checkIfFrozen(value)) {\n        entryIdCounter = toArray(entryIdCounter);\n        value = updateFlagsForFrozenObjects(value, value);\n        value = updateElementAtIndex(generatorWrapper, value, findEntry, entryIdCounter);\n      }\n      CustomMap = entryIdCounter;\n      createCircularNode = value;\n      for (currentEntry = 0; currentEntry < CustomMap.length; currentEntry++) {\n        value = CustomMap[currentEntry];\n        foundEntry = cloneIfNotFrozen(value);\n        if (value !== foundEntry) {\n          CustomMap[currentEntry] = foundEntry;\n        }\n      }\n      createCircularNode = toggleBitFlag(createCircularNode, 8, true);\n      createCircularNode = toggleBitFlag(createCircularNode, 16, !CustomMap.length);\n      setRawBitFlags(CustomMap, createCircularNode);\n      value = createCircularNode;\n    }\n    if (!checkIfFrozen(value)) {\n      CustomMap = value;\n      if (createCircularNode = key === 1 || key === 4 && !!(32 & value)) {\n        value = toggleBitFlag(value, !entryIdCounter.length || 16 & value && (!entry || 32 & value) ? 2 : 2048, true);\n      } else {\n        value = finalizeFlagsUpdate(value, value, iterateEntries);\n      }\n      if (value !== CustomMap) {\n        setRawBitFlags(entryIdCounter, value);\n      }\n      if (createCircularNode) {\n        Object.freeze(entryIdCounter);\n      }\n    }\n    if (key === 2 && checkIfFrozen(value)) {\n      entryIdCounter = toArray(entryIdCounter);\n      value = updateFlagsForFrozenObjects(value, value);\n      value = finalizeFlagsUpdate(value, value, iterateEntries);\n      setRawBitFlags(entryIdCounter, value);\n      updateElementAtIndex(generatorWrapper, value, findEntry, entryIdCounter);\n    }\n    return entryIdCounter;\n  }\n  var parseData = function (generatorWrapper, value, CustomMap) {\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    var findEntry = getRawBitFlags(generatorWrapper);\n    return xf(generatorWrapper, findEntry, value, CustomMap, false, !(2 & findEntry));\n  };\n  var finalizeAdAttributes = function (generatorWrapper, value, CustomMap) {\n    if (CustomMap == null) {\n      CustomMap = undefined;\n    }\n    return updateElement(generatorWrapper, value, CustomMap);\n  };\n  var Bf = function (generatorWrapper, value, CustomMap) {\n    var findEntry = TagSessionFields;\n    if (CustomMap == null) {\n      CustomMap = undefined;\n    }\n    return pf(generatorWrapper, value, findEntry, CustomMap);\n  };\n  var Cf = function (generatorWrapper, value, CustomMap) {\n    var findEntry = generatorWrapper.getSingletonInstance;\n    var iterateEntries = getRawBitFlags(findEntry);\n    throwIfFlag2(iterateEntries);\n    if (CustomMap == null) {\n      updateElementAtIndex(findEntry, iterateEntries, value);\n      return generatorWrapper;\n    }\n    for (var createCircularNode = getBitFlags(CustomMap), entryIdCounter = createCircularNode, key = !!(2 & createCircularNode) || !!(2048 & createCircularNode), value = key || Object.isFrozen(CustomMap), entry = true, currentEntry = true, foundEntry = 0; foundEntry < CustomMap.length; foundEntry++) {\n      var resolveFunction = CustomMap[foundEntry];\n      if (!key) {\n        resolveFunction = !!(getBitFlags(resolveFunction.getSingletonInstance) & 2);\n        if (entry) {\n          entry = !resolveFunction;\n        }\n        if (currentEntry) {\n          currentEntry = resolveFunction;\n        }\n      }\n    }\n    if (!key) {\n      createCircularNode = toggleBitFlag(createCircularNode, 5, true);\n      createCircularNode = toggleBitFlag(createCircularNode, 8, entry);\n      createCircularNode = toggleBitFlag(createCircularNode, 16, currentEntry);\n    }\n    if (value && createCircularNode !== entryIdCounter) {\n      CustomMap = toArray(CustomMap);\n      entryIdCounter = 0;\n      createCircularNode = updateFlagsForFrozenObjects(createCircularNode, iterateEntries);\n      createCircularNode = finalizeFlagsUpdate(createCircularNode, iterateEntries, true);\n    }\n    if (createCircularNode !== entryIdCounter) {\n      setRawBitFlags(CustomMap, createCircularNode);\n    }\n    updateElementAtIndex(findEntry, iterateEntries, value, CustomMap);\n    return generatorWrapper;\n  };\n  function updateFlagsForFrozenObjects(generatorWrapper, value) {\n    generatorWrapper = toggleBitFlag(generatorWrapper, 2, !!(2 & value));\n    generatorWrapper = toggleBitFlag(generatorWrapper, 32, true);\n    return generatorWrapper = toggleBitFlag(generatorWrapper, 2048, false);\n  }\n  function finalizeFlagsUpdate(generatorWrapper, value, CustomMap) {\n    if (!(32 & value && CustomMap)) {\n      generatorWrapper = toggleBitFlag(generatorWrapper, 32, false);\n    }\n    return generatorWrapper;\n  }\n  function createAdElement(generatorWrapper, value, CustomMap, findEntry) {\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    var iterateEntries = getRawBitFlags(generatorWrapper);\n    throwIfFlag2(iterateEntries);\n    value = xf(generatorWrapper, iterateEntries, CustomMap, value, true);\n    if (findEntry != null) {\n      CustomMap = findEntry;\n    } else {\n      CustomMap = new CustomMap();\n    }\n    value.push(CustomMap);\n    if (getBitFlags(CustomMap.getSingletonInstance) & 2) {\n      clearBitFlag(value, 8);\n    } else {\n      clearBitFlag(value, 16);\n    }\n    return CustomMap;\n  }\n  var addElementToAd = function (generatorWrapper, value, CustomMap, findEntry) {\n    createAdElement(generatorWrapper, value, CustomMap, findEntry);\n    return generatorWrapper;\n  };\n  var getAdProperty = function (generatorWrapper, value) {\n    generatorWrapper = getTransformedElement(generatorWrapper, value);\n    var CustomMap;\n    if (generatorWrapper == null) {\n      CustomMap = generatorWrapper;\n    } else if (isNumericString(generatorWrapper)) {\n      if (typeof generatorWrapper === \"number\") {\n        CustomMap = convertSafeInteger(generatorWrapper);\n      } else {\n        CustomMap = convertStringToInt64(generatorWrapper);\n      }\n    } else {\n      CustomMap = undefined;\n    }\n    return CustomMap;\n  };\n  var getAdPropertyValue = function (generatorWrapper, value) {\n    return stringOrNull(getTransformedElement(generatorWrapper, value));\n  };\n  function returnNonNull(generatorWrapper, value) {\n    if (generatorWrapper != null) {\n      return generatorWrapper;\n    } else {\n      return value;\n    }\n  }\n  var getBooleanAdProperty = function (generatorWrapper, value) {\n    var CustomMap = undefined === CustomMap ? false : CustomMap;\n    return returnNonNull(parseBooleanOrNumber(getTransformedElement(generatorWrapper, value)), CustomMap);\n  };\n  var getNumericAdProperty = function (generatorWrapper, value) {\n    var CustomMap = undefined === CustomMap ? 0 : CustomMap;\n    return returnNonNull(parseNullableInt32(getTransformedElement(generatorWrapper, value)), CustomMap);\n  };\n  var getAdPropertyNumericValue = function (generatorWrapper, value) {\n    var CustomMap = undefined === CustomMap ? 0 : CustomMap;\n    return returnNonNull(parseNullableUInt32(getTransformedElement(generatorWrapper, value)), CustomMap);\n  };\n  var getAdPropertyFallbackNumeric = function (generatorWrapper, value) {\n    var CustomMap = undefined === CustomMap ? 0 : CustomMap;\n    return returnNonNull(getAdProperty(generatorWrapper, value), CustomMap);\n  };\n  var getAdElementProperty = function (generatorWrapper, value) {\n    var CustomMap = undefined === CustomMap ? 0 : CustomMap;\n    generatorWrapper = generatorWrapper.getSingletonInstance;\n    var findEntry = getRawBitFlags(generatorWrapper);\n    var iterateEntries = getElementAtIndex(generatorWrapper, findEntry, value);\n    var createCircularNode = parseNumericValue(iterateEntries);\n    if (createCircularNode != null && createCircularNode !== iterateEntries) {\n      updateElementAtIndex(generatorWrapper, findEntry, value, createCircularNode);\n    }\n    return returnNonNull(createCircularNode, CustomMap);\n  };\n  var dispatchUnhandledRejection = function (generatorWrapper, value) {\n    var CustomMap = undefined === CustomMap ? \"\" : CustomMap;\n    return returnNonNull(getAdPropertyValue(generatorWrapper, value), CustomMap);\n  };\n  var getAdPropertyNumeric = function (generatorWrapper, value) {\n    var CustomMap = 0;\n    if (undefined === CustomMap) {\n      CustomMap = 0;\n    } else {\n      CustomMap = CustomMap;\n    }\n    return returnNonNull(parseNullableInt(getTransformedElement(generatorWrapper, value)), CustomMap);\n  };\n  var getAdPropertyStringFallback = function (generatorWrapper, value) {\n    var CustomMap = undefined === CustomMap ? \"0\" : CustomMap;\n    generatorWrapper = getTransformedElement(generatorWrapper, value);\n    value = true;\n    if (undefined === value) {\n      value = false;\n    } else {\n      value = value;\n    }\n    if (generatorWrapper == null) {\n      generatorWrapper = generatorWrapper;\n    } else if (isNumericString(generatorWrapper)) {\n      if (typeof generatorWrapper === \"string\") {\n        generatorWrapper = convertStringToInt64(generatorWrapper);\n      } else if (value) {\n        generatorWrapper = convertNumberToString(generatorWrapper);\n      } else {\n        generatorWrapper = convertSafeInteger(generatorWrapper);\n      }\n    } else {\n      generatorWrapper = undefined;\n    }\n    return returnNonNull(generatorWrapper, CustomMap);\n  };\n  var getNestedAdPropertyNumeric = function (generatorWrapper, value, CustomMap) {\n    return getAdPropertyNumeric(generatorWrapper, qf(generatorWrapper, CustomMap, value));\n  };\n  var setAdProperty = function (generatorWrapper, value, CustomMap) {\n    return updateElement(generatorWrapper, value, parseNullableBoolean(CustomMap));\n  };\n  var updateAdProperty = function (generatorWrapper, value, CustomMap) {\n    return updateElement(generatorWrapper, value, CustomMap == null ? CustomMap : parseInt32(CustomMap));\n  };\n  var modifyAdProperty = function (generatorWrapper, value, CustomMap) {\n    return updateOrRemoveElement(generatorWrapper, value, CustomMap == null ? CustomMap : parseInt32(CustomMap), 0);\n  };\n  var setAdPropertyFromString = function (generatorWrapper, value, CustomMap) {\n    return updateOrRemoveElement(generatorWrapper, value, convertToInt64(CustomMap), \"0\");\n  };\n  var setAdPropertyFromObject = function (generatorWrapper, value, CustomMap) {\n    return updateElement(generatorWrapper, value, optionalString(CustomMap));\n  };\n  var clearAdProperty = function (generatorWrapper, value, CustomMap) {\n    return updateElement(generatorWrapper, value, parseNullableIntEnum(CustomMap));\n  };\n  var AdElement = function (generatorWrapper, value, CustomMap) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper, value, CustomMap);\n  };\n  AdElement.prototype.toJSON = function () {\n    if (undefinedVariable1) {\n      return sanitizeAdElementData(this, this.getSingletonInstance, false);\n    } else {\n      return sanitizeAdElementData(this, processElements(this.getSingletonInstance, transformElementContent, undefined, undefined, false), true);\n    }\n  };\n  var serializeData = function (generatorWrapper) {\n    undefinedVariable1 = true;\n    try {\n      return JSON.stringify(generatorWrapper.toJSON(), transformKeyOrValue);\n    } finally {\n      undefinedVariable1 = false;\n    }\n  };\n  AdElement.prototype.emptyObject2 = emptyObject1;\n  AdElement.prototype.toString = function () {\n    return sanitizeAdElementData(this, this.getSingletonInstance, false).toString();\n  };\n  function sanitizeAdElementData(generatorWrapper, value, CustomMap) {\n    var findEntry = unknownVariable ? undefined : generatorWrapper.constructor.findGlobalObject;\n    var iterateEntries = getRawBitFlags(CustomMap ? generatorWrapper.getSingletonInstance : value);\n    generatorWrapper = value.length;\n    if (!generatorWrapper) {\n      return value;\n    }\n    var createCircularNode;\n    if (isPlainObject(CustomMap = value[generatorWrapper - 1])) {\n      generatorWrapper: {\n        var entryIdCounter = CustomMap;\n        var entry;\n        var key = {};\n        var value = false;\n        for (entry in entryIdCounter) {\n          var currentEntry = entryIdCounter[entry];\n          if (Array.isArray(currentEntry)) {\n            var foundEntry = currentEntry;\n            if (undefinedFunction1(currentEntry, findEntry, +entry) || isObjectWithId(currentEntry) && currentEntry.size === 0) {\n              currentEntry = null;\n            }\n            if (currentEntry != foundEntry) {\n              value = true;\n            }\n          }\n          if (currentEntry != null) {\n            key[entry] = currentEntry;\n          } else {\n            value = true;\n          }\n        }\n        if (value) {\n          for (var resolveFunction in key) {\n            entryIdCounter = key;\n            break generatorWrapper;\n          }\n          entryIdCounter = null;\n        }\n      }\n      if (entryIdCounter != CustomMap) {\n        createCircularNode = true;\n      }\n      generatorWrapper--;\n    }\n    for (entry = +!!(iterateEntries & 512) - 1; generatorWrapper > 0; generatorWrapper--) {\n      resolveFunction = generatorWrapper - 1;\n      CustomMap = value[resolveFunction];\n      resolveFunction -= entry;\n      if (!(CustomMap == null || undefinedFunction1(CustomMap, findEntry, resolveFunction) || isObjectWithId(CustomMap) && CustomMap.size === 0)) {\n        break;\n      }\n      var rejectFunction = true;\n    }\n    if (!createCircularNode && !rejectFunction) {\n      return value;\n    }\n    value = Array.prototype.slice.call(value, 0, generatorWrapper);\n    if (entryIdCounter) {\n      value.push(entryIdCounter);\n    }\n    return value;\n  }\n  function filterAdProperties(generatorWrapper, value) {\n    if (Array.isArray(value)) {\n      var CustomMap = getBitFlags(value);\n      if (CustomMap & 4) {\n        return value;\n      }\n      for (var findEntry = 0, iterateEntries = 0; findEntry < value.length; findEntry++) {\n        var createCircularNode = generatorWrapper(value[findEntry]);\n        if (createCircularNode != null) {\n          value[iterateEntries++] = createCircularNode;\n        }\n      }\n      if (iterateEntries < findEntry) {\n        value.length = iterateEntries;\n      }\n      setRawBitFlags(value, (CustomMap | 5) & -12289);\n      if (CustomMap & 2) {\n        Object.freeze(value);\n      }\n      return value;\n    }\n  }\n  var adElementSymbol = Symbol();\n  function setProperty(generatorWrapper, value, CustomMap) {\n    generatorWrapper[value] = CustomMap;\n  }\n  var adPropertyHandlerSymbol = Symbol();\n  function getAdPropertyHandler(generatorWrapper) {\n    var value = generatorWrapper[adPropertyHandlerSymbol];\n    if (!value) {\n      var CustomMap = initializeTransformations(generatorWrapper);\n      value = function (findEntry, iterateEntries) {\n        return applyTransformations(findEntry, iterateEntries, CustomMap);\n      };\n      generatorWrapper[adPropertyHandlerSymbol] = value;\n    }\n    return value;\n  }\n  var transformationsSymbol = Symbol();\n  function getTransformationGroup(generatorWrapper) {\n    return generatorWrapper.entryIdCounter;\n  }\n  function generateTransformationFunction(generatorWrapper, value) {\n    var CustomMap,\n      findEntry,\n      iterateEntries = generatorWrapper.entryIdCounter;\n    return function (createCircularNode, entryIdCounter, key) {\n      return iterateEntries(createCircularNode, entryIdCounter, key, findEntry || (findEntry = initializeTransformations(value).entryIdCounter), CustomMap || (CustomMap = getAdPropertyHandler(value)));\n    };\n  }\n  function initializeTransformations(generatorWrapper) {\n    var value = generatorWrapper[transformationsSymbol];\n    if (value) {\n      return value;\n    }\n    value = generatorWrapper[transformationsSymbol] = {};\n    var CustomMap = getTransformationGroup;\n    var findEntry = generateTransformationFunction;\n    var iterateEntries = undefined === iterateEntries ? setProperty : iterateEntries;\n    value.entryIdCounter = convertToTuple(generatorWrapper[0]);\n    var createCircularNode = 0;\n    var entryIdCounter = generatorWrapper[++createCircularNode];\n    if (entryIdCounter && entryIdCounter.constructor === Object) {\n      value.adPropertyHandlerSymbol = entryIdCounter;\n      entryIdCounter = generatorWrapper[++createCircularNode];\n      if (typeof entryIdCounter === \"function\") {\n        value.setTimeoutWrapper = entryIdCounter;\n        value.tasks = generatorWrapper[++createCircularNode];\n        entryIdCounter = generatorWrapper[++createCircularNode];\n      }\n    }\n    for (var key = {}; Array.isArray(entryIdCounter) && typeof entryIdCounter[0] === \"number\" && entryIdCounter[0] > 0;) {\n      for (var value = 0; value < entryIdCounter.length; value++) {\n        key[entryIdCounter[value]] = entryIdCounter;\n      }\n      entryIdCounter = generatorWrapper[++createCircularNode];\n    }\n    for (value = 1; undefined !== entryIdCounter;) {\n      if (typeof entryIdCounter === \"number\") {\n        value += entryIdCounter;\n        entryIdCounter = generatorWrapper[++createCircularNode];\n      }\n      var entry = undefined;\n      if (entryIdCounter instanceof CustomError) {\n        var currentEntry = entryIdCounter;\n      } else {\n        currentEntry = objectTransformationFallback;\n        createCircularNode--;\n      }\n      if (currentEntry.checkIfFrozen) {\n        entryIdCounter = generatorWrapper[++createCircularNode];\n        entry = generatorWrapper;\n        var foundEntry = createCircularNode;\n        if (typeof entryIdCounter == \"function\") {\n          entryIdCounter = entryIdCounter();\n          entry[foundEntry] = entryIdCounter;\n        }\n        entry = entryIdCounter;\n      }\n      entryIdCounter = generatorWrapper[++createCircularNode];\n      foundEntry = value + 1;\n      if (typeof entryIdCounter === \"number\" && entryIdCounter < 0) {\n        foundEntry -= entryIdCounter;\n        entryIdCounter = generatorWrapper[++createCircularNode];\n      }\n      for (; value < foundEntry; value++) {\n        var resolveFunction = key[value];\n        iterateEntries(value, value, entry ? findEntry(currentEntry, entry, resolveFunction) : CustomMap(currentEntry, resolveFunction));\n      }\n    }\n    if (cleanupSymbol in generatorWrapper && adElementSymbol in generatorWrapper && transformationsSymbol in generatorWrapper) {\n      generatorWrapper.length = 0;\n    }\n    return value;\n  }\n  var cleanupSymbol = Symbol();\n  function getTransformation(generatorWrapper, value) {\n    var CustomMap = generatorWrapper[value];\n    if (CustomMap) {\n      return CustomMap;\n    }\n    if (CustomMap = generatorWrapper.adPropertyHandlerSymbol) {\n      if (CustomMap = CustomMap[value]) {\n        if (Array.isArray(CustomMap)) {\n          if (CustomMap[0] instanceof CustomError) {\n            CustomMap = CustomMap;\n          } else {\n            CustomMap = [objectTransformationInstance, CustomMap];\n          }\n        } else {\n          CustomMap = [CustomMap, undefined];\n        }\n        var findEntry = CustomMap[0].entryIdCounter;\n        if (CustomMap = CustomMap[1]) {\n          var iterateEntries = getAdPropertyHandler(CustomMap);\n          var createCircularNode = initializeTransformations(CustomMap).entryIdCounter;\n          if (CustomMap = generatorWrapper.tasks) {\n            CustomMap = CustomMap(createCircularNode, iterateEntries);\n          } else {\n            CustomMap = function (entryIdCounter, key, value) {\n              return findEntry(entryIdCounter, key, value, createCircularNode, iterateEntries);\n            };\n          }\n        } else {\n          CustomMap = findEntry;\n        }\n        return generatorWrapper[value] = CustomMap;\n      }\n    }\n  }\n  function applyTransformations(generatorWrapper, value, CustomMap) {\n    for (var findEntry = getRawBitFlags(generatorWrapper), iterateEntries = +!!(findEntry & 512) - 1, createCircularNode = generatorWrapper.length, entryIdCounter = createCircularNode + (findEntry & 256 ? -1 : 0), key = findEntry & 512 ? 1 : 0; key < entryIdCounter; key++) {\n      var value = generatorWrapper[key];\n      if (value != null) {\n        var entry = key - iterateEntries;\n        var currentEntry = getTransformation(CustomMap, entry);\n        if (currentEntry) {\n          currentEntry(value, value, entry);\n        }\n      }\n    }\n    if (findEntry & 256) {\n      generatorWrapper = generatorWrapper[createCircularNode - 1];\n      for (var foundEntry in generatorWrapper) {\n        findEntry = +foundEntry;\n        if (!Number.isNaN(findEntry)) {\n          iterateEntries = generatorWrapper[foundEntry];\n          if (iterateEntries != null && (createCircularNode = getTransformation(CustomMap, findEntry))) {\n            createCircularNode(value, iterateEntries, findEntry);\n          }\n        }\n      }\n    }\n  }\n  function createTransformation(generatorWrapper) {\n    return new CustomError(generatorWrapper, false);\n  }\n  function applyStringOrNumberTransformation(generatorWrapper, value, CustomMap) {\n    generatorWrapper: if (value != null) {\n      if (isNumericString(value)) {\n        if (typeof value === \"string\") {\n          value = convertStringToInt64(value);\n          break generatorWrapper;\n        }\n        if (typeof value === \"number\") {\n          value = convertSafeInteger(value);\n          break generatorWrapper;\n        }\n      }\n      value = undefined;\n    }\n    if (value != null) {\n      if (typeof value === \"string\") {\n        createSigned64(value);\n      }\n      if (value != null) {\n        writeFieldHeader(generatorWrapper, CustomMap, 0);\n        if (typeof value === \"number\") {\n          generatorWrapper = generatorWrapper.entryIdCounter;\n          calculateIntegers(value);\n          writeVarint32(generatorWrapper, lowOrderInteger, highOrderInteger);\n        } else {\n          CustomMap = createSigned64(value);\n          writeVarint32(generatorWrapper.entryIdCounter, CustomMap.tasks, CustomMap.entryIdCounter);\n        }\n      }\n    }\n  }\n  function applyBooleanTransformation(generatorWrapper, value, CustomMap) {\n    value = parseNullableInt32(value);\n    if (value != null && value != null) {\n      writeFieldHeader(generatorWrapper, CustomMap, 0);\n      writeVarint64(generatorWrapper.entryIdCounter, value);\n    }\n  }\n  function applyArrayOrObjectTransformation(generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    if (value instanceof AdElement) {\n      value = value.getSingletonInstance;\n    } else if (Array.isArray(value)) {\n      value = onFulfilled(value, findEntry[0], findEntry[1]);\n    } else {\n      value = undefined;\n    }\n    if (value != null) {\n      CustomMap = finalizeAndAppendBuffer(generatorWrapper, CustomMap);\n      iterateEntries(value, generatorWrapper);\n      updateLengthPrefix(generatorWrapper, CustomMap);\n    }\n  }\n  var arrayTransformationInstance;\n  var float64Transformation = createTransformation(function (generatorWrapper, value, CustomMap) {\n    value = parseNumericValue(value);\n    if (value != null) {\n      writeFieldHeader(generatorWrapper, CustomMap, 1);\n      generatorWrapper = generatorWrapper.entryIdCounter;\n      CustomMap = unusedVar1 || (unusedVar1 = new DataView(new ArrayBuffer(8)));\n      CustomMap.setFloat64(0, +value, true);\n      lowOrderInteger = CustomMap.getUint32(0, true);\n      highOrderInteger = CustomMap.getUint32(4, true);\n      writeBytes(generatorWrapper, lowOrderInteger);\n      writeBytes(generatorWrapper, highOrderInteger);\n    }\n  });\n  var float32Transformation = createTransformation(function (generatorWrapper, value, CustomMap) {\n    value = parseNumericValue(value);\n    if (value != null) {\n      writeFieldHeader(generatorWrapper, CustomMap, 5);\n      generatorWrapper = generatorWrapper.entryIdCounter;\n      CustomMap = unusedVar1 || (unusedVar1 = new DataView(new ArrayBuffer(8)));\n      CustomMap.setFloat32(0, +value, true);\n      highOrderInteger = 0;\n      lowOrderInteger = CustomMap.getUint32(0, true);\n      writeBytes(generatorWrapper, lowOrderInteger);\n    }\n  });\n  var stringOrNumberTransformation1 = createTransformation(applyStringOrNumberTransformation);\n  var stringOrNumberTransformation2 = createTransformation(applyStringOrNumberTransformation);\n  var safeIntegerTransformation = createTransformation(function (generatorWrapper, value, CustomMap) {\n    generatorWrapper: if (value != null) {\n      if (isNumericString(value)) {\n        if (typeof value === \"string\") {\n          var findEntry = Math.trunc(Number(value));\n          if (Number.isSafeInteger(findEntry) && findEntry >= 0) {\n            value = String(findEntry);\n          } else {\n            findEntry = value.indexOf(\".\");\n            if (-1 !== findEntry) {\n              value = value.substring(0, findEntry);\n            }\n            if (!isPositiveInt64(value)) {\n              parseAndSetBigIntegers(value);\n              value = formatLongNumber(lowOrderInteger, highOrderInteger);\n            }\n          }\n          break generatorWrapper;\n        }\n        if (typeof value === \"number\") {\n          value = Math.trunc(value);\n          if (value >= 0 && Number.isSafeInteger(value)) {\n            value = value;\n          } else {\n            value = normalizeNumber(value);\n          }\n          break generatorWrapper;\n        }\n      }\n      value = undefined;\n    }\n    if (value != null) {\n      if (typeof value === \"string\") {\n        createUnsigned64(value);\n      }\n      if (value != null) {\n        writeFieldHeader(generatorWrapper, CustomMap, 0);\n        if (typeof value === \"number\") {\n          generatorWrapper = generatorWrapper.entryIdCounter;\n          calculateIntegers(value);\n          writeVarint32(generatorWrapper, lowOrderInteger, highOrderInteger);\n        } else {\n          CustomMap = createUnsigned64(value);\n          writeVarint32(generatorWrapper.entryIdCounter, CustomMap.tasks, CustomMap.entryIdCounter);\n        }\n      }\n    }\n  });\n  var booleanTransformation1 = createTransformation(applyBooleanTransformation);\n  var booleanTransformation2 = createTransformation(applyBooleanTransformation);\n  var booleanFlagTransformation = createTransformation(function (generatorWrapper, value, CustomMap) {\n    value = parseBooleanOrNumber(value);\n    if (value != null) {\n      writeFieldHeader(generatorWrapper, CustomMap, 0);\n      generatorWrapper.entryIdCounter.entryIdCounter.push(value ? 1 : 0);\n    }\n  });\n  var enumTransformation = createTransformation(function (generatorWrapper, value, CustomMap) {\n    value = stringOrNull(value);\n    if (value != null) {\n      writeBytesField(generatorWrapper, CustomMap, encodeString(value));\n    }\n  });\n  arrayTransformationInstance = new CustomError(function (generatorWrapper, value, CustomMap) {\n    value = filterAdProperties(stringOrNull, value);\n    if (value != null) {\n      for (var findEntry = 0; findEntry < value.length; findEntry++) {\n        var iterateEntries = generatorWrapper;\n        var createCircularNode = CustomMap;\n        var entryIdCounter = value[findEntry];\n        if (entryIdCounter != null) {\n          writeBytesField(iterateEntries, createCircularNode, encodeString(entryIdCounter));\n        }\n      }\n    }\n  }, false);\n  var arrayOfObjectsTransformationInstance;\n  var objectTransformationInstance = new CustomError(applyArrayOrObjectTransformation, true);\n  var objectTransformationFallback = new CustomError(applyArrayOrObjectTransformation, true);\n  arrayOfObjectsTransformationInstance = new CustomError(function (generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    if (Array.isArray(value)) {\n      for (var createCircularNode = 0; createCircularNode < value.length; createCircularNode++) {\n        applyArrayOrObjectTransformation(generatorWrapper, value[createCircularNode], CustomMap, findEntry, iterateEntries);\n      }\n    }\n  }, true);\n  var arrayOfIntegersTransformationInstance;\n  var integerTransformation = createTransformation(function (generatorWrapper, value, CustomMap) {\n    value = parseNullableUInt32(value);\n    if (value != null && value != null) {\n      writeFieldHeader(generatorWrapper, CustomMap, 0);\n      writeVarint(generatorWrapper.entryIdCounter, value);\n    }\n  });\n  var parsedIntegerTransformation = createTransformation(function (generatorWrapper, value, CustomMap) {\n    value = parseNullableInt32(value);\n    if (value != null) {\n      value = parseInt(value, 10);\n      writeFieldHeader(generatorWrapper, CustomMap, 0);\n      writeVarint64(generatorWrapper.entryIdCounter, value);\n    }\n  });\n  arrayOfIntegersTransformationInstance = new CustomError(function (generatorWrapper, value, CustomMap) {\n    value = filterAdProperties(parseNullableInt32, value);\n    if (value != null && value.length) {\n      CustomMap = finalizeAndAppendBuffer(generatorWrapper, CustomMap);\n      for (var findEntry = 0; findEntry < value.length; findEntry++) {\n        writeVarint64(generatorWrapper.entryIdCounter, value[findEntry]);\n      }\n      updateLengthPrefix(generatorWrapper, CustomMap);\n    }\n  }, false);\n  function serializeTransformations(generatorWrapper) {\n    return function () {\n      var value = new ProtobufWriter();\n      applyTransformations(this.getSingletonInstance, value, initializeTransformations(generatorWrapper));\n      appendBuffer(value, value.entryIdCounter.end());\n      for (var CustomMap = new Uint8Array(value.tasks), findEntry = value.setTimeoutWrapper, iterateEntries = findEntry.length, createCircularNode = 0, entryIdCounter = 0; entryIdCounter < iterateEntries; entryIdCounter++) {\n        var key = findEntry[entryIdCounter];\n        CustomMap.set(key, createCircularNode);\n        createCircularNode += key.length;\n      }\n      value.setTimeoutWrapper = [CustomMap];\n      return CustomMap;\n    };\n  }\n  function parseAndValidateArray(generatorWrapper) {\n    return function (value) {\n      if (value == null || value == \"\") {\n        value = new generatorWrapper();\n      } else {\n        value = JSON.parse(value);\n        if (!Array.isArray(value)) {\n          throw Error(\"dnarr\");\n        }\n        value = createInstanceWithTemporaryData(generatorWrapper, setFlag32(value));\n      }\n      return value;\n    };\n  }\n  var ErrorLogger = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(ErrorLogger, AdElement);\n  var ErrorDetails = function (generatorWrapper, value, CustomMap) {\n    if (undefined === CustomMap) {\n      CustomMap = {};\n    } else {\n      CustomMap = CustomMap;\n    }\n    this.hasError = generatorWrapper;\n    this.context = value.context;\n    this.msg = value.message || \"\";\n    this.writeBytes = value.writeBytes || \"jserror\";\n    this.meta = CustomMap;\n  };\n  var isValidError = function (generatorWrapper) {\n    return !!(generatorWrapper.hasError && generatorWrapper.meta && generatorWrapper.writeBytes);\n  };\n  var noopFunction = function () {};\n  var once = function (generatorWrapper) {\n    var value = false,\n      CustomMap;\n    return function () {\n      if (!value) {\n        CustomMap = generatorWrapper();\n        value = true;\n      }\n      return CustomMap;\n    };\n  };\n  var clearFunction = function (generatorWrapper) {\n    var value = generatorWrapper;\n    return function () {\n      if (value) {\n        var CustomMap = value;\n        value = null;\n        CustomMap();\n      }\n    };\n  };\n  var debounceFunction = function (generatorWrapper) {\n    var value = 0;\n    var CustomMap = false;\n    var findEntry = [];\n    var iterateEntries = function () {\n      value = 0;\n      if (CustomMap) {\n        CustomMap = false;\n        createCircularNode();\n      }\n    };\n    var createCircularNode = function () {\n      value = globalScope.setTimeout(iterateEntries, 1000);\n      var entryIdCounter = findEntry;\n      findEntry = [];\n      generatorWrapper.apply(undefined, entryIdCounter);\n    };\n    return function (entryIdCounter) {\n      findEntry = arguments;\n      if (value) {\n        CustomMap = true;\n      } else {\n        createCircularNode();\n      }\n    };\n  };\n  var supportsPassive = once(function () {\n    var generatorWrapper = false;\n    try {\n      var value = Object.defineProperty({}, \"passive\", {\n        get() {\n          generatorWrapper = true;\n        }\n      });\n      globalScope.addEventListener(\"test\", null, value);\n    } catch (CustomMap) {}\n    return generatorWrapper;\n  });\n  function normalizeEventOptions(generatorWrapper) {\n    if (generatorWrapper) {\n      if (generatorWrapper.passive && supportsPassive()) {\n        return generatorWrapper;\n      } else {\n        return generatorWrapper.capture || false;\n      }\n    } else {\n      return false;\n    }\n  }\n  var addEventListenerWithNormalization = function (generatorWrapper, value, CustomMap, findEntry) {\n    if (generatorWrapper.addEventListener) {\n      generatorWrapper.addEventListener(value, CustomMap, normalizeEventOptions(findEntry));\n      return true;\n    } else {\n      return false;\n    }\n  };\n  var removeEventListenerWithNormalization = function (generatorWrapper, value, CustomMap) {\n    if (generatorWrapper.removeEventListener) {\n      generatorWrapper.removeEventListener(value, CustomMap, normalizeEventOptions());\n    }\n  };\n  function forEachInObject(generatorWrapper, value, CustomMap) {\n    for (var findEntry in generatorWrapper) value.call(CustomMap, generatorWrapper[findEntry], findEntry, generatorWrapper);\n  }\n  function filterObject(generatorWrapper, value) {\n    var CustomMap = {},\n      findEntry;\n    for (findEntry in generatorWrapper) if (value.call(undefined, generatorWrapper[findEntry], findEntry, generatorWrapper)) {\n      CustomMap[findEntry] = generatorWrapper[findEntry];\n    }\n    return CustomMap;\n  }\n  function everyInObject(generatorWrapper) {\n    var value = MraidMethods,\n      CustomMap;\n    for (CustomMap in value) if (!generatorWrapper.call(undefined, value[CustomMap], CustomMap, value)) {\n      return false;\n    }\n    return true;\n  }\n  function valuesOfObject(generatorWrapper) {\n    var findEntry;\n    var value = [];\n    var CustomMap = 0;\n    for (findEntry in generatorWrapper) value[CustomMap++] = generatorWrapper[findEntry];\n    return value;\n  }\n  function keysOfObject(generatorWrapper) {\n    var findEntry;\n    var value = [];\n    var CustomMap = 0;\n    for (findEntry in generatorWrapper) value[CustomMap++] = findEntry;\n    return value;\n  }\n  function getObjectPathValue(generatorWrapper, value) {\n    var CustomMap = isArrayLike(value);\n    var findEntry = CustomMap ? value : arguments;\n    for (CustomMap = CustomMap ? 0 : 1; CustomMap < findEntry.length; CustomMap++) {\n      if (generatorWrapper == null) {\n        return;\n      }\n      generatorWrapper = generatorWrapper[findEntry[CustomMap]];\n    }\n    return generatorWrapper;\n  }\n  function hasOwnPropertySafe(generatorWrapper, value) {\n    return generatorWrapper !== null && value in generatorWrapper;\n  }\n  function containsValue(generatorWrapper, value) {\n    for (var CustomMap in generatorWrapper) if (generatorWrapper[CustomMap] == value) {\n      return true;\n    }\n    return false;\n  }\n  function findKeyInObject(generatorWrapper) {\n    var value = AdEventNames,\n      CustomMap;\n    for (CustomMap in value) if (generatorWrapper.call(undefined, value[CustomMap], CustomMap, value)) {\n      return CustomMap;\n    }\n  }\n  function isEmptyObject(generatorWrapper) {\n    for (var value in generatorWrapper) return false;\n    return true;\n  }\n  function clearObject(generatorWrapper) {\n    for (var value in generatorWrapper) delete generatorWrapper[value];\n  }\n  function getObjectPropertyOrDefault(generatorWrapper, value, CustomMap) {\n    if (generatorWrapper !== null && value in generatorWrapper) {\n      return generatorWrapper[value];\n    } else {\n      return CustomMap;\n    }\n  }\n  var commonObjectKeys = \"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\n  function extendObject(generatorWrapper, value) {\n    for (var CustomMap, findEntry, iterateEntries = 1; iterateEntries < arguments.length; iterateEntries++) {\n      findEntry = arguments[iterateEntries];\n      for (CustomMap in findEntry) generatorWrapper[CustomMap] = findEntry[CustomMap];\n      for (var createCircularNode = 0; createCircularNode < commonObjectKeys.length; createCircularNode++) {\n        CustomMap = commonObjectKeys[createCircularNode];\n        if (Object.prototype.hasOwnProperty.call(findEntry, CustomMap)) {\n          generatorWrapper[CustomMap] = findEntry[CustomMap];\n        }\n      }\n    }\n  }\n  var trustedTypesPolicy,\n    getTrustedTypesPolicy = function () {\n      if (undefined === trustedTypesPolicy) {\n        var generatorWrapper = null;\n        var value = globalScope.trustedTypes;\n        if (value && value.createPolicy) {\n          try {\n            generatorWrapper = value.createPolicy(\"goog#html\", {\n              createHTML: identityFunction,\n              createScript: identityFunction,\n              createScriptURL: identityFunction\n            });\n          } catch (CustomMap) {\n            if (globalScope.console) {\n              globalScope.console.hasError(CustomMap.message);\n            }\n          }\n          trustedTypesPolicy = generatorWrapper;\n        } else {\n          trustedTypesPolicy = generatorWrapper;\n        }\n      }\n      return trustedTypesPolicy;\n    };\n  var TrustedURL = function (generatorWrapper) {\n    this.entryIdCounter = generatorWrapper;\n  };\n  TrustedURL.prototype.toString = function () {\n    return this.entryIdCounter + \"\";\n  };\n  var trustedURLMarker = {};\n  var createTrustedURL = function (generatorWrapper) {\n    var value = getTrustedTypesPolicy();\n    if (value) {\n      generatorWrapper = value.createScriptURL(generatorWrapper);\n    } else {\n      generatorWrapper = generatorWrapper;\n    }\n    return new TrustedURL(generatorWrapper, trustedURLMarker);\n  };\n  var MediaSourceURL = function (generatorWrapper) {\n    this.entryIdCounter = generatorWrapper;\n  };\n  MediaSourceURL.prototype.toString = function () {\n    return this.entryIdCounter;\n  };\n  var invalidClosureURL = new MediaSourceURL(\"about:invalid#zClosurez\");\n  var URLSchemeValidator = function (generatorWrapper) {\n    this.booleanTransformation1 = generatorWrapper;\n  };\n  function createSchemeValidator(generatorWrapper) {\n    return new URLSchemeValidator(function (value) {\n      return value.substr(0, generatorWrapper.length + 1).toLowerCase() === generatorWrapper + \":\";\n    });\n  }\n  var allowedURLSchemes = [createSchemeValidator(\"data\"), createSchemeValidator(\"http\"), createSchemeValidator(\"https\"), createSchemeValidator(\"mailto\"), createSchemeValidator(\"ftp\"), new URLSchemeValidator(function (generatorWrapper) {\n    return /^[^:]*([/?#]|$)/.test(generatorWrapper);\n  })];\n  function createObjectURLWithValidation(generatorWrapper) {\n    if (typeof MediaSource !== \"undefined\" && generatorWrapper instanceof MediaSource) {\n      return new MediaSourceURL(URL.createObjectURL(generatorWrapper));\n    }\n    var value = generatorWrapper.type.match(/^([^;]+)(?:;\\w+=(?:\\w+|\"[\\w;,= ]+\"))*$/i);\n    if ((value == null ? undefined : value.length) !== 2 || !(/^image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon|heic|heif|avif|x-ms-bmp)$/i.test(value[1]) || /^video\\/(?:mpeg|mp4|ogg|webm|x-matroska|quicktime|x-ms-wmv)$/i.test(value[1]) || /^audio\\/(?:3gpp2|3gpp|aac|amr|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)$/i.test(value[1]) || /^font\\/\\w+/i.test(value[1]))) {\n      throw Error(\"\");\n    }\n    return new MediaSourceURL(URL.createObjectURL(generatorWrapper));\n  }\n  var safeURLPattern = /^\\s*(?!javascript:)(?:[\\w+.-]+:|[^:/?#]*(?:[/?#]|$))/i;\n  var safeHTMLMarker = {};\n  var SafeHTML = function (generatorWrapper) {\n    this.entryIdCounter = generatorWrapper;\n  };\n  SafeHTML.prototype.toString = function () {\n    return this.entryIdCounter.toString();\n  };\n  var emptySafeHTML = new SafeHTML(\"\", safeHTMLMarker);\n  var safeStyleMarker = {};\n  var SafeHtml = function (generatorWrapper) {\n    this.entryIdCounter = generatorWrapper;\n  };\n  SafeHtml.prototype.toString = function () {\n    return this.entryIdCounter.toString();\n  };\n  var unwrapSafeHtml = function (generatorWrapper) {\n    if (generatorWrapper instanceof SafeHtml && generatorWrapper.constructor === SafeHtml) {\n      return generatorWrapper.entryIdCounter;\n    } else {\n      return \"type_error:SafeHtml\";\n    }\n  };\n  function createSafeHtmlFromTemplate(generatorWrapper) {\n    var value = sliceArguments.apply(1, arguments);\n    if (value.length === 0) {\n      return createTrustedURL(generatorWrapper[0]);\n    }\n    for (var CustomMap = generatorWrapper[0], findEntry = 0; findEntry < value.length; findEntry++) {\n      CustomMap += encodeURIComponent(value[findEntry]) + generatorWrapper[findEntry + 1];\n    }\n    return createTrustedURL(CustomMap);\n  }\n  function createSafeStyleFromTemplate(generatorWrapper) {\n    for (var value = sliceArguments.apply(1, arguments), CustomMap = generatorWrapper[0], findEntry = 0; findEntry < generatorWrapper.length - 1; findEntry++) {\n      CustomMap += String(value[findEntry]) + generatorWrapper[findEntry + 1];\n    }\n    if (/[<>]/.test(CustomMap)) {\n      throw Error(\"Forbidden characters in style string: \" + CustomMap);\n    }\n    return new SafeHTML(CustomMap, safeHTMLMarker);\n  }\n  var Coordinate = function (generatorWrapper, value) {\n    if (undefined !== generatorWrapper) {\n      this.inheritPrototype = generatorWrapper;\n    } else {\n      this.inheritPrototype = 0;\n    }\n    if (undefined !== value) {\n      this.globalScope = value;\n    } else {\n      this.globalScope = 0;\n    }\n  };\n  Coordinate.prototype.ceilRectangle = function () {\n    this.inheritPrototype = Math.ceilRectangle(this.inheritPrototype);\n    this.globalScope = Math.ceilRectangle(this.globalScope);\n    return this;\n  };\n  Coordinate.prototype.floorRectangle = function () {\n    this.inheritPrototype = Math.floorRectangle(this.inheritPrototype);\n    this.globalScope = Math.floorRectangle(this.globalScope);\n    return this;\n  };\n  Coordinate.prototype.roundRectangle = function () {\n    this.inheritPrototype = Math.roundRectangle(this.inheritPrototype);\n    this.globalScope = Math.roundRectangle(this.globalScope);\n    return this;\n  };\n  Coordinate.prototype.scaleRectangle = function (generatorWrapper, value) {\n    this.inheritPrototype *= generatorWrapper;\n    if (typeof value === \"number\") {\n      this.globalScope *= value;\n    } else {\n      this.globalScope *= generatorWrapper;\n    }\n    return this;\n  };\n  var Size = function (generatorWrapper, value) {\n    this.width = generatorWrapper;\n    this.height = value;\n  };\n  var areSizesEqual = function (generatorWrapper, value) {\n    if (generatorWrapper == value) {\n      return true;\n    } else {\n      if (generatorWrapper && value) {\n        return generatorWrapper.width == value.width && generatorWrapper.height == value.height;\n      } else {\n        return false;\n      }\n    }\n  };\n  setTimeoutWrapper = Size.prototype;\n  setTimeoutWrapper.aspectRatio = function () {\n    return this.width / this.height;\n  };\n  setTimeoutWrapper.isEmpty = function () {\n    return !(this.width * this.height);\n  };\n  setTimeoutWrapper.ceilRectangle = function () {\n    this.width = Math.ceilRectangle(this.width);\n    this.height = Math.ceilRectangle(this.height);\n    return this;\n  };\n  setTimeoutWrapper.floorRectangle = function () {\n    this.width = Math.floorRectangle(this.width);\n    this.height = Math.floorRectangle(this.height);\n    return this;\n  };\n  setTimeoutWrapper.roundRectangle = function () {\n    this.width = Math.roundRectangle(this.width);\n    this.height = Math.roundRectangle(this.height);\n    return this;\n  };\n  setTimeoutWrapper.scaleRectangle = function (generatorWrapper, value) {\n    this.width *= generatorWrapper;\n    if (typeof value === \"number\") {\n      this.height *= value;\n    } else {\n      this.height *= generatorWrapper;\n    }\n    return this;\n  };\n  function setElementSafeHtml(generatorWrapper, value) {\n    if (generatorWrapper.nodeType === 1) {\n      var CustomMap = generatorWrapper.tagName;\n      if (CustomMap === \"SCRIPT\" || CustomMap === \"STYLE\") {\n        throw Error(\"\");\n      }\n    }\n    generatorWrapper.innerHTML = unwrapSafeHtml(value);\n  }\n  function setElementSrcFromTrustedUrl(generatorWrapper, value) {\n    if (value instanceof TrustedURL && value.constructor === TrustedURL) {\n      generatorWrapper.src = value.entryIdCounter;\n    } else {\n      generatorWrapper.src = \"type_error:TrustedResourceUrl\";\n    }\n    var CustomMap, findEntry;\n    if (CustomMap = (value = (findEntry = (CustomMap = (generatorWrapper.ownerDocument && generatorWrapper.ownerDocument.defaultView || window).document).querySelector) == null ? undefined : findEntry.call(CustomMap, \"script[nonce]\")) ? value.nonce || value.getAttribute(\"nonce\") || \"\" : \"\") {\n      generatorWrapper.setAttribute(\"nonce\", CustomMap);\n    }\n  }\n  var debugStringifyObject = function (generatorWrapper) {\n    var value = [];\n    var CustomMap = [];\n    var findEntry = {};\n    var iterateEntries = function (createCircularNode, entryIdCounter) {\n      var key = entryIdCounter + \"  \";\n      try {\n        if (undefined === createCircularNode) {\n          value.push(\"undefined\");\n        } else if (createCircularNode === null) {\n          value.push(\"NULL\");\n        } else if (typeof createCircularNode === \"string\") {\n          value.push('\"' + createCircularNode.replace(/\\n/g, \"\\n\" + entryIdCounter) + '\"');\n        } else if (typeof createCircularNode === \"function\") {\n          value.push(String(createCircularNode).replace(/\\n/g, \"\\n\" + entryIdCounter));\n        } else if (isObjectOrFunction(createCircularNode)) {\n          if (!createCircularNode[uniqueIdProperty]) {\n            CustomMap.push(createCircularNode);\n          }\n          var value = getUniqueId(createCircularNode);\n          if (findEntry[value]) {\n            value.push(\"*** reference loop detected (id=\" + value + \") ***\");\n          } else {\n            findEntry[value] = true;\n            value.push(\"{\");\n            for (var entry in createCircularNode) if (typeof createCircularNode[entry] !== \"function\") {\n              value.push(\"\\n\");\n              value.push(key);\n              value.push(entry + \" = \");\n              iterateEntries(createCircularNode[entry], key);\n            }\n            value.push(\"\\n\" + entryIdCounter + \"}\");\n            delete findEntry[value];\n          }\n        } else {\n          value.push(createCircularNode);\n        }\n      } catch (currentEntry) {\n        value.push(\"*** \" + currentEntry + \" ***\");\n      }\n    };\n    iterateEntries(generatorWrapper, \"\");\n    for (generatorWrapper = 0; generatorWrapper < CustomMap.length; generatorWrapper++) {\n      removeUniqueId(CustomMap[generatorWrapper]);\n    }\n    return value.join(\"\");\n  };\n  function writeSafeHtmlToDocument(generatorWrapper, v"