", value);\n            if (iterateEntries = iterateEntries.onAdContentSet) {\n              iterateEntries(findEntry);\n            }\n          }\n        }\n      }\n    }\n  }\n  var CustomEvent = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries, createCircularNode) {\n    CustomEvent.call(this, generatorWrapper, value, CustomMap, findEntry, iterateEntries);\n    this.entryIdCounter = createCircularNode;\n  };\n  inheritPrototype(CustomEvent, CustomEvent);\n  var MessagingHandler = function (generatorWrapper, value) {\n    AdEnvironmentConfig.call(this);\n    this.isDone = generatorWrapper;\n    this.handleAsync = value;\n    this.entryIdCounter = {};\n    this.tasks = new EventDispatcher(this);\n    registerDisposable(this, this.tasks);\n    this.tasks.window(getWindowForDocument(), \"message\", this.setTimeoutWrapper);\n  };\n  inheritPrototype(MessagingHandler, AdEnvironmentConfig);\n  var dispatchCustomEvent = function (generatorWrapper, value) {\n    var CustomMap = value.entryIdCounter;\n    if (generatorWrapper.entryIdCounter.hasOwnProperty(CustomMap)) {\n      enqueueMessage(generatorWrapper.entryIdCounter[CustomMap], value.type, value.messageType, value.setPrototypeOfPolyfill);\n    }\n  };\n  var setupMessagingChannel = function (generatorWrapper, value, CustomMap, findEntry) {\n    if (!generatorWrapper.entryIdCounter.hasOwnProperty(value)) {\n      CustomMap = new MessageHandler(value, CustomMap);\n      generatorWrapper.tasks.window(CustomMap, generatorWrapper.isDone, function (iterateEntries) {\n        this.dispatchEvent(new CustomEvent(iterateEntries.type, iterateEntries.messageType, iterateEntries.setPrototypeOfPolyfill, iterateEntries.isAndroid, iterateEntries.origin, value));\n      });\n      CustomMap.entryIdCounter = findEntry;\n      CustomMap.connect();\n      generatorWrapper.entryIdCounter[value] = CustomMap;\n    }\n  };\n  MessagingHandler.prototype.getAdEnvironment = function () {\n    for (var generatorWrapper = getIterator(Object.values(this.entryIdCounter)), value = generatorWrapper.next(); !value.done; value = generatorWrapper.next()) {\n      markAsCompletedWrapper(value.value);\n    }\n    AdEnvironmentConfig.prototype.getAdEnvironment.call(this);\n  };\n  MessagingHandler.prototype.setTimeoutWrapper = function (generatorWrapper) {\n    generatorWrapper = generatorWrapper.entryIdCounter;\n    var value = parseImaMessage(generatorWrapper.data);\n    if (value != null) {\n      var CustomMap = value.channel;\n      if (this.handleAsync && !this.entryIdCounter.hasOwnProperty(CustomMap)) {\n        var findEntry = value.sid;\n        setupMessagingChannel(this, CustomMap, findEntry, generatorWrapper.source);\n        this.dispatchEvent(new CustomEvent(value.name, value.type, value.data || {}, findEntry, generatorWrapper.origin, CustomMap));\n      }\n    }\n  };\n  function isGptPresent() {\n    return !!getFromGlobalScope(\"googletag.cmd\", getWindowForDocument());\n  }\n  function getGoogleTagConsole() {\n    var generatorWrapper = getFromGlobalScope(\"googletag.console\", getWindowForDocument());\n    if (generatorWrapper != null) {\n      return generatorWrapper;\n    } else {\n      return null;\n    }\n  }\n  var CrossDomainMessagingManager = function () {\n    EventDispatcher.call(this);\n    this.entryIdCounter = null;\n    this.setTimeoutWrapper = new MessagingHandler(\"gpt\", true);\n    registerDisposable(this, this.setTimeoutWrapper);\n    this.window(this.setTimeoutWrapper, \"gpt\", this.isDone);\n    if (!(isGptPresent() || getWindowForDocument().top === getWindowForDocument())) {\n      this.entryIdCounter = new MessagingHandler(\"gpt\", false);\n      registerDisposable(this, this.entryIdCounter);\n      this.window(this.entryIdCounter, \"gpt\", this.handleAsync);\n    }\n  };\n  inheritPrototype(CrossDomainMessagingManager, EventDispatcher);\n  CrossDomainMessagingManager.prototype.isDone = function (generatorWrapper) {\n    var value = generatorWrapper.origin;\n    var CustomMap = \"//imasdk.googleapis.com\".match(urlRegex);\n    value = value.match(urlRegex);\n    if (CustomMap[3] == value[3] && CustomMap[4] == value[4]) {\n      if (this.entryIdCounter != null) {\n        setupMessagingChannel(this.entryIdCounter, generatorWrapper.entryIdCounter, generatorWrapper.isAndroid, getWindowForDocument().parent);\n        if (this.entryIdCounter != null) {\n          dispatchCustomEvent(this.entryIdCounter, generatorWrapper);\n        }\n      } else {\n        CustomMap = generatorWrapper.setPrototypeOfPolyfill;\n        if (CustomMap != null && undefined !== CustomMap.scope) {\n          value = CustomMap.scope;\n          CustomMap = CustomMap.args;\n          var findEntry;\n          if (value === \"proxy\") {\n            var iterateEntries = generatorWrapper.messageType;\n            if (iterateEntries === \"isGptPresent\") {\n              findEntry = isGptPresent();\n            } else if (iterateEntries === \"isConsolePresent\") {\n              findEntry = getGoogleTagConsole() != null;\n            }\n          } else if (isGptPresent()) {\n            if (value === \"pubads\" || value === \"companionAds\") {\n              findEntry = generatorWrapper.messageType;\n              var createCircularNode = getWindowForDocument().googletag;\n              if (createCircularNode != null && createCircularNode[value] != null && (value = createCircularNode[value](), value != null && (findEntry = value[findEntry], findEntry != null))) {\n                try {\n                  iterateEntries = findEntry.apply(value, CustomMap);\n                } catch (entryIdCounter) {}\n              }\n              findEntry = iterateEntries;\n            } else if (value === \"console\") {\n              iterateEntries = getGoogleTagConsole();\n              if (iterateEntries != null && (value = iterateEntries[generatorWrapper.messageType], value != null)) {\n                try {\n                  value.apply(iterateEntries, CustomMap);\n                } catch (entryIdCounter) {}\n              }\n            } else if (value === null) {\n              iterateEntries = generatorWrapper.messageType;\n              if (iterateEntries === \"googleGetCompanionAdSlots\") {\n                if (iterateEntries = getCompanionAdsService()) {\n                  iterateEntries = iterateEntries.getSlots().map(extractSlotInfo);\n                  if (iterateEntries.length) {\n                    findEntry = iterateEntries;\n                  } else {\n                    findEntry = null;\n                  }\n                } else {\n                  findEntry = null;\n                }\n              } else {\n                if (iterateEntries === \"googleSetCompanionAdContents\") {\n                  renderCompanionAds(CustomMap == null ? undefined : CustomMap[0]);\n                }\n                findEntry = null;\n              }\n            }\n          }\n          if (undefined !== findEntry) {\n            generatorWrapper.setPrototypeOfPolyfill.returnValue = findEntry;\n            dispatchCustomEvent(this.setTimeoutWrapper, generatorWrapper);\n          }\n        }\n      }\n    }\n  };\n  CrossDomainMessagingManager.prototype.handleAsync = function (generatorWrapper) {\n    dispatchCustomEvent(this.setTimeoutWrapper, generatorWrapper);\n  };\n  var removeMessagingChannel = function (generatorWrapper, value) {\n    if (generatorWrapper.entryIdCounter) {\n      var CustomMap = generatorWrapper.entryIdCounter;\n      markAsCompletedWrapper(CustomMap.entryIdCounter[value]);\n      delete CustomMap.entryIdCounter[value];\n    }\n    if (generatorWrapper.setTimeoutWrapper) {\n      generatorWrapper = generatorWrapper.setTimeoutWrapper;\n      markAsCompletedWrapper(generatorWrapper.entryIdCounter[value]);\n      delete generatorWrapper.entryIdCounter[value];\n    }\n  };\n  var formatString = function (generatorWrapper, value) {\n    var CustomMap = Array.prototype.slice.call(arguments);\n    var findEntry = CustomMap.shift();\n    if (typeof findEntry == \"undefined\") {\n      throw Error(\"[goog.string.format] Template required\");\n    }\n    return findEntry.replace(/%([0\\- \\+]*)(\\d+)?(\\.(\\d+))?([%sfdiu])/g, function (iterateEntries, createCircularNode, entryIdCounter, key, value, entry, currentEntry, foundEntry) {\n      if (entry == \"%\") {\n        return \"%\";\n      }\n      var resolveFunction = CustomMap.shift();\n      if (typeof resolveFunction == \"undefined\") {\n        throw Error(\"[goog.string.format] Not enough arguments\");\n      }\n      arguments[0] = resolveFunction;\n      return formatFunctions[entry].apply(null, arguments);\n    });\n  };\n  var formatFunctions = {\n    string(generatorWrapper, value, CustomMap) {\n      if (isNaN(CustomMap) || CustomMap == \"\" || generatorWrapper.length >= Number(CustomMap)) {\n        return generatorWrapper;\n      } else {\n        return generatorWrapper = -1 < value.indexOf(\"-\", 0) ? generatorWrapper + repeatString(\" \", Number(CustomMap) - generatorWrapper.length) : repeatString(\" \", Number(CustomMap) - generatorWrapper.length) + generatorWrapper;\n      }\n    },\n    createCircularNode(generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n      findEntry = generatorWrapper.toString();\n      if (!(isNaN(iterateEntries) || iterateEntries == \"\")) {\n        findEntry = parseFloat(generatorWrapper).toFixed(iterateEntries);\n      }\n      var createCircularNode = Number(generatorWrapper) < 0 ? \"-\" : value.indexOf(\"+\") >= 0 ? \"+\" : value.indexOf(\" \") >= 0 ? \" \" : \"\";\n      if (Number(generatorWrapper) >= 0) {\n        findEntry = createCircularNode + findEntry;\n      }\n      if (isNaN(CustomMap) || findEntry.length >= Number(CustomMap)) {\n        return findEntry;\n      }\n      if (isNaN(iterateEntries)) {\n        findEntry = Math.abs(Number(generatorWrapper)).toString();\n      } else {\n        findEntry = Math.abs(Number(generatorWrapper)).toFixed(iterateEntries);\n      }\n      generatorWrapper = Number(CustomMap) - findEntry.length - createCircularNode.length;\n      return findEntry = value.indexOf(\"-\", 0) >= 0 ? createCircularNode + findEntry + repeatString(\" \", generatorWrapper) : createCircularNode + repeatString(value.indexOf(\"0\", 0) >= 0 ? \"0\" : \" \", generatorWrapper) + findEntry;\n    },\n    findEntry(generatorWrapper, value, CustomMap, findEntry, iterateEntries, createCircularNode, entryIdCounter, key) {\n      return formatFunctions.createCircularNode(parseInt(generatorWrapper, 10), value, CustomMap, findEntry, 0, createCircularNode, entryIdCounter, key);\n    }\n  };\n  formatFunctions.i = formatFunctions.findEntry;\n  formatFunctions.user = formatFunctions.findEntry;\n  function getAllowedFeatures() {\n    return [\"autoplay\", \"attribution-reporting\"].filter(function (generatorWrapper) {\n      var value = document.featurePolicy;\n      return undefined !== value && typeof value.allowedFeatures == \"function\" && typeof value.allowedFeatures() == \"object\" && value.allowedFeatures().includes(generatorWrapper);\n    }).join(\";\");\n  }\n  var AdLoader = function (generatorWrapper, value) {\n    AdEnvironmentConfig.call(this);\n    this.dispatchUnhandledRejection = value;\n    this.handleThenable = this.logError = null;\n    this.resolvePromise = false;\n    this.handleThenable = \"goog_\" + randomInt++;\n    this.isDone = new Map();\n    this.tasks = null;\n    var CustomMap = getWindowForDocument();\n    var findEntry = getFromGlobalScope(\"google.ima.gptProxyInstance\", CustomMap);\n    if (findEntry != null) {\n      CustomMap = findEntry;\n    } else {\n      findEntry = new CrossDomainMessagingManager();\n      defineNamespace(\"google.ima.gptProxyInstance\", findEntry, CustomMap);\n      CustomMap = findEntry;\n    }\n    this.year = CustomMap;\n    this.onFulfilled = null;\n    this.handleAsync = new EventDispatcher(this);\n    registerDisposable(this, this.handleAsync);\n    CustomMap = this.handleThenable;\n    findEntry = (isSecureContext() ? \"https:\" : \"http:\") + formatString(\"//imasdk.googleapis.com/js/core/bridge3.641.0_%s.html\", imaSdkInstanceSingleton.getLocale());\n    generatorWrapper: {\n      var iterateEntries = window;\n      try {\n        do {\n          try {\n            if (iterateEntries.location.href.indexOf(findEntry) === 0 || iterateEntries.document.referrer.indexOf(findEntry) === 0) {\n              var createCircularNode = true;\n              break generatorWrapper;\n            }\n          } catch (value) {}\n          iterateEntries = iterateEntries.parent;\n        } while (iterateEntries !== iterateEntries.top);\n      } catch (value) {}\n      createCircularNode = false;\n    }\n    if (createCircularNode) {\n      findEntry += \"?f=\" + CustomMap;\n    }\n    createCircularNode = window.document;\n    if (adFeaturePolicies.length && createCircularNode.head) {\n      iterateEntries = getIterator(adFeaturePolicies);\n      for (var entryIdCounter = iterateEntries.next(); !entryIdCounter.done; entryIdCounter = iterateEntries.next()) {\n        if ((entryIdCounter = entryIdCounter.value) && createCircularNode.head) {\n          var key = createHtmlElement(\"META\");\n          createCircularNode.head.appendChild(key);\n          key.httpEquiv = \"origin-trial\";\n          key.content = entryIdCounter;\n        }\n      }\n    }\n    createCircularNode = getAllowedFeatures();\n    CustomMap = createElementWithOptionalClassesAndAttributes(\"IFRAME\", {\n      src: findEntry + \"#\" + CustomMap,\n      allowFullscreen: true,\n      allow: createCircularNode,\n      writeBytes: CustomMap,\n      style: \"border:0; opacity:0; margin:0; padding:0; position:relative; color-scheme: light;\",\n      title: \"Advertisement\"\n    });\n    this.handleAsync.sortArray(CustomMap, \"load\", this.toArray);\n    generatorWrapper.appendChild(CustomMap);\n    this.entryIdCounter = CustomMap;\n    this.setTimeoutWrapper = getConnectionInstance(this);\n    this.tryCall = new AdAuctionManager(this.setTimeoutWrapper, navigator);\n    registerDisposable(this, this.tryCall);\n    CustomMap = this.tryCall;\n    CustomMap.entryIdCounter.tasks.set(\"auction\", CustomMap.setTimeoutWrapper);\n    this.updateMaxSize = new AdManagerInitializer(this.setTimeoutWrapper, this.dispatchUnhandledRejection);\n    registerDisposable(this, this.updateMaxSize);\n    if (this.dispatchUnhandledRejection.identityFunction) {\n      this.handleAsync.window(this.setTimeoutWrapper, \"displayContainer\", this.totalAdBufferingTime);\n    }\n    this.handleAsync.window(this.setTimeoutWrapper, \"mouse\", this.createIterator);\n    this.handleAsync.window(this.setTimeoutWrapper, \"touch\", this.definePropertyPolyfill);\n    if (!isTVOSOrAndroidTV()) {\n      this.onFulfilled = new AdManager(generatorWrapper, this.setTimeoutWrapper, value.identityFunction.tryCall.entryIdCounter);\n      registerDisposable(this, this.onFulfilled);\n    }\n  };\n  inheritPrototype(AdLoader, AdEnvironmentConfig);\n  var getConnectionInstance = function (generatorWrapper, value) {\n    if (undefined === value) {\n      value = \"*\";\n    } else {\n      value = value;\n    }\n    var CustomMap = generatorWrapper.isDone.get(value);\n    if (CustomMap == null) {\n      CustomMap = new MessageHandler(generatorWrapper.handleThenable, value);\n      if (generatorWrapper.resolvePromise) {\n        CustomMap.entryIdCounter = getContentWindow(generatorWrapper.entryIdCounter);\n        CustomMap.connect();\n      }\n      generatorWrapper.isDone.set(value, CustomMap);\n    }\n    return CustomMap;\n  };\n  AdLoader.prototype.isIpad = function (generatorWrapper) {\n    var value;\n    if ((value = this.onFulfilled) != null) {\n      generatorWrapper = generatorWrapper.tryCall.entryIdCounter;\n      value.isDone = generatorWrapper;\n      if (value.entryIdCounter) {\n        value = value.entryIdCounter;\n        value.tasks = generatorWrapper;\n        registerVideoElement(value, generatorWrapper);\n      }\n    }\n  };\n  AdLoader.prototype.getAdEnvironment = function () {\n    if (this.tasks !== null) {\n      this.tasks.markAsCompleted();\n      this.tasks = null;\n    }\n    this.isDone.forEach(function (generatorWrapper) {\n      markAsCompletedWrapper(generatorWrapper);\n    });\n    this.isDone.clearAll();\n    removeMessagingChannel(this.year, this.handleThenable);\n    removeElement(this.entryIdCounter);\n    AdEnvironmentConfig.prototype.getAdEnvironment.call(this);\n  };\n  AdLoader.prototype.createIterator = function (generatorWrapper) {\n    var value = generatorWrapper.setPrototypeOfPolyfill;\n    var CustomMap = getAbsolutePosition(this.entryIdCounter);\n    var findEntry = document.createEvent(\"MouseEvent\");\n    findEntry.initMouseEvent(generatorWrapper.messageType, true, true, window, value.detail, value.screenX, value.screenY, value.clientX + CustomMap.inheritPrototype, value.clientY + CustomMap.globalScope, value.ctrlKey, value.altKey, value.shiftKey, value.metaKey, value.button, null);\n    this.entryIdCounter.dispatchEvent(findEntry);\n  };\n  var createTouchList = function (generatorWrapper, value) {\n    var CustomMap = getAbsolutePosition(generatorWrapper.entryIdCounter);\n    var findEntry = !!(\"TouchEvent\" in window && TouchEvent.length > 0);\n    value = value.map(function (createCircularNode) {\n      if (findEntry) {\n        return new Touch({\n          identifier: createCircularNode.identifier,\n          target: generatorWrapper.entryIdCounter,\n          clientX: createCircularNode.clientX,\n          clientY: createCircularNode.clientY,\n          screenX: createCircularNode.screenX,\n          screenY: createCircularNode.screenY,\n          pageX: createCircularNode.pageX + CustomMap.inheritPrototype,\n          pageY: createCircularNode.pageY + CustomMap.globalScope\n        });\n      } else {\n        return document.createTouch(window, generatorWrapper.entryIdCounter, createCircularNode.identifier, createCircularNode.pageX + CustomMap.inheritPrototype, createCircularNode.pageY + CustomMap.globalScope, createCircularNode.screenX, createCircularNode.screenY);\n      }\n    });\n    if (findEntry) {\n      return value;\n    }\n    var iterateEntries;\n    if ((iterateEntries = document.createTouchList) == null) {\n      return undefined;\n    } else {\n      return iterateEntries.apply(document, value);\n    }\n  };\n  AdLoader.prototype.definePropertyPolyfill = function (generatorWrapper) {\n    var value = generatorWrapper.setPrototypeOfPolyfill;\n    var CustomMap = getAbsolutePosition(this.entryIdCounter);\n    if (\"TouchEvent\" in window && TouchEvent.length > 0) {\n      value = {\n        bubbles: true,\n        cancelable: true,\n        view: window,\n        detail: value.detail,\n        ctrlKey: value.ctrlKey,\n        altKey: value.altKey,\n        shiftKey: value.shiftKey,\n        metaKey: value.metaKey,\n        touches: createTouchList(this, value.touches),\n        targetTouches: createTouchList(this, value.targetTouches),\n        changedTouches: createTouchList(this, value.changedTouches)\n      };\n      generatorWrapper = new TouchEvent(generatorWrapper.messageType, value);\n      this.entryIdCounter.dispatchEvent(generatorWrapper);\n    } else {\n      var findEntry = document.createEvent(\"TouchEvent\");\n      findEntry.initTouchEvent(generatorWrapper.messageType, true, true, window, value.detail, value.screenX, value.screenY, value.clientX + CustomMap.inheritPrototype, value.clientY + CustomMap.globalScope, value.ctrlKey, value.altKey, value.shiftKey, value.metaKey, createTouchList(this, value.touches), createTouchList(this, value.targetTouches), createTouchList(this, value.changedTouches), value.scaleRectangle, value.rotation);\n      this.entryIdCounter.dispatchEvent(findEntry);\n    }\n  };\n  AdLoader.prototype.totalAdBufferingTime = function (generatorWrapper) {\n    switch (generatorWrapper.messageType) {\n      case \"showVideo\":\n        if (this.tasks == null) {\n          this.tasks = new EventController();\n          this.handleAsync.window(this.tasks, \"click\", this.assignPolyfill);\n        } else {\n          resetEventController(this.tasks);\n        }\n        initializeEventController(this.tasks, this.dispatchUnhandledRejection.findLastElement());\n        break;\n      case \"hide\":\n        if (this.tasks !== null) {\n          this.tasks.markAsCompleted();\n          this.tasks = null;\n        }\n    }\n    var value = this.updateMaxSize;\n    handleAdManagerEvents(value.setTimeoutWrapper, generatorWrapper);\n    if (value.entryIdCounter) {\n      handleAdManagerEvents(value.entryIdCounter, generatorWrapper);\n    }\n  };\n  AdLoader.prototype.assignPolyfill = function () {\n    enqueueMessage(this.setTimeoutWrapper, \"displayContainer\", \"videoClick\");\n  };\n  AdLoader.prototype.toArray = function () {\n    this.logError = getEarliestDomLoadingOrInteractiveTime();\n    this.handleThenable = getCurrentTimeWithPerformanceTiming();\n    var generatorWrapper = getContentWindow(this.entryIdCounter);\n    this.isDone.forEach(function (CustomMap) {\n      CustomMap.entryIdCounter = generatorWrapper;\n      CustomMap.connect();\n    });\n    var value;\n    if (!((value = this.onFulfilled) == null)) {\n      setAdManagerListener(value, generatorWrapper);\n    }\n    this.resolvePromise = true;\n  };\n  var clientJsUrl = identityFunction([\"https://s0.2mdn.net/instream/video/client.js\"]);\n  var instance = null;\n  var AdManager = function () {\n    AdEnvironmentConfig.call(this);\n    this.entryIdCounter = null;\n    this.tasks = new Map();\n    this.setTimeoutWrapper = new Map();\n    this.Generator = this.onFulfilled = false;\n    this.handleAsync = null;\n    this.isDone = new EventDispatcher(this);\n    registerDisposable(this, this.isDone);\n  };\n  inheritPrototype(AdManager, AdEnvironmentConfig);\n  var getInstance = function () {\n    if (instance == null) {\n      instance = new AdManager();\n    }\n    return instance;\n  };\n  var sendViewabilityMeasurement = function (generatorWrapper, value, CustomMap) {\n    var findEntry = {};\n    findEntry.queryId = value;\n    findEntry.viewabilityData = CustomMap;\n    if (generatorWrapper.entryIdCounter) {\n      enqueueMessage(generatorWrapper.entryIdCounter, \"activityMonitor\", \"viewabilityMeasurement\", findEntry);\n    }\n  };\n  AdManager.prototype.destroy = function () {\n    this.isDone.compareValues(this.entryIdCounter, \"activityMonitor\", this.dispatchUnhandledRejection);\n    this.Generator = false;\n    this.tasks.clearAll();\n  };\n  AdManager.prototype.getAdEnvironment = function () {\n    this.destroy();\n    AdEnvironmentConfig.prototype.getAdEnvironment.call(this);\n  };\n  AdManager.prototype.initialize = function (generatorWrapper) {\n    if (!this.Generator) {\n      if (this.entryIdCounter = generatorWrapper || null) {\n        this.isDone.window(this.entryIdCounter, \"activityMonitor\", this.dispatchUnhandledRejection);\n        sendPageSignals(this);\n      }\n      if (!(globalScope.ima && globalScope.ima.video && globalScope.ima.video.client && globalScope.ima.video.client.tagged)) {\n        defineNamespace(\"ima.video.client.sdkTag\", true);\n        var value = globalScope.document;\n        generatorWrapper = createElement(document, \"SCRIPT\");\n        var CustomMap = createSafeHtmlFromTemplate(clientJsUrl);\n        setElementSrcFromTrustedUrl(generatorWrapper, CustomMap);\n        generatorWrapper.async = true;\n        generatorWrapper.type = \"text/javascript\";\n        value = value.getElementsByTagName(\"script\")[0];\n        value.parentNode.insertBefore(generatorWrapper, value);\n      }\n      applyAdEnvironmentConfig();\n      getSingletonInstance(AdManager).resolvePromise = imaSdkInstanceSingleton.entryIdCounter;\n      this.onFulfilled = true;\n      getSingletonInstance(AdManager).setTimeoutWrapper = true;\n      this.handleAsync = null;\n      generatorWrapper = getSingletonInstance(AdManager);\n      value = getAdReportingMode(generatorWrapper) == \"h\" || getAdReportingMode(generatorWrapper) == \"b\";\n      CustomMap = !(getAdEnvironment(), false);\n      if (value && CustomMap) {\n        generatorWrapper.executeCallbacks = true;\n        generatorWrapper.handleThenable = new checksum();\n      }\n      this.Generator = true;\n    }\n  };\n  var isFullscreen = function (generatorWrapper) {\n    if (generatorWrapper == null) {\n      return false;\n    }\n    if ((isIphone || isIpod) && generatorWrapper.webkitDisplayingFullscreen !== null) {\n      return generatorWrapper.webkitDisplayingFullscreen;\n    }\n    generatorWrapper = getElementPosition(generatorWrapper);\n    var value = window.screen.availHeight || window.screen.height;\n    return (window.screen.availWidth || window.screen.width) - generatorWrapper.width <= 0 && value - generatorWrapper.height <= 42;\n  };\n  var getElementPosition = function (generatorWrapper) {\n    var value = {\n      left: generatorWrapper.offsetLeft,\n      top: generatorWrapper.offsetTop,\n      width: generatorWrapper.offsetWidth,\n      height: generatorWrapper.offsetHeight\n    };\n    try {\n      if (typeof generatorWrapper.getBoundingClientRect === \"function\" && containsElement(getDocument(generatorWrapper), generatorWrapper)) {\n        value = generatorWrapper.getBoundingClientRect();\n      }\n    } catch (CustomMap) {}\n    return value;\n  };\n  var calculateViewabilityData = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    if (undefined === iterateEntries) {\n      iterateEntries = {};\n    } else {\n      iterateEntries = iterateEntries;\n    }\n    if (generatorWrapper.Generator) {\n      if (findEntry && iterateEntries.opt_osdId == null) {\n        iterateEntries.opt_osdId = findEntry;\n      }\n      if (generatorWrapper.handleAsync) {\n        return generatorWrapper.handleAsync(value, CustomMap, iterateEntries);\n      }\n      if (generatorWrapper = findEntry ? generatorWrapper.setTimeoutWrapper.get(findEntry) : imaSdkInstanceSingleton.setTimeoutWrapper) {\n        if (iterateEntries.opt_fullscreen == null) {\n          iterateEntries.opt_fullscreen = isFullscreen(generatorWrapper);\n        }\n        if (iterateEntries.opt_adElement == null) {\n          iterateEntries.opt_adElement = generatorWrapper;\n        }\n      }\n      return Hw.hasBrands(469, createFunctionWithArguments(sendVastAdEvent, value, CustomMap, iterateEntries)) || {};\n    }\n    return {};\n  };\n  var isInitialized = function (generatorWrapper) {\n    var value;\n    if (imaSdkInstanceSingleton.entryIdCounter !== 0) {\n      value = getSingletonInstance(AdManager).setTimeoutWrapper;\n    } else {\n      value = generatorWrapper.onFulfilled;\n    }\n    return value;\n  };\n  var registerElement = function (generatorWrapper, value) {\n    var CustomMap = String(Math.floorRectangle(1000000000 * Math.random()));\n    generatorWrapper.setTimeoutWrapper.set(CustomMap, value);\n    if (imaSdkInstanceSingleton.entryIdCounter !== 0) {\n      getSingletonInstance(AdManager).createDeferred[CustomMap] = generatorWrapper;\n    }\n    return CustomMap;\n  };\n  var unregisterElement = function (generatorWrapper, value, CustomMap) {\n    if (CustomMap) {\n      if (generatorWrapper.tasks.get(CustomMap) === value) {\n        generatorWrapper.tasks.delete(CustomMap);\n      }\n    } else {\n      var findEntry = [];\n      generatorWrapper.tasks.forEach(function (iterateEntries, createCircularNode) {\n        if (iterateEntries === value) {\n          findEntry.push(createCircularNode);\n        }\n      });\n      findEntry.forEach(generatorWrapper.tasks.delete, generatorWrapper.tasks);\n    }\n  };\n  var getOverlayAdMetadata = function (generatorWrapper, value) {\n    generatorWrapper = generatorWrapper.tasks.get(value);\n    if (typeof generatorWrapper === \"function\") {\n      return generatorWrapper();\n    } else {\n      return {};\n    }\n  };\n  var sendPageSignals = function (generatorWrapper) {\n    if (typeof window.Goog_AdSense_Lidar_getUrlSignalsArray === \"function\") {\n      var value = {};\n      value.pageSignals = window.Goog_AdSense_Lidar_getUrlSignalsArray();\n      var CustomMap;\n      if (!((CustomMap = generatorWrapper.entryIdCounter) == null)) {\n        enqueueMessage(CustomMap, \"activityMonitor\", \"pageSignals\", value);\n      }\n    }\n  };\n  AdManager.prototype.dispatchUnhandledRejection = function (generatorWrapper) {\n    var value = generatorWrapper.setPrototypeOfPolyfill;\n    var CustomMap = value.queryId;\n    var findEntry = {};\n    var iterateEntries = null;\n    findEntry.eventId = value.eventId;\n    switch (generatorWrapper.messageType) {\n      case \"getPageSignals\":\n        sendPageSignals(this);\n        break;\n      case \"reportVastEvent\":\n        iterateEntries = value.vastEvent;\n        generatorWrapper = value.osdId;\n        var createCircularNode = {};\n        createCircularNode.opt_fullscreen = value.isFullscreen;\n        if (value.isOverlay) {\n          createCircularNode.opt_bounds = value.overlayBounds;\n        }\n        findEntry.viewabilityData = calculateViewabilityData(this, iterateEntries, CustomMap, generatorWrapper, createCircularNode);\n        var entryIdCounter;\n        if (!((entryIdCounter = this.entryIdCounter) == null)) {\n          enqueueMessage(entryIdCounter, \"activityMonitor\", \"viewability\", findEntry);\n        }\n        break;\n      case \"fetchAdTagUrl\":\n        CustomMap = {};\n        CustomMap.eventId = value.eventId;\n        generatorWrapper = value.osdId;\n        if (hasOwnPropertySafe(value, \"isFullscreen\")) {\n          iterateEntries = value.isFullscreen;\n        }\n        if (hasOwnPropertySafe(value, \"loggingId\")) {\n          value = value.loggingId;\n          CustomMap.loggingId = value;\n          markAsCompleted.getAdInstance().report(43, {\n            step: \"beforeLookup\",\n            logid: value,\n            time: Date.now()\n          });\n        }\n        CustomMap.engagementString = generateEngagementString(this, generatorWrapper, iterateEntries);\n        if (this.entryIdCounter) {\n          enqueueMessage(this.entryIdCounter, \"activityMonitor\", \"engagement\", CustomMap);\n        }\n    }\n  };\n  var generateEngagementString = function (generatorWrapper, value, CustomMap) {\n    var findEntry,\n      iterateEntries = value ? (findEntry = generatorWrapper.setTimeoutWrapper.get(value)) != null ? findEntry : null : imaSdkInstanceSingleton.setTimeoutWrapper;\n    generatorWrapper = {};\n    if (CustomMap != null) {\n      generatorWrapper.fullscreen = CustomMap;\n    }\n    CustomMap = \"\";\n    try {\n      CustomMap = collectAndSerializeVisibilityMetrics(function () {\n        return iterateEntries;\n      }, generatorWrapper);\n    } catch (createCircularNode) {\n      CustomMap = createCircularNode;\n      CustomMap = \"sdktle;\" + truncateString(CustomMap.name, 12) + \";\" + truncateString(CustomMap.message, 40);\n    }\n    return CustomMap;\n  };\n  defineNamespace(\"ima.common.getVideoMetadata\", function (generatorWrapper) {\n    return getOverlayAdMetadata(getInstance(), generatorWrapper);\n  });\n  defineNamespace(\"ima.common.triggerViewabilityMeasurementUpdate\", function (generatorWrapper, value) {\n    sendViewabilityMeasurement(getInstance(), generatorWrapper, value);\n  });\n  var MediaStateManager = function (generatorWrapper) {\n    this.entryIdCounter = generatorWrapper;\n    this.setTimeoutWrapper = \"\";\n    this.tasks = -1;\n    this.createDeferred = false;\n  };\n  var setupMediaState = function (generatorWrapper, value) {\n    if (generatorWrapper.tasks >= 0) {\n      var CustomMap = value == null ? function () {} : value;\n      var findEntry = function () {\n        attemptMediaPlayback(generatorWrapper, CustomMap);\n        generatorWrapper.entryIdCounter.removeEventListener(\"loadedmetadata\", findEntry, false);\n      };\n      generatorWrapper.entryIdCounter.addEventListener(\"loadedmetadata\", findEntry, false);\n      generatorWrapper.entryIdCounter.src = generatorWrapper.setTimeoutWrapper;\n      generatorWrapper.entryIdCounter.load();\n    } else if (value != null) {\n      value();\n    }\n  };\n  var attemptMediaPlayback = function (generatorWrapper, value) {\n    var CustomMap = generatorWrapper.entryIdCounter.seekable.length > 0;\n    if (generatorWrapper.createDeferred) {\n      if (CustomMap) {\n        generatorWrapper.entryIdCounter.currentTime = generatorWrapper.tasks;\n        resetMediaState(generatorWrapper);\n        value();\n      } else {\n        setTimeout(function () {\n          attemptMediaPlayback(generatorWrapper, value);\n          return;\n        }, 100);\n      }\n    } else {\n      resetMediaState(generatorWrapper);\n      value();\n    }\n  };\n  var resetMediaState = function (generatorWrapper) {\n    generatorWrapper.tasks = -1;\n    generatorWrapper.setTimeoutWrapper = \"\";\n    generatorWrapper.createDeferred = false;\n  };\n  var defaultSize = new Size(5, 5);\n  var VideoPlayer = function (generatorWrapper) {\n    AdEnvironmentConfig.call(this);\n    this.entryIdCounter = generatorWrapper;\n    this.handleAsync = this.definePropertyPolyfill = null;\n    this.onFulfilled = 0;\n    this.logError = this.dispatchUnhandledRejection = this.updateMaxSize = this.loaded = this.resolvePromise = false;\n    this.totalAdBufferingTime = this.handleThenable = this.handleThenable = this.setTimeoutWrapper = null;\n    this.createIterator = false;\n    this.isDone = null;\n    this.tryCall = new MediaStateManager(generatorWrapper);\n    this.tasks = new EventDispatcher(this);\n    registerDisposable(this, this.tasks);\n    this.size = this.getRectangleSize();\n    this.fullscreen = isFullscreen(this.entryIdCounter);\n  };\n  inheritPrototype(VideoPlayer, AdEnvironmentConfig);\n  setTimeoutWrapper = VideoPlayer.prototype;\n  setTimeoutWrapper.ensureString = function () {\n    var generatorWrapper = this.tryCall;\n    generatorWrapper.setTimeoutWrapper = generatorWrapper.entryIdCounter.currentSrc;\n    generatorWrapper.createDeferred = generatorWrapper.entryIdCounter.seekable.length > 0;\n    if (generatorWrapper.entryIdCounter.ended) {\n      generatorWrapper.tasks = -1;\n    } else {\n      generatorWrapper.tasks = generatorWrapper.entryIdCounter.currentTime;\n    }\n  };\n  setTimeoutWrapper.isIphone = function (generatorWrapper) {\n    setupMediaState(this.tryCall, generatorWrapper);\n  };\n  setTimeoutWrapper.load = function (generatorWrapper, value) {\n    var CustomMap = resolvePromise.getAdInstance().entryIdCounter;\n    CustomMap.tryCall = true;\n    flushData(CustomMap);\n    logError(\"hvd_lc\");\n    resetPlaybackState(this);\n    this.updateMaxSize = false;\n    if (value) {\n      logError(\"hvd_ad\");\n      if (value instanceof MediaAdDimensions) {\n        logError(\"hvd_mad\");\n        if (CustomMap = value.getMediaUrl()) {\n          logError(\"hvd_admu\");\n          logError(\"hvd_src\");\n          this.entryIdCounter.src = CustomMap;\n          this.entryIdCounter.load();\n          return;\n        }\n      } else if (value instanceof ExtendedAdDimensions) {\n        logError(\"hvd_dad\");\n        CustomMap = value.createDeferred;\n        var findEntry = value.tasks;\n        var iterateEntries = value.setTimeoutWrapper;\n        var createCircularNode = value.entryIdCounter;\n        var entryIdCounter = value.compareVersions;\n        var key = value.identityFunction;\n        if (CustomMap && findEntry && iterateEntries && createCircularNode && entryIdCounter && key && (logError(\"hvd_addu\"), value.generatorReturn)) {\n          logError(\"hvd_admse\");\n          value = iterateEntries + '; codecs=\"' + entryIdCounter + '\"';\n          createCircularNode = createCircularNode + '; codecs=\"' + key + '\"';\n          if (isMediaSourceSupported() && isMediaSourceSupported() && MediaSource.isTypeSupported(value) && isMediaSourceSupported() && MediaSource.isTypeSupported(createCircularNode)) {\n            logError(\"hvd_ymse\");\n            logError(\"hvd_mse\");\n            generatorWrapper = false;\n            try {\n              if (-1 !== window.location.search.indexOf(\"goog_limavideo=true\")) {\n                generatorWrapper = true;\n              }\n            } catch (value) {}\n            if (globalScope.customElements) {\n              if (generatorWrapper) {\n                generatorWrapper = true;\n              } else {\n                if (handleThenable(limaFeatureFlag)) {\n                  markAsCompleted.getAdInstance().report(153, {\n                    limvid: \"vd\"\n                  });\n                }\n                if (handleThenable(limaFeatureFlag) || handleThenable(vm) || handleThenable(tm) || handleThenable(um)) {\n                  generatorWrapper = true;\n                } else {\n                  generatorWrapper = false;\n                }\n              }\n            } else {\n              generatorWrapper = false;\n            }\n            if (generatorWrapper && this.entryIdCounter instanceof CustomVideoElement) {\n              this.entryIdCounter.bidRequest = CustomMap;\n              this.entryIdCounter.unknownVariable = findEntry;\n            } else {\n              this.definePropertyPolyfill = new MediaSourceManager(this.entryIdCounter, [new MediaSourceConfig(CustomMap, value, 350000, new EmptyFunction()), new MediaSourceConfig(findEntry, createCircularNode, 82000, new EmptyFunction())]);\n              registerDisposable(this, this.definePropertyPolyfill);\n              generatorWrapper = this.entryIdCounter;\n              CustomMap = this.definePropertyPolyfill;\n              if (!CustomMap.tasks) {\n                CustomMap.tasks = createObjectURLWithValidation(CustomMap.entryIdCounter).toString();\n              }\n              CustomMap = CustomMap.tasks;\n              generatorWrapper.src = CustomMap;\n            }\n            this.entryIdCounter.load();\n            return;\n          }\n          logError(\"hvd_nmse\");\n        }\n      } else {\n        logError(\"hvd_uad\");\n      }\n    }\n    if (generatorWrapper) {\n      logError(\"hvd_src\");\n      this.entryIdCounter.src = generatorWrapper;\n    } else {\n      logError(\"hvd_vn\");\n    }\n    this.entryIdCounter.load();\n  };\n  setTimeoutWrapper.setVolume = function (generatorWrapper) {\n    this.entryIdCounter.volume = Math.max(generatorWrapper, 0);\n    if (generatorWrapper === 0) {\n      this.entryIdCounter.muted = true;\n    } else {\n      this.entryIdCounter.muted = false;\n    }\n  };\n  setTimeoutWrapper.throwIncidentError = function (generatorWrapper) {\n    this.entryIdCounter.style.left = String(generatorWrapper.left) + \"px\";\n    this.entryIdCounter.style.top = String(generatorWrapper.top) + \"px\";\n    this.entryIdCounter.style.width = String(generatorWrapper.width) + \"px\";\n    this.entryIdCounter.style.height = String(generatorWrapper.height) + \"px\";\n  };\n  setTimeoutWrapper.createWarningError = function () {\n    this.entryIdCounter.style.width = \"100%\";\n    this.entryIdCounter.style.height = \"100%\";\n    this.entryIdCounter.style.left = \"0\";\n    this.entryIdCounter.style.right = \"0\";\n  };\n  setTimeoutWrapper.getVolume = function () {\n    if (this.entryIdCounter.muted) {\n      return 0;\n    } else {\n      return this.entryIdCounter.volume;\n    }\n  };\n  var handleAutoPlay = function (generatorWrapper) {\n    generatorWrapper.createIterator = false;\n    if (generatorWrapper.updateMaxSize || isInternetExplorer()) {\n      generatorWrapper.logError = false;\n      generatorWrapper.setTimeoutWrapper = generatorWrapper.entryIdCounter.play();\n      if (generatorWrapper.setTimeoutWrapper != null) {\n        generatorWrapper.handleThenable = null;\n        generatorWrapper.setTimeoutWrapper.then(function () {\n          generatorWrapper.setTimeoutWrapper = null;\n          generatorWrapper.cloneIfNotFrozen(generatorWrapper.handleThenable);\n          generatorWrapper.handleThenable = null;\n        }).catch(function (value) {\n          generatorWrapper.setTimeoutWrapper = null;\n          var CustomMap = \"\";\n          if (value != null && value.name != null) {\n            CustomMap = value.name;\n          }\n          if (CustomMap === \"AbortError\" || CustomMap === \"NotAllowedError\") {\n            generatorWrapper.dispatchEvent(\"autoplayDisallowed\");\n          } else {\n            generatorWrapper.year();\n          }\n        });\n      }\n    } else {\n      generatorWrapper.logError = true;\n    }\n  };\n  setTimeoutWrapper = VideoPlayer.prototype;\n  setTimeoutWrapper.pause = function () {\n    if (this.setTimeoutWrapper == null) {\n      this.createIterator = true;\n      this.entryIdCounter.pause();\n    }\n  };\n  setTimeoutWrapper.getCurrentTime = function () {\n    return this.entryIdCounter.currentTime;\n  };\n  setTimeoutWrapper.getDuration = function () {\n    if (isNaN(this.entryIdCounter.duration)) {\n      return -1;\n    } else {\n      return this.entryIdCounter.duration;\n    }\n  };\n  setTimeoutWrapper.getRectangleSize = function () {\n    return new Size(this.entryIdCounter.offsetWidth, this.entryIdCounter.offsetHeight);\n  };\n  setTimeoutWrapper.getAdEnvironment = function () {\n    if (this.totalAdBufferingTime) {\n      disconnectResizeObservers(this.totalAdBufferingTime);\n    }\n    resetVideoTracking(this);\n    AdEnvironmentConfig.prototype.getAdEnvironment.call(this);\n  };\n  var resetVideoTracking = function (generatorWrapper) {\n    if (generatorWrapper.handleAsync != null) {\n      resetEventController(generatorWrapper.handleAsync);\n      generatorWrapper.handleAsync = null;\n    }\n    if (generatorWrapper.handleThenable != null) {\n      generatorWrapper.handleThenable.markAsCompleted();\n    }\n    removeAllListeners(generatorWrapper.tasks);\n    resetPlaybackState(generatorWrapper);\n  };\n  var resetPlaybackState = function (generatorWrapper) {\n    generatorWrapper.loaded = false;\n    generatorWrapper.dispatchUnhandledRejection = false;\n    generatorWrapper.resolvePromise = false;\n    generatorWrapper.logError = false;\n    generatorWrapper.onFulfilled = 0;\n    generatorWrapper.setTimeoutWrapper = null;\n    generatorWrapper.handleThenable = null;\n    markAsCompletedWrapper(generatorWrapper.isDone);\n  };\n  VideoPlayer.prototype.isArrayLike = function (generatorWrapper) {\n    this.dispatchEvent(generatorWrapper.type);\n  };\n  var handleFullscreenStart = function (generatorWrapper) {\n    if (!generatorWrapper.dispatchUnhandledRejection) {\n      generatorWrapper.dispatchUnhandledRejection = true;\n      generatorWrapper.dispatchEvent(\"start\");\n      try {\n        if (handleThenable(limaFeatureFlag) && globalScope.customElements) {\n          var value = globalScope.customElements.get(\"lima-video\");\n          if (generatorWrapper.entryIdCounter instanceof value) {\n            markAsCompleted.getAdInstance().report(153, {\n              limvid: \"limastart\"\n            });\n          } else {\n            markAsCompleted.getAdInstance().report(153, {\n              limvid: \"videostart\"\n            });\n          }\n        }\n      } catch (CustomMap) {\n        markAsCompleted.getAdInstance().report(153, {\n          limvid: \"startfail\"\n        });\n      }\n      value = typeof generatorWrapper.entryIdCounter.getAttribute === \"function\" && generatorWrapper.entryIdCounter.getAttribute(\"playsinline\") != null;\n      if (undefined === value) {\n        value = false;\n      } else {\n        value = value;\n      }\n      if (!((!isTouchEnabledDevice() && !isIOSVersionAtLeast(10) || !value && (AppSignals.getAdInstance(), false) ? (AppSignals.getAdInstance(), includesIgnoreCase(getUserAgent(), \"Xbox\")) || (isIphone || isIpod ? 0 : (!isAndroid || isAndroid && matchesUserAgentVersion(androidVersionRegex, 4)) && (isAppleTV() ? (AppSignals.getAdInstance(), false) : !isTVOSOrAndroidTV())) : 1) || !isAndroid || isAndroid && matchesUserAgentVersion(androidVersionRegex, 3) || (isIphone || isIpod) && !isIOSVersionAtLeast(4))) {\n        AdErrorEvent(generatorWrapper);\n      }\n    }\n  };\n  setTimeoutWrapper = VideoPlayer.prototype;\n  setTimeoutWrapper.parseAndValidateArray = function () {\n    this.updateMaxSize = true;\n    if (this.logError) {\n      handleAutoPlay(this);\n    }\n    this.logError = false;\n    reportVideoSize(this);\n  };\n  setTimeoutWrapper.serializeTransformations = function () {\n    if (!this.loaded) {\n      this.loaded = true;\n      this.dispatchEvent(\"loaded\");\n    }\n  };\n  setTimeoutWrapper.cloneIfNotFrozen = function (generatorWrapper) {\n    if (this.setTimeoutWrapper != null) {\n      this.handleThenable = generatorWrapper;\n    } else {\n      this.dispatchEvent(\"play\");\n      if (!(isIphoneIpadIpod || isTouchEnabledDevice() || isAndroidNonChrome)) {\n        handleFullscreenStart(this);\n      }\n    }\n  };\n  setTimeoutWrapper.isValidError = function (generatorWrapper) {\n    if (!this.dispatchUnhandledRejection && (isIphoneIpadIpod || isTouchEnabledDevice() || isAndroidNonChrome)) {\n      if (this.getCurrentTime() <= 0) {\n        return;\n      }\n      if (isAndroidNonChrome && this.entryIdCounter.ended && this.getDuration() === 1) {\n        this.year(generatorWrapper);\n        return;\n      }\n      handleFullscreenStart(this);\n    }\n    if (isIphoneIpadIpod || includesIgnoreCase(getUserAgent(), \"Nintendo WiiU\")) {\n      if (this.getCurrentTime() - this.onFulfilled > 1.5) {\n        this.resolvePromise = true;\n        this.entryIdCounter.currentTime = this.onFulfilled;\n        return;\n      }\n      this.resolvePromise = false;\n      if (this.getCurrentTime() > this.onFulfilled) {\n        this.onFulfilled = this.getCurrentTime();\n      }\n    }\n    this.dispatchEvent(\"timeUpdate\");\n  };\n  setTimeoutWrapper.once = function () {\n    this.dispatchEvent(\"volumeChange\");\n  };\n  setTimeoutWrapper.ErrorDetails = function () {\n    if (this.dispatchUnhandledRejection && isIphoneIpadIpod && !this.createIterator && (calculateBufferedAheadTime(this) < 2 || this.resolvePromise)) {\n      this.isDone = new Timer(250);\n      this.tasks.window(this.isDone, \"tick\", this.wrapGeneratorToPromise);\n      this.isDone.startTimer();\n      var generatorWrapper = true;\n    } else {\n      generatorWrapper = false;\n    }\n    if (!(generatorWrapper || this.setTimeoutWrapper)) {\n      this.dispatchEvent(\"pause\");\n    }\n  };\n  setTimeoutWrapper.arrayOfIntegersTransformationInstance = function () {\n    var generatorWrapper = true;\n    if (isIphoneIpadIpod || includesIgnoreCase(getUserAgent(), \"Nintendo WiiU\")) {\n      generatorWrapper = this.onFulfilled >= this.entryIdCounter.duration - 1.5;\n    }\n    if (!this.resolvePromise && generatorWrapper) {\n      this.dispatchEvent(\"end\");\n    }\n  };\n  var AdErrorEvent = function (generatorWrapper) {\n    generatorWrapper.dispatchEvent(\"beginFullscreen\");\n  };\n  VideoPlayer.prototype.toArray = function () {\n    this.dispatchEvent(\"endFullscreen\");\n  };\n  VideoPlayer.prototype.year = function () {\n    this.dispatchEvent(\"error\");\n  };\n  VideoPlayer.prototype.assignPolyfill = function () {\n    this.dispatchEvent(\"click\");\n  };\n  var reportVideoSize = function (generatorWrapper) {\n    if (generatorWrapper.entryIdCounter instanceof HTMLElement) {\n      generatorWrapper.totalAdBufferingTime = waitForElementResize(generatorWrapper.entryIdCounter, defaultSize);\n      generatorWrapper.totalAdBufferingTime.then(function (value) {\n        if (!generatorWrapper.handleIteratorResult()) {\n          settlePromise(resolvePromise.getAdInstance(), \"ps\", value.width + \"x\" + value.height);\n        }\n      });\n    }\n  };\n  VideoPlayer.prototype.sliceArguments = function () {\n    var generatorWrapper = this.getRectangleSize();\n    var value = isFullscreen(this.entryIdCounter);\n    if (generatorWrapper.width !== this.size.width || generatorWrapper.height !== this.size.height) {\n      if (!this.fullscreen && value) {\n        AdErrorEvent(this);\n      } else if (this.fullscreen && !value) {\n        this.toArray();\n      }\n      this.size = generatorWrapper;\n      this.fullscreen = value;\n    }\n  };\n  VideoPlayer.prototype.wrapGeneratorToPromise = function () {\n    if (!this.entryIdCounter.ended && this.entryIdCounter.paused && (isIphoneIpadIpod || isIos ? this.entryIdCounter.currentTime < this.entryIdCounter.duration : 1)) {\n      var generatorWrapper = this.entryIdCounter.duration - this.entryIdCounter.currentTime;\n      var value = calculateBufferedAheadTime(this);\n      if (value > 0 && (value >= 2 || generatorWrapper < 2)) {\n        markAsCompletedWrapper(this.isDone);\n        handleAutoPlay(this);\n      }\n    } else {\n      markAsCompletedWrapper(this.isDone);\n    }\n  };\n  var calculateBufferedAheadTime = function (generatorWrapper) {\n    var value;\n    generatorWrapper: {\n      for (value = generatorWrapper.entryIdCounter.buffered.length - 1; value >= 0;) {\n        if (generatorWrapper.entryIdCounter.buffered.startTimer(value) <= generatorWrapper.entryIdCounter.currentTime) {\n          value = generatorWrapper.entryIdCounter.buffered.end(value);\n          break generatorWrapper;\n        }\n        value--;\n      }\n      value = 0;\n    }\n    return value - generatorWrapper.entryIdCounter.currentTime;\n  };\n  VideoPlayer.prototype.isObjectOrFunction = function () {\n    markAsCompleted.getAdInstance().report(139);\n    AdErrorEvent(t"