"orEvent(8, generatorWrapper, (CustomMap = findEntry) == null ? undefined : CustomMap.message);\n    }\n  };\n  var cacheManagerInstance = null;\n  function loadCacheItems(generatorWrapper) {\n    var value = new AdRequestConfiguration();\n    if (generatorWrapper) {\n      var CustomMap = [];\n      var findEntry = RegExp(\"^_GESPSK-(.+)$\");\n      try {\n        for (var iterateEntries = 0; iterateEntries < generatorWrapper.length; iterateEntries++) {\n          var createCircularNode = (findEntry.exec(generatorWrapper.key(iterateEntries)) || [])[1];\n          if (createCircularNode) {\n            CustomMap.push(createCircularNode);\n          }\n        }\n      } catch (value) {}\n      CustomMap = getIterator(CustomMap);\n      iterateEntries = CustomMap.next();\n      findEntry = {\n        removeElementAtIndex: undefined\n      };\n      for (findEntry = {}; !iterateEntries.done; iterateEntries = CustomMap.next()) {\n        findEntry.removeElementAtIndex = iterateEntries.value;\n        if ((iterateEntries = getCacheManagerInstance().get(findEntry.removeElementAtIndex, generatorWrapper).forEachElementReverse) && !isDataPresent(value, findEntry.removeElementAtIndex) && (createCircularNode = evaluateCacheItemState(iterateEntries), createCircularNode !== 2 && createCircularNode !== 3)) {\n          setAdProperty(iterateEntries, 9, false);\n          if ((createCircularNode = getAdPropertyValue(iterateEntries, 2)) && createCircularNode.length > 1024) {\n            var entryIdCounter = {};\n            logErrorEvent(55, findEntry.removeElementAtIndex, null, (entryIdCounter.getSessionStorageData = String(createCircularNode.length), entryIdCounter));\n            createCircularNode = iterateEntries.createFunctionWithArguments(createAdError(108));\n            updateElement(createCircularNode, 2);\n          }\n          addElementToAd(value, 2, AdErrorResponse, iterateEntries);\n          iterateEntries = getAdPropertyValue(iterateEntries, 2);\n          entryIdCounter = createCircularNode = undefined;\n          var key = {};\n          logErrorEvent(19, findEntry.removeElementAtIndex, null, (key.incrementPropertyJ = iterateEntries ? \"1\" : \"0\", key.getSessionStorageData = String((entryIdCounter = (createCircularNode = iterateEntries) == null ? undefined : createCircularNode.length) != null ? entryIdCounter : -1), key));\n        }\n      }\n    }\n    if (!parseData(value, AdErrorResponse, 2).length) {\n      return null;\n    }\n    generatorWrapper = {};\n    logErrorEvent(50, \"\", null, (generatorWrapper.mergeAdContainerArrays = String(parseData(value, AdErrorResponse, 2).length), generatorWrapper));\n    return base64Encode(value.entryIdCounter(), 3);\n  }\n  function isDataPresent(generatorWrapper, value) {\n    return parseData(generatorWrapper, AdErrorResponse, 2).some(function (CustomMap) {\n      return getAdPropertyValue(CustomMap, 1) === value && getAdPropertyValue(CustomMap, 2) != null;\n    });\n  }\n  var Deferred = function () {\n    var generatorWrapper = this;\n    this.promise = new Promise(function (value, CustomMap) {\n      generatorWrapper.resolve = value;\n      generatorWrapper.reject = CustomMap;\n    });\n  };\n  var InputError = function (generatorWrapper) {\n    generatorWrapper = Error.call(this, generatorWrapper);\n    this.message = generatorWrapper.message;\n    if (\"stack\" in generatorWrapper) {\n      this.stack = generatorWrapper.stack;\n    }\n    Object.setPrototypeOf(this, InputError.prototype);\n    this.name = \"InputError\";\n  };\n  inheritPrototype(InputError, Error);\n  var BasePromise = function () {\n    this.isEmptyOrWhitespace = false;\n  };\n  var DeferredWithResult = function () {\n    BasePromise.apply(this, arguments);\n    this.errorHandler = new Deferred();\n  };\n  inheritPrototype(DeferredWithResult, BasePromise);\n  var notifyListeners = function (generatorWrapper, value) {\n    if (!generatorWrapper.isEmptyOrWhitespace) {\n      generatorWrapper.isEmptyOrWhitespace = true;\n      generatorWrapper.adServerCatIdWrapper = value;\n      generatorWrapper.errorHandler.resolve(value);\n    }\n  };\n  globalObject.Object.defineProperties(DeferredWithResult.prototype, {\n    promise: {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return this.errorHandler.promise;\n      }\n    },\n    processElements: {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return this.isEmptyOrWhitespace;\n      }\n    },\n    hasError: {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return this.undefinedFunction1;\n      }\n    }\n  });\n  var Result = function () {\n    DeferredWithResult.apply(this, arguments);\n  };\n  inheritPrototype(Result, DeferredWithResult);\n  var resolveResult = function (generatorWrapper, value) {\n    notifyListeners(generatorWrapper, value);\n  };\n  var resolveWithAnotherPromise = function (generatorWrapper, value) {\n    value.then(function (CustomMap) {\n      notifyListeners(generatorWrapper, CustomMap);\n    });\n  };\n  Result.prototype.createFunctionWithArguments = function (generatorWrapper) {\n    if (!this.isEmptyOrWhitespace) {\n      this.isEmptyOrWhitespace = true;\n      this.adServerCatIdWrapper = null;\n      this.undefinedFunction1 = generatorWrapper;\n      this.errorHandler.reject(generatorWrapper);\n    }\n  };\n  var BaseResult = function (generatorWrapper) {\n    this.isEmptyOrWhitespace = false;\n    this.entryIdCounter = generatorWrapper;\n  };\n  inheritPrototype(BaseResult, BasePromise);\n  BaseResult.prototype.processElements = function () {\n    return this.entryIdCounter.isEmptyOrWhitespace;\n  };\n  globalObject.Object.defineProperties(BaseResult.prototype, {\n    hasError: {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return this.entryIdCounter.undefinedFunction1;\n      }\n    }\n  });\n  var SuccessResult = function (generatorWrapper) {\n    BaseResult.call(this, generatorWrapper);\n    this.entryIdCounter = generatorWrapper;\n  };\n  inheritPrototype(SuccessResult, BaseResult);\n  globalObject.Object.defineProperties(SuccessResult.prototype, {\n    value: {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return this.entryIdCounter.adServerCatIdWrapper;\n      }\n    }\n  });\n  var NullableSuccessResult = function (generatorWrapper) {\n    BaseResult.call(this, generatorWrapper);\n    this.entryIdCounter = generatorWrapper;\n  };\n  inheritPrototype(NullableSuccessResult, BaseResult);\n  globalObject.Object.defineProperties(NullableSuccessResult.prototype, {\n    value: {\n      configurable: true,\n      enumerable: true,\n      get() {\n        var generatorWrapper;\n        if ((generatorWrapper = this.entryIdCounter.adServerCatIdWrapper) != null) {\n          return generatorWrapper;\n        } else {\n          return null;\n        }\n      }\n    }\n  });\n  var Notification = function () {\n    DeferredWithResult.apply(this, arguments);\n  };\n  inheritPrototype(Notification, DeferredWithResult);\n  Notification.prototype.notify = function () {\n    notifyListeners(this, null);\n  };\n  var TaskManager = function () {\n    tryCall.apply(this, arguments);\n    this.entryIdCounter = [];\n    this.tasks = [];\n    this.setTimeoutWrapper = [];\n  };\n  inheritPrototype(TaskManager, tryCall);\n  var addTask = function (generatorWrapper, value) {\n    generatorWrapper.tasks.push({\n      isIphoneIpadIpod: false,\n      setCustomProperty: value\n    });\n  };\n  TaskManager.prototype.isIphoneIpadIpod = function (generatorWrapper) {\n    var value = this.tasks.find(function (CustomMap) {\n      return CustomMap.setCustomProperty === generatorWrapper;\n    });\n    if (value) {\n      value.isIphoneIpadIpod = true;\n    }\n  };\n  TaskManager.prototype.getAdEnvironment = function () {\n    this.entryIdCounter.length = 0;\n    this.setTimeoutWrapper.length = 0;\n    this.tasks.length = 0;\n    tryCall.prototype.getAdEnvironment.call(this);\n  };\n  function waitForTasks(generatorWrapper, value) {\n    var CustomMap, findEntry;\n    return wrapGeneratorToPromise(function (iterateEntries) {\n      if (iterateEntries.entryIdCounter == 1) {\n        if (value) {\n          CustomMap = generatorWrapper.filter(function (createCircularNode) {\n            return !createCircularNode.isIphoneIpadIpod;\n          });\n        } else {\n          CustomMap = generatorWrapper;\n        }\n        return generatorYield(iterateEntries, Promise.all(CustomMap.map(function (createCircularNode) {\n          return createCircularNode.setCustomProperty.promise;\n        })), 2);\n      }\n      if (generatorWrapper.length === CustomMap.length) {\n        return iterateEntries.return();\n      }\n      findEntry = generatorWrapper.filter(function (createCircularNode) {\n        return createCircularNode.isIphoneIpadIpod;\n      });\n      return generatorYield(iterateEntries, Promise.race([Promise.all(findEntry.map(function (createCircularNode) {\n        return createCircularNode.setCustomProperty.promise;\n      })), new Promise(function (createCircularNode) {\n        setTimeout(createCircularNode, value);\n        return;\n      })]), 0);\n    });\n  }\n  var Task = function (generatorWrapper, value) {\n    tryCall.call(this);\n    this.writeBytes = generatorWrapper;\n    this.timeoutMs = value;\n    this.isDone = false;\n    this.entryIdCounter = new TaskManager();\n    registerDisposable(this, this.entryIdCounter);\n  };\n  inheritPrototype(Task, tryCall);\n  Task.prototype.startTimer = function () {\n    var generatorWrapper = this,\n      value,\n      CustomMap;\n    return wrapGeneratorToPromise(function (findEntry) {\n      if (findEntry.entryIdCounter == 1) {\n        if (generatorWrapper.isDone) {\n          return findEntry.return();\n        }\n        generatorWrapper.isDone = true;\n        findEntry.setTimeoutWrapper = 2;\n        return generatorYield(findEntry, waitForTasks(generatorWrapper.entryIdCounter.tasks, (value = generatorWrapper.handleThenable) != null ? value : generatorWrapper.timeoutMs), 4);\n      }\n      if (findEntry.entryIdCounter != 2) {\n        if (!generatorWrapper.handleIteratorResult()) {\n          for (var iterateEntries = 0, createCircularNode = getIterator(generatorWrapper.entryIdCounter.setTimeoutWrapper), entryIdCounter = createCircularNode.next(); !entryIdCounter.done; entryIdCounter = createCircularNode.next()) {\n            if (entryIdCounter.value.entryIdCounter.adServerCatIdWrapper == null) {\n              throw Error(\"missing input: \" + generatorWrapper.writeBytes + \"/\" + iterateEntries);\n            }\n            ++iterateEntries;\n          }\n          generatorWrapper.tasks();\n        }\n        return resetGeneratorState(findEntry);\n      }\n      CustomMap = getGeneratorException(findEntry);\n      if (generatorWrapper.handleIteratorResult()) {\n        return findEntry.return();\n      }\n      if (!(CustomMap instanceof InputError) && CustomMap instanceof Error && (generatorWrapper.handleAsync ? generatorWrapper.handleAsync(generatorWrapper.writeBytes, CustomMap) : generatorWrapper.onFulfilled(generatorWrapper.writeBytes, CustomMap), !generatorWrapper.handleAsync && generatorWrapper.entryIdCounter.entryIdCounter.length)) {\n        iterateEntries = new InputError(CustomMap.message);\n        createCircularNode = getIterator(generatorWrapper.entryIdCounter.entryIdCounter);\n        for (entryIdCounter = createCircularNode.next(); !entryIdCounter.done; entryIdCounter = createCircularNode.next()) {\n          entryIdCounter = entryIdCounter.value;\n          if (!entryIdCounter.processElements) {\n            var key = iterateEntries;\n            entryIdCounter.isEmptyOrWhitespace = true;\n            entryIdCounter.undefinedFunction1 = key;\n            entryIdCounter.errorHandler.reject(key);\n          }\n        }\n      }\n      findEntry.entryIdCounter = 0;\n    });\n  };\n  var createResult = function (generatorWrapper) {\n    var value = undefined === value ? new Result() : value;\n    generatorWrapper.entryIdCounter.entryIdCounter.push(value);\n    return value;\n  };\n  var createNotification = function (generatorWrapper) {\n    var value = undefined === value ? new Notification() : value;\n    generatorWrapper.entryIdCounter.entryIdCounter.push(value);\n    return value;\n  };\n  var addSuccessResult = function (generatorWrapper, value) {\n    addTask(generatorWrapper.entryIdCounter, value);\n    value = new SuccessResult(value);\n    generatorWrapper.entryIdCounter.setTimeoutWrapper.push(value);\n    return value;\n  };\n  var addNullableSuccessResult = function (generatorWrapper, value) {\n    addTask(generatorWrapper.entryIdCounter, value);\n    return new NullableSuccessResult(value);\n  };\n  var TaskGroup = function () {\n    tryCall.call(this);\n    this.createDeferred = [];\n    this.isDone = [];\n    this.handleAsync = {};\n    this.entryIdCounter = [];\n    this.tasks = new Deferred();\n    this.setTimeoutWrapper = {};\n  };\n  inheritPrototype(TaskGroup, tryCall);\n  var addTaskToGroup = function (generatorWrapper, value) {\n    registerDisposable(generatorWrapper, value);\n    generatorWrapper.createDeferred.push(value);\n  };\n  var addAllTasksToGroup = function (generatorWrapper, value) {\n    value = getIterator(value);\n    for (var CustomMap = value.next(); !CustomMap.done; CustomMap = value.next()) {\n      addTaskToGroup(generatorWrapper, CustomMap.value);\n    }\n  };\n  var startTaskGroup = function (generatorWrapper) {\n    var value, CustomMap, findEntry, iterateEntries, createCircularNode, entryIdCounter, key, value, entry, currentEntry, foundEntry, resolveFunction;\n    wrapGeneratorToPromise(function (rejectFunction) {\n      switch (rejectFunction.entryIdCounter) {\n        case 1:\n          if (!generatorWrapper.entryIdCounter.length) {\n            rejectFunction.entryIdCounter = 2;\n            break;\n          }\n          return generatorYield(rejectFunction, Promise.all(generatorWrapper.entryIdCounter.map(function (user) {\n            return user.tasks.promise;\n          })), 2);\n        case 2:\n          value = getIterator(generatorWrapper.createDeferred);\n          for (CustomMap = value.next(); !CustomMap.done; CustomMap = value.next()) {\n            findEntry = CustomMap.value;\n            findEntry.startTimer();\n          }\n          iterateEntries = getIterator(generatorWrapper.isDone);\n          for (createCircularNode = iterateEntries.next(); !createCircularNode.done; createCircularNode = iterateEntries.next()) {\n            entryIdCounter = createCircularNode.value;\n            startTaskGroup(entryIdCounter);\n          }\n          if (!generatorWrapper.setTimeoutWrapper) {\n            rejectFunction.entryIdCounter = 4;\n            break;\n          }\n          key = Object.keys(generatorWrapper.setTimeoutWrapper);\n          if (!key.length) {\n            rejectFunction.entryIdCounter = 4;\n            break;\n          }\n          return generatorYield(rejectFunction, Promise.all(Object.values(generatorWrapper.setTimeoutWrapper).map(function (user) {\n            return user.promise;\n          })), 6);\n        case 6:\n          value = rejectFunction.tasks;\n          entry = 0;\n          currentEntry = getIterator(key);\n          for (foundEntry = currentEntry.next(); !foundEntry.done; foundEntry = currentEntry.next()) {\n            resolveFunction = foundEntry.value;\n            generatorWrapper.handleAsync[resolveFunction] = value[entry++];\n          }\n        case 4:\n          generatorWrapper.tasks.resolve(generatorWrapper.handleAsync);\n          return rejectFunction.return(generatorWrapper.tasks.promise);\n      }\n    });\n  };\n  TaskGroup.prototype.getAdEnvironment = function () {\n    tryCall.prototype.getAdEnvironment.call(this);\n    this.createDeferred.length = 0;\n    this.isDone.length = 0;\n    this.entryIdCounter.length = 0;\n  };\n  var Task = function (generatorWrapper, value) {\n    Task.call(this, generatorWrapper);\n    this.writeBytes = generatorWrapper;\n    this.onFulfilled = value;\n  };\n  inheritPrototype(Task, Task);\n  var ParameterizedTask = function (generatorWrapper, value, CustomMap, findEntry) {\n    Task.call(this, 1041, findEntry);\n    this.storage = value;\n    this.createDeferred = addSuccessResult(this, generatorWrapper);\n    if (CustomMap) {\n      this.setTimeoutWrapper = addNullableSuccessResult(this, CustomMap);\n    }\n  };\n  inheritPrototype(ParameterizedTask, Task);\n  ParameterizedTask.prototype.tasks = function () {\n    var value, CustomMap;\n    var generatorWrapper = this.createDeferred.value;\n    var findEntry = (CustomMap = this.storage) != null ? CustomMap : (value = this.setTimeoutWrapper) == null ? undefined : value.value;\n    if (findEntry && getCacheManagerInstance().set(generatorWrapper, findEntry) && getAdPropertyValue(generatorWrapper, 2) != null) {\n      logErrorEvent(27, getAdPropertyValue(generatorWrapper, 1));\n    }\n  };\n  var NotificationTask = function (generatorWrapper, value) {\n    Task.call(this, 1094, value);\n    this.setTimeoutWrapper = createNotification(this);\n    this.createDeferred = addSuccessResult(this, generatorWrapper);\n  };\n  inheritPrototype(NotificationTask, Task);\n  NotificationTask.prototype.tasks = function () {\n    var generatorWrapper = this.createDeferred.value;\n    if (generatorWrapper) {\n      clearCacheManager(generatorWrapper);\n      this.setTimeoutWrapper.notify();\n    }\n  };\n  var DataProcessingTask = function (generatorWrapper, value) {\n    Task.call(this, 1048, value);\n    this.setTimeoutWrapper = createResult(this);\n    this.createDeferred = createResult(this);\n    this.dispatchUnhandledRejection = addSuccessResult(this, generatorWrapper);\n  };\n  inheritPrototype(DataProcessingTask, Task);\n  DataProcessingTask.prototype.tasks = function () {\n    var generatorWrapper = this.dispatchUnhandledRejection.value;\n    var value = function (CustomMap) {\n      var findEntry = {};\n      logErrorEvent(CustomMap, getAdPropertyValue(generatorWrapper, 1), null, (findEntry.tic = String(Math.roundRectangle((Date.now() - getAdProperty(generatorWrapper, 3)) / 60000)), findEntry));\n    };\n    switch (evaluateCacheItemState(generatorWrapper)) {\n      case 0:\n        value(24);\n        break;\n      case 1:\n        value(25);\n        notifyListeners(this.createDeferred, generatorWrapper);\n        break;\n      case 2:\n        value(26);\n        notifyListeners(this.setTimeoutWrapper, generatorWrapper);\n        break;\n      case 3:\n        logErrorEvent(9, getAdPropertyValue(generatorWrapper, 1));\n        notifyListeners(this.setTimeoutWrapper, generatorWrapper);\n        break;\n      case 4:\n        value(23);\n        notifyListeners(this.setTimeoutWrapper, generatorWrapper);\n    }\n  };\n  var StorageTask = function (generatorWrapper, value, CustomMap) {\n    Task.call(this, 1027, CustomMap);\n    this.currentDocument = generatorWrapper;\n    this.storage = value;\n    this.setTimeoutWrapper = createResult(this);\n    this.createDeferred = createResult(this);\n  };\n  inheritPrototype(StorageTask, Task);\n  StorageTask.prototype.tasks = function () {\n    var generatorWrapper = getCacheManagerInstance().get(this.currentDocument, this.storage).forEachElementReverse;\n    if (!generatorWrapper) {\n      generatorWrapper = setAdErrorResponseTimeStamp(createAdErrorResponse(this.currentDocument));\n      var value = this.createDeferred;\n      var CustomMap = generatorWrapper.createFunctionWithArguments(createAdError(100));\n      notifyListeners(value, CustomMap);\n    }\n    notifyListeners(this.setTimeoutWrapper, generatorWrapper);\n  };\n  var OutputTask = function (generatorWrapper, value, CustomMap) {\n    Task.call(this, 1046, CustomMap);\n    this.output = createNotification(this);\n    this.setTimeoutWrapper = createResult(this);\n    this.createDeferred = addSuccessResult(this, value);\n    addTask(this.entryIdCounter, generatorWrapper);\n  };\n  inheritPrototype(OutputTask, Task);\n  OutputTask.prototype.tasks = function () {\n    notifyListeners(this.setTimeoutWrapper, this.createDeferred.value);\n  };\n  var FunctionCollectorTask = function (generatorWrapper, value, CustomMap) {\n    Task.call(this, 1047, CustomMap);\n    this.collectorFunction = generatorWrapper;\n    this.setTimeoutWrapper = createResult(this);\n    this.createDeferred = createResult(this);\n    this.dispatchUnhandledRejection = createResult(this);\n    this.handleThenable = addSuccessResult(this, value);\n  };\n  inheritPrototype(FunctionCollectorTask, Task);\n  FunctionCollectorTask.prototype.tasks = function () {\n    var generatorWrapper = this;\n    var value = this.handleThenable.value;\n    var CustomMap = getAdPropertyValue(value, 1);\n    logErrorEvent(18, CustomMap);\n    try {\n      var findEntry = getCurrentTimeWithPerformanceTiming();\n      this.collectorFunction().then(function (iterateEntries) {\n        logErrorEvent(29, CustomMap, null, {\n          delta: String(getCurrentTimeWithPerformanceTiming() - findEntry)\n        });\n        var createCircularNode = generatorWrapper.setTimeoutWrapper;\n        var entryIdCounter = setAdPropertyFromObject(value, 2, iterateEntries);\n        notifyListeners(createCircularNode, entryIdCounter);\n        notifyListeners(generatorWrapper.dispatchUnhandledRejection, iterateEntries != null ? iterateEntries : null);\n      }).catch(function (iterateEntries) {\n        logErrorEvent(28, CustomMap, getErrorString(iterateEntries));\n        iterateEntries = generatorWrapper.createDeferred;\n        var createCircularNode = value.createFunctionWithArguments(createAdError(106));\n        notifyListeners(iterateEntries, createCircularNode);\n      });\n    } catch (iterateEntries) {\n      logErrorEvent(1, CustomMap, getErrorString(iterateEntries));\n      resolveResult(this.createDeferred, value.createFunctionWithArguments(createAdError(107)));\n    }\n  };\n  function getErrorString(generatorWrapper) {\n    if (typeof generatorWrapper === \"string\") {\n      return generatorWrapper;\n    } else {\n      if (generatorWrapper instanceof Error) {\n        return generatorWrapper.message;\n      } else {\n        return null;\n      }\n    }\n  }\n  var ValidationTask = function (generatorWrapper, value) {\n    Task.call(this, 1028, value);\n    this.setTimeoutWrapper = createResult(this);\n    this.createDeferred = addSuccessResult(this, generatorWrapper);\n  };\n  inheritPrototype(ValidationTask, Task);\n  ValidationTask.prototype.tasks = function () {\n    var generatorWrapper = this.createDeferred.value;\n    var value = getAdPropertyValue(generatorWrapper, 1);\n    if (!(getAdProperty(generatorWrapper, 3) != null)) {\n      logErrorEvent(35, value);\n    }\n    notifyListeners(this.setTimeoutWrapper, generatorWrapper);\n  };\n  var StringLengthValidationTask = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    Task.call(this, 1050, iterateEntries);\n    this.handleThenable = CustomMap;\n    this.dispatchUnhandledRejection = findEntry;\n    this.setTimeoutWrapper = createResult(this);\n    this.createDeferred = addSuccessResult(this, generatorWrapper);\n    this.resolvePromise = addNullableSuccessResult(this, value);\n  };\n  inheritPrototype(StringLengthValidationTask, Task);\n  StringLengthValidationTask.prototype.tasks = function () {\n    var generatorWrapper = this.createDeferred.value;\n    var value = getAdPropertyValue(generatorWrapper, 1);\n    var CustomMap = this.resolvePromise.value;\n    if (CustomMap == null) {\n      logErrorEvent(41, value);\n      generatorWrapper.createFunctionWithArguments(createAdError(111));\n      notifyListeners(this.setTimeoutWrapper, generatorWrapper);\n    } else if (typeof CustomMap !== \"string\") {\n      logErrorEvent(21, value);\n      value = this.setTimeoutWrapper;\n      generatorWrapper = generatorWrapper.createFunctionWithArguments(createAdError(113));\n      notifyListeners(value, generatorWrapper);\n    } else {\n      if (CustomMap.length > (/^(\\d+)$/.test(value) ? this.dispatchUnhandledRejection : this.handleThenable)) {\n        var findEntry = {};\n        logErrorEvent(12, value, null, (findEntry.getSessionStorageData = String(CustomMap.length), findEntry));\n        value = generatorWrapper.createFunctionWithArguments(createAdError(108));\n        updateElement(value, 2);\n      } else {\n        if (!CustomMap.length) {\n          logErrorEvent(20, value);\n        }\n        updateElement(generatorWrapper, 10);\n      }\n      notifyListeners(this.setTimeoutWrapper, generatorWrapper);\n    }\n  };\n  var AdOutputManager = function (generatorWrapper) {\n    Task.call(this, 1046, generatorWrapper);\n    this.output = createNotification(this);\n  };\n  inheritPrototype(AdOutputManager, Task);\n  AdOutputManager.prototype.tasks = function () {\n    var generatorWrapper = this;\n    waitForWindowLoad().then(function () {\n      generatorWrapper.output.notify();\n    });\n  };\n  function initializeAdComponents(generatorWrapper, value, CustomMap, findEntry, iterateEntries, createCircularNode) {\n    if (undefined === createCircularNode) {\n      createCircularNode = debugFlags;\n    } else {\n      createCircularNode = createCircularNode;\n    }\n    var entryIdCounter, key, value, entry, currentEntry, foundEntry, resolveFunction, rejectFunction, user, profileData, isDone, stream, keyArray;\n    return wrapGeneratorToPromise(function (getAdManager) {\n      if (getAdManager.entryIdCounter == 1) {\n        entryIdCounter = new TaskGroup();\n        key = new StorageTask(generatorWrapper, CustomMap, iterateEntries);\n        addTaskToGroup(entryIdCounter, key);\n        addTaskToGroup(entryIdCounter, new ParameterizedTask(key.createDeferred, undefined, findEntry, iterateEntries));\n        value = new ValidationTask(key.setTimeoutWrapper, iterateEntries);\n        addTaskToGroup(entryIdCounter, value);\n        entry = new DataProcessingTask(value.setTimeoutWrapper, iterateEntries);\n        addTaskToGroup(entryIdCounter, entry);\n        currentEntry = new FunctionCollectorTask(value, entry.setTimeoutWrapper, iterateEntries);\n        addTaskToGroup(entryIdCounter, currentEntry);\n        addTaskToGroup(entryIdCounter, new ParameterizedTask(currentEntry.createDeferred, undefined, findEntry, iterateEntries));\n        foundEntry = new StringLengthValidationTask(currentEntry.setTimeoutWrapper, currentEntry.dispatchUnhandledRejection, createCircularNode.getArrayOrEmpty ? 1024 : 300, createCircularNode.getArrayOrEmpty ? 1024 : 1000, iterateEntries);\n        addTaskToGroup(entryIdCounter, foundEntry);\n        addTaskToGroup(entryIdCounter, new ParameterizedTask(foundEntry.setTimeoutWrapper, undefined, findEntry, iterateEntries));\n        resolveFunction = new AdOutputManager(iterateEntries);\n        addTaskToGroup(entryIdCounter, resolveFunction);\n        rejectFunction = new OutputTask(resolveFunction.output, entry.createDeferred, iterateEntries);\n        addTaskToGroup(entryIdCounter, rejectFunction);\n        user = new FunctionCollectorTask(value, rejectFunction.setTimeoutWrapper, iterateEntries);\n        addTaskToGroup(entryIdCounter, user);\n        profileData = new ParameterizedTask(user.setTimeoutWrapper, undefined, findEntry, iterateEntries);\n        addTaskToGroup(entryIdCounter, profileData);\n        startTaskGroup(entryIdCounter);\n        keyArray = generatorWrapper;\n        return generatorYield(getAdManager, foundEntry.setTimeoutWrapper.promise, 2);\n      } else {\n        return getAdManager.return({\n          writeBytes: keyArray,\n          collectorGeneratedData: (stream = (isDone = getAdManager.tasks) == null ? undefined : getAdPropertyValue(isDone, 2)) != null ? stream : null\n        });\n      }\n    });\n  }\n  var AdCollector = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    if (undefined === iterateEntries) {\n      iterateEntries = debugFlags;\n    } else {\n      iterateEntries = iterateEntries;\n    }\n    Task.call(this, 1059, findEntry);\n    this.resolvePromise = value;\n    this.handleThenable = CustomMap;\n    this.createDeferred = iterateEntries;\n    this.setTimeoutWrapper = createResult(this);\n    this.logError = addSuccessResult(this, generatorWrapper);\n    this.dispatchUnhandledRejection = addNullableSuccessResult(this, CustomMap);\n  };\n  inheritPrototype(AdCollector, Task);\n  AdCollector.prototype.tasks = function () {\n    var generatorWrapper = this.dispatchUnhandledRejection.value;\n    if (generatorWrapper) {\n      var iterateEntries;\n      var value = this.logError.value;\n      var CustomMap = value.writeBytes;\n      var findEntry = value.collectorFunction;\n      if ((iterateEntries = value.networkCode) != null) {\n        value = iterateEntries;\n      } else {\n        value = CustomMap;\n      }\n      CustomMap = {};\n      logErrorEvent(42, value, null, (CustomMap.createIterator = String(Number(this.resolvePromise)), CustomMap));\n      resolveWithAnotherPromise(this.setTimeoutWrapper, initializeAdComponents(value, findEntry, generatorWrapper, this.handleThenable, this.onFulfilled, this.createDeferred));\n    }\n  };\n  var AdCollectorValidator = function (generatorWrapper, value) {\n    Task.call(this, 1057, value);\n    this.setTimeoutWrapper = generatorWrapper;\n    this.createDeferred = createResult(this);\n    this.dispatchUnhandledRejection = createResult(this);\n  };\n  inheritPrototype(AdCollectorValidator, Task);\n  AdCollectorValidator.prototype.tasks = function () {\n    if (this.setTimeoutWrapper) {\n      if (typeof this.setTimeoutWrapper !== \"object\") {\n        logErrorEvent(46, \"UNKNOWN_COLLECTOR_ID\");\n        reportError(this, \"UNKNOWN_COLLECTOR_ID\", 112);\n      } else {\n        var generatorWrapper = this.setTimeoutWrapper.writeBytes;\n        var value = this.setTimeoutWrapper.networkCode;\n        if (generatorWrapper && value) {\n          delete this.setTimeoutWrapper.writeBytes;\n          logErrorEvent(47, generatorWrapper + \";\" + value);\n        }\n        if (value != null) {\n          generatorWrapper = value;\n        } else {\n          generatorWrapper = generatorWrapper;\n        }\n        if (typeof generatorWrapper !== \"string\") {\n          value = {};\n          logErrorEvent(37, \"INVALID_COLLECTOR_ID\", null, (value.urlRegex = JSON.stringify(generatorWrapper), value));\n          reportError(this, \"INVALID_COLLECTOR_ID\", 102);\n        } else if (typeof this.setTimeoutWrapper.collectorFunction !== \"function\") {\n          logErrorEvent(14, generatorWrapper);\n          reportError(this, generatorWrapper, 105);\n        } else if (getSingletonInstance(ConfigurationManager).entryIdCounter(numericValueWrapperTwo.entryIdCounter, numericValueWrapperTwo.defaultValue).includes(generatorWrapper)) {\n          logErrorEvent(22, generatorWrapper);\n          reportError(this, generatorWrapper, 104);\n        } else {\n          notifyListeners(this.dispatchUnhandledRejection, this.setTimeoutWrapper);\n        }\n      }\n    } else {\n      logErrorEvent(39, \"UNKNOWN_COLLECTOR_ID\");\n      reportError(this, \"UNKNOWN_COLLECTOR_ID\", 110);\n    }\n  };\n  var reportError = function (generatorWrapper, value, CustomMap) {\n    generatorWrapper = generatorWrapper.createDeferred;\n    value = createAdErrorResponse(value).createFunctionWithArguments(createAdError(CustomMap));\n    notifyListeners(generatorWrapper, value);\n  };\n  var AdSignalManager = function (generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    var createCircularNode = document;\n    if (undefined === createCircularNode) {\n      createCircularNode = document;\n    } else {\n      createCircularNode = createCircularNode;\n    }\n    if (undefined === iterateEntries) {\n      iterateEntries = debugFlags;\n    } else {\n      iterateEntries = iterateEntries;\n    }\n    this.entryIdCounter = value;\n    this.setTimeoutWrapper = CustomMap;\n    this.createDeferred = createCircularNode;\n    this.executeCallbacks = findEntry;\n    this.settlePromise = iterateEntries;\n    this.onFulfilled = [];\n    this.isDone = [];\n    this.handleAsync = [];\n    this.tasks = 0;\n    generatorWrapper = getIterator(generatorWrapper);\n    for (value = generatorWrapper.next(); !value.done; value = generatorWrapper.next()) {\n      this.push(value.value);\n    }\n  };\n  AdSignalManager.prototype.push = function (generatorWrapper) {\n    var value = this;\n    if (!this.setTimeoutWrapper) {\n      this.executeCallbacks();\n    }\n    var CustomMap = function (createCircularNode, entryIdCounter) {\n      invokeErrorHandlers(value, createCircularNode, entryIdCounter);\n      return;\n    };\n    generatorWrapper = new AdCollectorValidator(generatorWrapper, CustomMap);\n    var findEntry = new ParameterizedTask(generatorWrapper.createDeferred, undefined, this.entryIdCounter, CustomMap);\n    CustomMap = new AdCollector(generatorWrapper.dispatchUnhandledRejection, this.setTimeoutWrapper, this.entryIdCounter, CustomMap, this.settlePromise);\n    var iterateEntries = new TaskGroup();\n    addAllTasksToGroup(iterateEntries, [generatorWrapper, findEntry, CustomMap]);\n    startTaskGroup(iterateEntries);\n    generatorWrapper = CustomMap.setTimeoutWrapper.promise;\n    this.onFulfilled.push(generatorWrapper);\n    findEntry = getIterator(this.isDone);\n    for (CustomMap = findEntry.next(); !CustomMap.done; CustomMap = findEntry.next()) {\n      generatorWrapper.then(CustomMap.value);\n    }\n  };\n  AdSignalManager.prototype.addOnSignalResolveCallback = function (generatorWrapper) {\n    this.isDone.push(generatorWrapper);\n    for (var value = getIterator(this.onFulfilled), CustomMap = value.next(); !CustomMap.done; CustomMap = value.next()) {\n      CustomMap.value.then(generatorWrapper);\n    }\n  };\n  AdSignalManager.prototype.addErrorHandler = function (generatorWrapper) {\n    this.handleAsync.push(generatorWrapper);\n  };\n  AdSignalManager.prototype.clearAllCache = function () {\n    var generatorWrapper = this;\n    var value = this.createDeferred.currentScript instanceof HTMLScriptElement ? this.createDeferred.currentScript.src : \"\";\n    if (this.tasks === 1) {\n      var CustomMap = {};\n      logErrorEvent(49, \"\", null, (CustomMap.url = value, CustomMap));\n    } else {\n      CustomMap = String(hashString(value != null ? value : \"\"));\n      if (getSingletonInstance(ConfigurationManager).entryIdCounter(numericValueWrapperOne.entryIdCounter, numericValueWrapperOne.defaultValue).includes(CustomMap)) {\n        CustomMap = {};\n        logErrorEvent(48, \"\", null, (CustomMap.url = value, CustomMap));\n      } else {\n        var findEntry = new TaskGroup();\n        CustomMap = new NotificationTask(this.entryIdCounter, function (iterateEntries, createCircularNode) {\n          invokeErrorHandlers(generatorWrapper, iterateEntries, createCircularNode);\n          return;\n        });\n        addTaskToGroup(findEntry, CustomMap);\n        startTaskGroup(findEntry);\n        this.tasks = 1;\n        setTimeout(function () {\n          generatorWrapper.tasks = 0;\n        }, 1000 * getDefaultConfiguration());\n        findEntry = {};\n        logErrorEvent(43, \"\", null, (findEntry.url = value, findEntry));\n        return CustomMap.setTimeoutWrapper.promise;\n      }\n    }\n  };\n  var invokeErrorHandlers = function (generatorWrapper, value, CustomMap) {\n    generatorWrapper = getIterator(generatorWrapper.handleAsync);\n    for (var findEntry = generatorWrapper.next(); !findEntry.done; findEntry = generatorWrapper.next()) {\n      findEntry = findEntry.value;\n      findEntry(value, CustomMap);\n    }\n  };\n  var AdSignalManagerProxy = function (generatorWrapper) {\n    this.push = function (value) {\n      generatorWrapper.push(value);\n    };\n    this.addOnSignalResolveCallback = function (value) {\n      generatorWrapper.addOnSignalResolveCallback(value);\n    };\n    this.addErrorHandler = function (value) {\n      generatorWrapper.addErrorHandler(value);\n    };\n    this.clearAllCache = function () {\n      generatorWrapper.clearAllCache();\n    };\n  };\n  function processAdSignals(generatorWrapper, value, CustomMap, findEntry, iterateEntries, createCircularNode) {\n    if (undefined === createCircularNode) {\n      createCircularNode = debugFlags;\n    } else {\n      createCircularNode = createCircularNode;\n    }\n    if (getTopMostAccessibleWindow() !== getTopFrame()) {\n      logErrorEvent(16, \"\");\n    } else if (!(isSignalProviderArray(generatorWrapper, \"encryptedSignalProviders\", CustomMap, iterateEntries) && isSignalProviderArray(generatorWrapper, \"secureSignalProviders\", CustomMap, iterateEntries))) {\n      logErrorEvent(38, \"\");\n      initializeSignalProviders(generatorWrapper, \"encryptedSignalProviders\", value, createCircularNode, CustomMap, findEntry, iterateEntries);\n      initializeSignalProviders(generatorWrapper, \"secureSignalProviders\", value, createCircularNode, CustomMap, function () {}, iterateEntries);\n    }\n  }\n  function isSignalProviderArray(generatorWrapper, value, CustomMap, findEntry) {\n    if (undefined === generatorWrapper[value] || generatorWrapper[value] instanceof Array) {\n      return false;\n    }\n    generatorWrapper = generatorWrapper[value];\n    if (findEntry) {\n      generatorWrapper.addOnSignalResolveCallback(findEntry);\n    }\n    generatorWrapper.addErrorHandler(CustomMap);\n    return true;\n  }\n  function initializeSignalProviders(generatorWrapper, value, CustomMap, findEntry, iterateEntries, createCircularNode, entryIdCounter) {\n    var key,\n      value = new AdSignalManager((key = generatorWrapper[value]) != null ? key : [], CustomMap, value === \"secureSignalProviders\", createCircularNode, findEntry);\n    generatorWrapper[value] = new AdSignalManagerProxy(value);\n    if (entryIdCounter) {\n      value.addOnSignalResolveCallback(entryIdCounter);\n    }\n    value.addErrorHandler(iterateEntries);\n  }\n  function collectAdData(generatorWrapper, value, CustomMap, findEntry, iterateEntries) {\n    var createCircularNode = undefined === createCircularNode ? debugFlags : createCircularNode;\n    var entryIdCounter = new Result();\n    notifyListeners(entryIdCounter, value);\n    processAdSignals(generatorWrapper, entryIdCounter, CustomMap, findEntry, iterateEntries, createCircularNode);\n  }\n  function collectAdDataAsync(generatorWrapper, value, CustomMap, findEntry) {\n    var iterateEntries = emptyFunction;\n    var createCircularNode = new Map();\n    value = value.map(function (entryIdCounter) {\n      var key = entryIdCounter.currentDocument;\n      return new Promise(function (value) {\n        createCircularNode.set(key, value);\n      });\n    });\n    collectAdData(generatorWrapper, CustomMap, findEntry, iterateEntries, function (entryIdCounter) {\n      var key = entryIdCounter.collectorGeneratedData;\n      entryIdCounter = entryIdCounter.writeBytes;\n      var value;\n      if ((value = createCircularNode.get(entryIdCounter)) == null) {\n        undefined;\n      } else {\n        value({\n          collectorGeneratedData: key,\n          writeBytes: entryIdCounter\n        });\n      }\n      return;\n    });\n    return value;\n  }\n  function getGoogleTag() {\n    var generatorWrapper;\n    if ((generatorWrapper = globalScope.googletag) != null) {\n      return generatorWrapper;\n    } else {\n      return globalScope.googletag = {\n        cmd: []\n      };\n    }\n  }\n  function getLocalStorageSafe(generatorWrapper) {\n    if (!generatorWrapper || isLimitedAdsMode(generatorWrapper)) {\n      return null;\n    }\n    try {\n      return window.localStorage;\n    } catch (value) {\n      return null;\n    }\n  }\n  function collectLocalStorageAdData(generatorWrapper, value) {\n    if (generatorWrapper = getLocalStorageSafe(generatorWrapper)) {\n      collectAdData(getGoogleTag(), generatorWrapper, function () {}, emptyFunction, value);\n    }\n  }\n  function collectAdDataFromProviders(generatorWrapper, value) {\n    if ((value = getLocalStorageSafe(value)) && generatorWrapper.length !== 0) {\n      return collectAdDataAsync(getGoogleTag(), generatorWrapper, value, function () {});\n    } else {\n      return null;\n    }\n  }\n  function emptyFunction() {}\n  function resolveSignalForWindow(generatorWrapper, value, CustomMap, findEntry) {\n    var iterateEntries = new Deferred();\n    var createCircularNode = \"\";\n    var entryIdCounter = function (value) {\n      try {\n        var entry = typeof value.data === \"object\" ? value.data : JSON.parse(value.data);\n        if (createCircularNode === entry.paw_id) {\n          removeEventListenerWithNormalization(generatorWrapper, \"message\", entryIdCounter);\n          if (entry.hasError) {\n            iterateEntries.reject(Error(entry.hasError));\n          } else {\n            iterateEntries.resolve(findEntry(entry));\n          }\n        }\n      } catch (currentEntry) {}\n    };\n    var key = getGmaSdk(generatorWrapper);\n    if (key) {\n      addEventListenerWithNormalization(generatorWrapper, \"message\", entryIdCounter);\n      createCircularNode = CustomMap(key);\n      return iterateEntries.promise;\n    } else {\n      if (CustomMap = getGmaMessageHandlers(generatorWrapper)) {\n        createCircularNode = String(Math.floorRectangle(2147483647 * secureRandom()));\n        addEventListenerWithNormalization(generatorWrapper, \"message\", entryIdCounter);\n        value(CustomMap, createCircularNode);\n        return iterateEntries.promise;\n      } else {\n        return null;\n      }\n    }\n  }\n  function resolveGmaQuerySignal(generatorWrapper) {\n    return resolveSignalForWindow(generatorWrapper, function (value, CustomMap) {\n      var findEntry, iterateEntries;\n      if ((findEntry = (iterateEntries = value.getGmaQueryInfo) != null ? iterateEntries : value.getGmaSig) == null) {\n        undefined;\n      } else {\n        findEntry.sendPostMessage(CustomMap);\n      }\n      return;\n    }, function (value) {\n      return value.getQueryInfo();\n    }, function (value) {\n      return value.signal;\n    });\n  }\n  function isGmaAvailable() {\n    var generatorWrapper = window;\n    return !!getGmaSdk(generatorWrapper) || !!getGmaMessageHandlers(generatorWrapper);\n  }\n  function getGmaSdk(generatorWrapper) {\n    var value;\n    if (typeof ((value = generatorWrapper.gmaSdk) == null ? undefined : value.getQueryInfo) === \"function\") {\n      return generatorWrapper.gmaSdk;\n    }\n  }\n  function getGmaMessageHandlers(generatorWrapper) {\n    var value, CustomMap, findEntry, iterateEntries, createCircularNode, entryIdCounter;\n    if (typeof ((value = generatorWrapper.webkit) == null ? undefined : (CustomMap = value.messageHandlers) == null ? undefined : (findEntry = CustomMap.getGmaQueryInfo) == null ? undefined : findEntry.sendPostMessage) === \"function\" || typeof ((iterateEntries = generatorWrapper.webkit) == null ? undefined : (createCircularNode = iterateEntries.messageHandlers) == null ? undefined : (entryIdCounter = createCircularNode.getGmaSig) == null ? undefined : entryIdCounter.sendPostMessage) === \"function\") {\n      return generatorWrapper.webkit.messa"