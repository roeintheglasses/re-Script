"ance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(AdResponse, AdElement);\n  var baseCharCode = \"a\".charCodeAt();\n  var vendorIds = valuesOfObject({\n    Vh: 0,\n    Uh: 1,\n    getDomHelper: 2,\n    dashCaseFromCamel: 3,\n    getElementByIdOrDirect: 4,\n    capitalizeFirstLetter: 5,\n    attributeMappings: 6,\n    DocumentHelper: 7,\n    getDocument: 8,\n    camelCaseFromDash: 9,\n    parseInteger: 10,\n    setElementAttributes: 11\n  });\n  var purposeIds = valuesOfObject({\n    getDocumentScrollCoordinate: 0,\n    createElement: 1,\n    getViewportSize: 2\n  });\n  var BitStringReader = function (generatorWrapper) {\n    if (/[^01]/.test(generatorWrapper)) {\n      throw Error(\"Input bitstring \" + generatorWrapper + \" is malformed!\");\n    }\n    this.tasks = generatorWrapper;\n    this.entryIdCounter = 0;\n  };\n  var decodePurposeRestrictions = function (generatorWrapper) {\n    generatorWrapper = readBits(generatorWrapper, 36);\n    var value = new AdManifest();\n    value = setAdPropertyFromString(value, 1, Math.floorRectangle(generatorWrapper / 10));\n    return modifyAdProperty(value, 2, generatorWrapper % 10 * 100000000);\n  };\n  var decodeVendor = function (generatorWrapper) {\n    return String.fromCharCode(baseCharCode + readBits(generatorWrapper, 6)) + String.fromCharCode(baseCharCode + readBits(generatorWrapper, 6));\n  };\n  var decodeVendorList = function (generatorWrapper) {\n    var value = readBits(generatorWrapper, 16);\n    if (!!readBits(generatorWrapper, 1) === true) {\n      generatorWrapper = decodeRange(generatorWrapper);\n      generatorWrapper.forEach(function (CustomMap) {\n        if (CustomMap > value) {\n          throw Error(\"ID \" + CustomMap + \" is past MaxVendorId \" + value + \"!\");\n        }\n      });\n      return generatorWrapper;\n    } else {\n      return decodeSingleVendor(generatorWrapper, value);\n    }\n  };\n  var decodeVendorConsent = function (generatorWrapper) {\n    for (var value = [], CustomMap = readBits(generatorWrapper, 12); CustomMap--;) {\n      var findEntry = readBits(generatorWrapper, 6);\n      var iterateEntries = readBits(generatorWrapper, 2);\n      var createCircularNode = decodeRange(generatorWrapper);\n      var entryIdCounter = value;\n      var key = entryIdCounter.push;\n      var value = new AdExtension();\n      findEntry = updateOrRemoveElement(value, 1, parseNullableIntEnum(findEntry), 0);\n      iterateEntries = updateOrRemoveElement(findEntry, 2, parseNullableIntEnum(iterateEntries), 0);\n      createCircularNode = transformAndReplaceArray(iterateEntries, 3, createCircularNode, parseInt32);\n      key.call(entryIdCounter, createCircularNode);\n    }\n    return value;\n  };\n  var decodeRange = function (generatorWrapper) {\n    for (var value = readBits(generatorWrapper, 12), CustomMap = []; value--;) {\n      var findEntry = !!readBits(generatorWrapper, 1) === true;\n      var iterateEntries = readBits(generatorWrapper, 16);\n      if (findEntry) {\n        for (findEntry = readBits(generatorWrapper, 16); iterateEntries <= findEntry; iterateEntries++) {\n          CustomMap.push(iterateEntries);\n        }\n      } else {\n        CustomMap.push(iterateEntries);\n      }\n    }\n    CustomMap.sort(function (createCircularNode, entryIdCounter) {\n      return createCircularNode - entryIdCounter;\n    });\n    return CustomMap;\n  };\n  var decodeSingleVendor = function (generatorWrapper, value, CustomMap) {\n    for (var findEntry = [], iterateEntries = 0; iterateEntries < value; iterateEntries++) {\n      if (readBits(generatorWrapper, 1)) {\n        var createCircularNode = iterateEntries + 1;\n        if (CustomMap && -1 === CustomMap.indexOf(createCircularNode)) {\n          throw Error(\"ID: \" + createCircularNode + \" is outside of allowed values!\");\n        }\n        findEntry.push(createCircularNode);\n      }\n    }\n    return findEntry;\n  };\n  var readBits = function (generatorWrapper, value) {\n    if (generatorWrapper.entryIdCounter + value > generatorWrapper.tasks.length) {\n      throw Error(\"Requested length \" + value + \" is past end of string.\");\n    }\n    var CustomMap = generatorWrapper.tasks.substring(generatorWrapper.entryIdCounter, generatorWrapper.entryIdCounter + value);\n    generatorWrapper.entryIdCounter += value;\n    return parseInt(CustomMap, 2);\n  };\n  BitStringReader.prototype.skip = function (generatorWrapper) {\n    this.entryIdCounter += generatorWrapper;\n  };\n  var decodeAdBreak = function (generatorWrapper) {\n    try {\n      var value = getBase64EncodedArray(generatorWrapper).map(function (createCircularNode) {\n        return createCircularNode.toString(2).padStart(8, \"0\");\n      }).join(\"\");\n      var CustomMap = new BitStringReader(value);\n      if (readBits(CustomMap, 3) !== 3) {\n        return null;\n      }\n      var findEntry = setAdExtensionValue(setAdExtensionParam(new AdExtensionParameters(), decodeSingleVendor(CustomMap, 24, vendorIds)), decodeSingleVendor(CustomMap, 24, vendorIds));\n      var iterateEntries = readBits(CustomMap, 6);\n      if (iterateEntries !== 0) {\n        finalizeAdExtension(setAdExtensionOption(findEntry, decodeSingleVendor(CustomMap, iterateEntries)), decodeSingleVendor(CustomMap, iterateEntries));\n      }\n      return findEntry;\n    } catch (createCircularNode) {\n      return null;\n    }\n  };\n  var decodeAdRequest = function (generatorWrapper) {\n    try {\n      var value = getBase64EncodedArray(generatorWrapper).map(function (findEntry) {\n        return findEntry.toString(2).padStart(8, \"0\");\n      }).join(\"\");\n      var CustomMap = new BitStringReader(value);\n      return setAdRequestParameter19(setAdRequestParameter18(setAdRequestParameter17(setAdRequestParameter16(setAdRequestParameter15(setAdManifestLinear(setAdManifestWrapper(setAdManifestCreativeType(enableAdManifestVPAID(enableAdManifestSkippable(setAdManifestDuration(setAdManifestAdPolicy(setAdManifestFallbackIndex(setAdManifestAdBreakId(setAdManifestSequence(setAdManifestId(addAdManifestTemplate(addAdManifestExtension(setAdManifestVersion(new AdManifestVersion(), readBits(CustomMap, 6)), decodePurposeRestrictions(CustomMap)), decodePurposeRestrictions(CustomMap)), readBits(CustomMap, 12)), readBits(CustomMap, 12)), readBits(CustomMap, 6)), decodeVendor(CustomMap)), readBits(CustomMap, 12)), readBits(CustomMap, 6)), !!readBits(CustomMap, 1)), !!readBits(CustomMap, 1)), decodeSingleVendor(CustomMap, 12, purposeIds)), decodeSingleVendor(CustomMap, 24, vendorIds)), decodeSingleVendor(CustomMap, 24, vendorIds)), !!readBits(CustomMap, 1)), decodeVendor(CustomMap)), decodeVendorList(CustomMap)), decodeVendorList(CustomMap)), decodeVendorConsent(CustomMap));\n    } catch (findEntry) {\n      return null;\n    }\n  };\n  var decodeAdResponse = function (generatorWrapper) {\n    if (!generatorWrapper) {\n      return null;\n    }\n    var value = generatorWrapper.split(\".\");\n    if (value.length > 4) {\n      return null;\n    }\n    generatorWrapper = decodeAdRequest(value[0]);\n    if (!generatorWrapper) {\n      return null;\n    }\n    var CustomMap = new AdResponse();\n    generatorWrapper = finalizeAdAttributes(CustomMap, 1, generatorWrapper);\n    value.shift();\n    value = getIterator(value);\n    for (CustomMap = value.next(); !CustomMap.done; CustomMap = value.next()) {\n      CustomMap = CustomMap.value;\n      switch (getAdResponseType(CustomMap)) {\n        case 1:\n        case 2:\n          break;\n        case 3:\n          CustomMap = decodeAdBreak(CustomMap);\n          if (!CustomMap) {\n            return null;\n          }\n          finalizeAdAttributes(generatorWrapper, 2, CustomMap);\n          break;\n        default:\n          return null;\n      }\n    }\n    return generatorWrapper;\n  };\n  var getAdResponseType = function (generatorWrapper) {\n    try {\n      var value = getBase64EncodedArray(generatorWrapper).map(function (CustomMap) {\n        return CustomMap.toString(2).padStart(8, \"0\");\n      }).join(\"\");\n      return readBits(new BitStringReader(value), 3);\n    } catch (CustomMap) {\n      return -1;\n    }\n  };\n  var generateAdResponseMap = function (generatorWrapper, value) {\n    var CustomMap = {};\n    if (Array.isArray(value) && value.length !== 0) {\n      value = getIterator(value);\n      for (var findEntry = value.next(); !findEntry.done; findEntry = value.next()) {\n        findEntry = findEntry.value;\n        CustomMap[findEntry] = -1 !== generatorWrapper.indexOf(findEntry);\n      }\n    } else {\n      generatorWrapper = getIterator(generatorWrapper);\n      for (value = generatorWrapper.next(); !value.done; value = generatorWrapper.next()) {\n        CustomMap[value.value] = true;\n      }\n    }\n    delete CustomMap[0];\n    return CustomMap;\n  };\n  var DefaultValueContainer = function (generatorWrapper) {\n    var value = undefined === value ? [] : value;\n    this.entryIdCounter = generatorWrapper;\n    this.defaultValue = value;\n  };\n  var defaultNumericValueWrapper = new function (generatorWrapper, value) {\n    this.entryIdCounter = generatorWrapper;\n    if (undefined === value) {\n      this.defaultValue = 0;\n    } else {\n      this.defaultValue = value;\n    }\n  }(494575051);\n  var numericValueWrapperOne = new DefaultValueContainer(489560439);\n  var numericValueWrapperTwo = new DefaultValueContainer(505762507);\n  var CustomClass = function (generatorWrapper) {\n    this.getSingletonInstance = onFulfilled(generatorWrapper);\n  };\n  inheritPrototype(CustomClass, AdElement);\n  var createCustomClassInstance = function (generatorWrapper) {\n    var value = new CustomClass();\n    replaceArrayIfNotArray(value, 1, parseIntEnum, generatorWrapper);\n  };\n  CustomClass.findGlobalObject = [1];\n  var urlSchemeRegex = /^((market|itms|intent|itms-appss):\\/\\/)/i;\n  var adAttributesList = \"ad_type vpos mridx pos vad_type videoad_start_delay\".split(\" \");\n  var AdDimensions = function (generatorWrapper) {\n    var value = generatorWrapper.identityFunction;\n    var CustomMap = generatorWrapper.height;\n    var findEntry = generatorWrapper.width;\n    var iterateEntries = undefined === generatorWrapper.generatorReturn ? false : generatorWrapper.generatorReturn;\n    this.compareVersions = generatorWrapper.compareVersions;\n    this.identityFunction = value;\n    this.height = CustomMap;\n    this.width = findEntry;\n    this.generatorReturn = iterateEntries;\n  };\n  AdDimensions.prototype.getRectangleHeight = function () {\n    return this.height;\n  };\n  AdDimensions.prototype.getRectangleWidth = function () {\n    return this.width;\n  };\n  var ExtendedAdDimensions = function (generatorWrapper) {\n    var value = generatorWrapper.trustedURLMarker;\n    var CustomMap = generatorWrapper.setAdProperty;\n    var findEntry = generatorWrapper.TrustedURL;\n    var iterateEntries = generatorWrapper.getNestedAdPropertyNumeric;\n    AdDimensions.call(this, {\n      compareVersions: generatorWrapper.compareVersions,\n      identityFunction: generatorWrapper.identityFunction,\n      height: generatorWrapper.height,\n      width: generatorWrapper.width,\n      generatorReturn: undefined === generatorWrapper.generatorReturn ? false : generatorWrapper.generatorReturn\n    });\n    this.createDeferred = value;\n    this.tasks = CustomMap;\n    this.setTimeoutWrapper = findEntry;\n    this.entryIdCounter = iterateEntries;\n  };\n  inheritPrototype(ExtendedAdDimensions, AdDimensions);\n  var MediaAdDimensions = function (generatorWrapper) {\n    var value = generatorWrapper.enumTransformation;\n    AdDimensions.call(this, {\n      compareVersions: generatorWrapper.compareVersions,\n      identityFunction: generatorWrapper.identityFunction,\n      height: generatorWrapper.height,\n      width: generatorWrapper.width,\n      generatorReturn: undefined === generatorWrapper.generatorReturn ? false : generatorWrapper.generatorReturn\n    });\n    this.entryIdCounter = value;\n  };\n  inheritPrototype(MediaAdDimensions, AdDimensions);\n  MediaAdDimensions.prototype.getMediaUrl = function () {\n    return this.entryIdCounter;\n  };\n  function createInstanceWithArguments(generatorWrapper) {\n    return new (Function.prototype.bind.apply(generatorWrapper, [null].concat(toArray(sliceArguments.apply(1, arguments)))))();\n  }\n  var MessageHandler = function (generatorWrapper, value, CustomMap, findEntry) {\n    tryCall.call(this);\n    this.handleThenable = value;\n    this.dispatchUnhandledRejection = CustomMap;\n    this.onFulfilled = findEntry;\n    this.handleAsync = new Map();\n    this.resolvePromise = 0;\n    this.createDeferred = new Map();\n    this.isDone = new Map();\n    this.setTimeoutWrapper = undefined;\n    this.tasks = generatorWrapper;\n  };\n  inheritPrototype(MessageHandler, tryCall);\n  MessageHandler.prototype.getAdEnvironment = function () {\n    delete this.entryIdCounter;\n    this.handleAsync.clearAll();\n    this.createDeferred.clearAll();\n    this.isDone.clearAll();\n    if (this.setTimeoutWrapper) {\n      removeEventListenerWithNormalization(this.tasks, \"message\", this.setTimeoutWrapper);\n      delete this.setTimeoutWrapper;\n    }\n    delete this.tasks;\n    delete this.onFulfilled;\n    tryCall.prototype.getAdEnvironment.call(this);\n  };\n  var getEffectiveMessageTarget = function (generatorWrapper) {\n    if (generatorWrapper.entryIdCounter) {\n      return generatorWrapper.entryIdCounter;\n    }\n    if (generatorWrapper.dispatchUnhandledRejection && generatorWrapper.dispatchUnhandledRejection(generatorWrapper.tasks)) {\n      generatorWrapper.entryIdCounter = generatorWrapper.tasks;\n    } else {\n      generatorWrapper.entryIdCounter = findFrameByName(generatorWrapper.tasks, generatorWrapper.handleThenable);\n    }\n    var value;\n    if ((value = generatorWrapper.entryIdCounter) != null) {\n      return value;\n    } else {\n      return null;\n    }\n  };\n  var invokeCallerMethod = function (generatorWrapper, value, CustomMap) {\n    if (getEffectiveMessageTarget(generatorWrapper)) {\n      if (generatorWrapper.entryIdCounter === generatorWrapper.tasks) {\n        if (value = generatorWrapper.handleAsync.get(value)) {\n          value(generatorWrapper.entryIdCounter, CustomMap);\n        }\n      } else {\n        var findEntry = generatorWrapper.createDeferred.get(value);\n        if (findEntry && findEntry.defaultSort) {\n          setupMessageListener(generatorWrapper);\n          var iterateEntries = ++generatorWrapper.resolvePromise;\n          generatorWrapper.isDone.set(iterateEntries, {\n            forEachElement: findEntry.forEachElement,\n            serializeData: findEntry.supportsBigInt(CustomMap),\n            clearFunction: value === \"addEventListener\"\n          });\n          generatorWrapper.entryIdCounter.sendPostMessage(findEntry.defaultSort(CustomMap, iterateEntries), \"*\");\n        }\n      }\n    }\n  };\n  var setupMessageListener = function (generatorWrapper) {\n    if (!generatorWrapper.setTimeoutWrapper) {\n      generatorWrapper.setTimeoutWrapper = function (value) {\n        try {\n          var CustomMap = generatorWrapper.onFulfilled ? generatorWrapper.onFulfilled(value) : undefined;\n          if (CustomMap) {\n            var findEntry = CustomMap.singletonInstance;\n            var iterateEntries = generatorWrapper.isDone.get(findEntry);\n            if (iterateEntries) {\n              if (!iterateEntries.clearFunction) {\n                generatorWrapper.isDone.delete(findEntry);\n              }\n              var createCircularNode;\n              if (!((createCircularNode = iterateEntries.forEachElement) == null)) {\n                createCircularNode.call(iterateEntries, iterateEntries.serializeData, CustomMap.payload);\n              }\n            }\n          }\n        } catch (entryIdCounter) {}\n      };\n      addEventListenerWithNormalization(generatorWrapper.tasks, \"message\", generatorWrapper.setTimeoutWrapper);\n    }\n  };\n  var addEventListenerWrapper = function (generatorWrapper, value) {\n    value = value.listener;\n    if (generatorWrapper = (0, generatorWrapper.__gpp)(\"addEventListener\", value)) {\n      value(generatorWrapper, true);\n    }\n  };\n  var removeEventListenerWrapper = function (generatorWrapper, value) {\n    (0, generatorWrapper.__gpp)(\"removeEventListener\", value.listener, value.listenerId);\n  };\n  var getDataWithCallbackWrapper = function (generatorWrapper, value) {\n    (0, generatorWrapper.__gpp)(\"getSection\", function (CustomMap) {\n      value.resetGeneratorState({\n        supportsHtml5: CustomMap != null ? CustomMap : undefined,\n        isAndroidNonChrome: CustomMap ? undefined : 4\n      });\n    }, value.apiPrefix);\n  };\n  var addEventListenerCommand = {\n    supportsBigInt(generatorWrapper) {\n      return generatorWrapper.listener;\n    },\n    defaultSort(generatorWrapper, value) {\n      generatorWrapper = {};\n      generatorWrapper.__gppCall = {\n        callId: value,\n        command: \"addEventListener\",\n        version: \"1.1\"\n      };\n      return generatorWrapper;\n    },\n    forEachElement(generatorWrapper, value) {\n      value = value.__gppReturn;\n      generatorWrapper(value.returnValue, value.success);\n    }\n  };\n  var removeEventListenerCommand = {\n    supportsBigInt(generatorWrapper) {\n      return generatorWrapper.listener;\n    },\n    defaultSort(generatorWrapper, value) {\n      var CustomMap = {};\n      CustomMap.__gppCall = {\n        callId: value,\n        command: \"removeEventListener\",\n        version: \"1.1\",\n        parameter: generatorWrapper.listenerId\n      };\n      return CustomMap;\n    },\n    forEachElement(generatorWrapper, value) {\n      value = value.__gppReturn;\n      var CustomMap = value.returnValue.data;\n      if (!(generatorWrapper == null)) {\n        generatorWrapper(CustomMap, value.success);\n      }\n    }\n  };\n  var getDataWithCallbackCommand = {\n    supportsBigInt(generatorWrapper) {\n      return generatorWrapper.resetGeneratorState;\n    },\n    defaultSort(generatorWrapper, value) {\n      var CustomMap = {};\n      CustomMap.__gppCall = {\n        callId: value,\n        command: \"getSection\",\n        version: \"1.1\",\n        parameter: generatorWrapper.apiPrefix\n      };\n      return CustomMap;\n    },\n    forEachElement(generatorWrapper, value) {\n      value = value.__gppReturn;\n      var CustomMap;\n      generatorWrapper({\n        supportsHtml5: (CustomMap = value.returnValue) != null ? CustomMap : undefined,\n        isAndroidNonChrome: value.success ? undefined : 2\n      });\n    }\n  };\n  function parseMessagePayload(generatorWrapper) {\n    var value = {};\n    if (typeof generatorWrapper.data === \"string\") {\n      value = JSON.parse(generatorWrapper.data);\n    } else {\n      value = generatorWrapper.data;\n    }\n    return {\n      payload: value,\n      singletonInstance: value.__gppReturn.callId\n    };\n  }\n  var SignalStatusManager = function (generatorWrapper, value) {\n    var CustomMap = undefined === value ? {} : value;\n    value = CustomMap.timeoutMs;\n    CustomMap = CustomMap.allowEmptyApplicableSection;\n    tryCall.call(this);\n    this.caller = new MessageHandler(generatorWrapper, \"__gppLocator\", function (findEntry) {\n      return typeof findEntry.__gpp === \"function\";\n    }, parseMessagePayload);\n    this.caller.handleAsync.set(\"addEventListener\", addEventListenerWrapper);\n    this.caller.createDeferred.set(\"addEventListener\", addEventListenerCommand);\n    this.caller.handleAsync.set(\"removeEventListener\", removeEventListenerWrapper);\n    this.caller.createDeferred.set(\"removeEventListener\", removeEventListenerCommand);\n    this.caller.handleAsync.set(\"getDataWithCallback\", getDataWithCallbackWrapper);\n    this.caller.createDeferred.set(\"getDataWithCallback\", getDataWithCallbackCommand);\n    if (value != null) {\n      this.timeoutMs = value;\n    } else {\n      this.timeoutMs = 500;\n    }\n    this.allowEmptyApplicableSection = CustomMap;\n  };\n  inheritPrototype(SignalStatusManager, tryCall);\n  SignalStatusManager.prototype.getAdEnvironment = function () {\n    this.caller.markAsCompleted();\n    tryCall.prototype.getAdEnvironment.call(this);\n  };\n  SignalStatusManager.prototype.addEventListener = function (generatorWrapper) {\n    var value = this;\n    var CustomMap = clearFunction(function () {\n      generatorWrapper(signalStatusReadyErrorListenerTimeout, true);\n    });\n    var findEntry = -1 === this.timeoutMs ? undefined : setTimeout(function () {\n      CustomMap();\n    }, this.timeoutMs);\n    invokeCallerMethod(this.caller, \"addEventListener\", {\n      listener(iterateEntries, createCircularNode) {\n        clearTimeout(findEntry);\n        try {\n          var entryIdCounter;\n          if (undefined === ((entryIdCounter = iterateEntries.pingData) == null ? undefined : entryIdCounter.gppVersion) || iterateEntries.pingData.gppVersion === \"1\" || iterateEntries.pingData.gppVersion === \"1.0\") {\n            value.removeEventListener(iterateEntries.listenerId);\n            var key = {\n              eventName: \"signalStatus\",\n              data: \"ready\",\n              pingData: {\n                internalErrorState: 1,\n                gppString: \"GPP_ERROR_STRING_IS_DEPRECATED_SPEC\",\n                applicableSections: [-1]\n              }\n            };\n          } else if (!Array.isArray(iterateEntries.pingData.applicableSections) || iterateEntries.pingData.applicableSections.length === 0 && !value.allowEmptyApplicableSection) {\n            value.removeEventListener(iterateEntries.listenerId);\n            key = {\n              eventName: \"signalStatus\",\n              data: \"ready\",\n              pingData: {\n                internalErrorState: 2,\n                gppString: \"GPP_ERROR_STRING_EXPECTED_APPLICATION_SECTION_ARRAY\",\n                applicableSections: [-1]\n              }\n            };\n          } else {\n            key = iterateEntries;\n          }\n          generatorWrapper(key, createCircularNode);\n        } catch (value) {\n          if (iterateEntries == null ? 0 : iterateEntries.listenerId) {\n            try {\n              value.removeEventListener(iterateEntries.listenerId);\n            } catch (entry) {\n              generatorWrapper(signalStatusReadyErrorRemoveListener, true);\n              return;\n            }\n          }\n          generatorWrapper(signalStatusReadyErrorUnavailable, true);\n        }\n      }\n    });\n  };\n  SignalStatusManager.prototype.removeEventListener = function (generatorWrapper) {\n    invokeCallerMethod(this.caller, \"removeEventListener\", {\n      listener() {},\n      listenerId: generatorWrapper\n    });\n  };\n  var signalStatusReadyErrorUnavailable = {\n    eventName: \"signalStatus\",\n    data: \"ready\",\n    pingData: {\n      internalErrorState: 2,\n      gppString: \"GPP_ERROR_STRING_UNAVAILABLE\",\n      applicableSections: [-1]\n    },\n    listenerId: -1\n  };\n  var signalStatusReadyErrorListenerTimeout = {\n    eventName: \"signalStatus\",\n    data: \"ready\",\n    pingData: {\n      gppString: \"GPP_ERROR_STRING_LISTENER_REGISTRATION_TIMEOUT\",\n      internalErrorState: 2,\n      applicableSections: [-1]\n    },\n    listenerId: -1\n  };\n  var signalStatusReadyErrorRemoveListener = {\n    eventName: \"signalStatus\",\n    data: \"ready\",\n    pingData: {\n      gppString: \"GPP_ERROR_STRING_REMOVE_EVENT_LISTENER_ERROR\",\n      internalErrorState: 2,\n      applicableSections: [-1]\n    },\n    listenerId: -1\n  };\n  var validateSignalData = function (generatorWrapper) {\n    if (undefined !== generatorWrapper.addtlConsent && typeof generatorWrapper.addtlConsent !== \"string\") {\n      generatorWrapper.addtlConsent = undefined;\n    }\n    if (undefined !== generatorWrapper.gdprApplies && typeof generatorWrapper.gdprApplies !== \"boolean\") {\n      generatorWrapper.gdprApplies = undefined;\n    }\n    if (undefined !== generatorWrapper.tcString && typeof generatorWrapper.tcString !== \"string\" || undefined !== generatorWrapper.listenerId && typeof generatorWrapper.listenerId !== \"number\") {\n      return 2;\n    } else {\n      if (generatorWrapper.cmpStatus && generatorWrapper.cmpStatus !== \"error\") {\n        return 0;\n      } else {\n        return 3;\n      }\n    }\n  };\n  var ConsentStatusManager = function (generatorWrapper, value) {\n    if (undefined === value) {\n      value = {};\n    } else {\n      value = value;\n    }\n    tryCall.call(this);\n    this.tasks = generatorWrapper;\n    this.entryIdCounter = null;\n    this.isDone = {};\n    this.onFulfilled = 0;\n    var CustomMap;\n    if ((CustomMap = value.timeoutMs) != null) {\n      this.createDeferred = CustomMap;\n    } else {\n      this.createDeferred = 500;\n    }\n    var findEntry;\n    if ((findEntry = value.getEarliestDomLoadingOrInteractiveTime) != null) {\n      this.handleAsync = findEntry;\n    } else {\n      this.handleAsync = false;\n    }\n    this.setTimeoutWrapper = null;\n  };\n  inheritPrototype(ConsentStatusManager, tryCall);\n  ConsentStatusManager.prototype.getAdEnvironment = function () {\n    this.isDone = {};\n    if (this.setTimeoutWrapper) {\n      removeEventListenerWithNormalization(this.tasks, \"message\", this.setTimeoutWrapper);\n      delete this.setTimeoutWrapper;\n    }\n    delete this.isDone;\n    delete this.tasks;\n    delete this.entryIdCounter;\n    tryCall.prototype.getAdEnvironment.call(this);\n  };\n  var isTcfApiFunctionAvailable = function (generatorWrapper) {\n    return typeof generatorWrapper.tasks.__tcfapi === \"function\" || createElementWithAttributes(generatorWrapper) != null;\n  };\n  var waitForConsentWithTimeout = function (generatorWrapper, value) {\n    var CustomMap = {\n      internalErrorState: 0,\n      internalBlockOnErrors: generatorWrapper.handleAsync\n    };\n    var findEntry = clearFunction(function () {\n      return value(CustomMap);\n    });\n    var iterateEntries = 0;\n    if (-1 !== generatorWrapper.createDeferred) {\n      iterateEntries = setTimeout(function () {\n        iterateEntries = 0;\n        CustomMap.tcString = \"tcunavailable\";\n        CustomMap.internalErrorState = 1;\n        findEntry();\n      }, generatorWrapper.createDeferred);\n    }\n    invokeTcfApi(generatorWrapper, \"addEventListener\", function (createCircularNode) {\n      if (createCircularNode) {\n        CustomMap = createCircularNode;\n        CustomMap.internalErrorState = validateSignalData(CustomMap);\n        CustomMap.internalBlockOnErrors = generatorWrapper.handleAsync;\n        if (isGdprConsentGiven(CustomMap)) {\n          if (CustomMap.internalErrorState != 0) {\n            CustomMap.tcString = \"tcunavailable\";\n          }\n          invokeTcfApi(generatorWrapper, \"removeEventListener\", null, CustomMap.listenerId);\n          if (createCircularNode = iterateEntries) {\n            clearTimeout(createCircularNode);\n          }\n          findEntry();\n        } else if ((CustomMap.cmpStatus === \"error\" || CustomMap.internalErrorState !== 0) && (createCircularNode = iterateEntries)) {\n          clearTimeout(createCircularNode);\n        }\n      }\n    });\n  };\n  ConsentStatusManager.prototype.addEventListener = function (generatorWrapper) {\n    var value = this;\n    var CustomMap = {\n      internalBlockOnErrors: this.handleAsync\n    };\n    var findEntry = clearFunction(function () {\n      return generatorWrapper(CustomMap);\n    });\n    var iterateEntries = 0;\n    if (-1 !== this.createDeferred) {\n      iterateEntries = setTimeout(function () {\n        CustomMap.tcString = \"tcunavailable\";\n        CustomMap.internalErrorState = 1;\n        findEntry();\n      }, this.createDeferred);\n    }\n    var createCircularNode = function (entryIdCounter, key) {\n      clearTimeout(iterateEntries);\n      if (entryIdCounter) {\n        CustomMap = entryIdCounter;\n        CustomMap.internalErrorState = validateSignalData(CustomMap);\n        CustomMap.internalBlockOnErrors = value.handleAsync;\n        if (!(key && CustomMap.internalErrorState === 0)) {\n          CustomMap.tcString = \"tcunavailable\";\n          if (!key) {\n            CustomMap.internalErrorState = 3;\n          }\n        }\n      } else {\n        CustomMap.tcString = \"tcunavailable\";\n        CustomMap.internalErrorState = 3;\n      }\n      generatorWrapper(CustomMap);\n    };\n    try {\n      invokeTcfApi(this, \"addEventListener\", createCircularNode);\n    } catch (entryIdCounter) {\n      CustomMap.tcString = \"tcunavailable\";\n      CustomMap.internalErrorState = 3;\n      if (iterateEntries) {\n        clearTimeout(iterateEntries);\n        iterateEntries = 0;\n      }\n      findEntry();\n    }\n  };\n  ConsentStatusManager.prototype.removeEventListener = function (generatorWrapper) {\n    if (generatorWrapper && generatorWrapper.listenerId) {\n      invokeTcfApi(this, \"removeEventListener\", null, generatorWrapper.listenerId);\n    }\n  };\n  var checkPublisherRestrictions = function (generatorWrapper, value, CustomMap) {\n    var findEntry = undefined === findEntry ? \"755\" : findEntry;\n    generatorWrapper: {\n      if (generatorWrapper.publisher && generatorWrapper.publisher.restrictions) {\n        var iterateEntries = generatorWrapper.publisher.restrictions[value];\n        if (undefined !== iterateEntries) {\n          iterateEntries = iterateEntries[undefined === findEntry ? \"755\" : findEntry];\n          break generatorWrapper;\n        }\n      }\n      iterateEntries = undefined;\n    }\n    if (iterateEntries === 0) {\n      return false;\n    }\n    var createCircularNode = CustomMap;\n    if (CustomMap === 2) {\n      createCircularNode = 0;\n      if (iterateEntries === 2) {\n        createCircularNode = 1;\n      }\n    } else if (CustomMap === 3) {\n      createCircularNode = 1;\n      if (iterateEntries === 1) {\n        createCircularNode = 0;\n      }\n    }\n    if (createCircularNode === 0) {\n      if (generatorWrapper.purpose && generatorWrapper.vendor) {\n        if ((CustomMap = checkConsentFor(generatorWrapper.vendor.consents, undefined === findEntry ? \"755\" : findEntry)) && value === \"1\" && generatorWrapper.purposeOneTreatment && generatorWrapper.publisherCC === \"CH\") {\n          generatorWrapper = true;\n        } else {\n          generatorWrapper = CustomMap && checkConsentFor(generatorWrapper.purpose.consents, value);\n        }\n      } else {\n        generatorWrapper = true;\n      }\n    } else if (createCircularNode === 1) {\n      if (generatorWrapper.purpose && generatorWrapper.vendor) {\n        generatorWrapper = checkConsentFor(generatorWrapper.purpose.legitimateInterests, value) && checkConsentFor(generatorWrapper.vendor.legitimateInterests, undefined === findEntry ? \"755\" : findEntry);\n      } else {\n        generatorWrapper = true;\n      }\n    } else {\n      generatorWrapper = true;\n    }\n    return generatorWrapper;\n  };\n  var checkConsentFor = function (generatorWrapper, value) {\n    return !(!generatorWrapper || !generatorWrapper[value]);\n  };\n  var invokeTcfApi = function (generatorWrapper, value, CustomMap, findEntry) {\n    if (!CustomMap) {\n      CustomMap = function () {};\n    }\n    if (typeof generatorWrapper.tasks.__tcfapi === \"function\") {\n      generatorWrapper = generatorWrapper.tasks.__tcfapi;\n      generatorWrapper(value, 2, CustomMap, findEntry);\n    } else if (createElementWithAttributes(generatorWrapper)) {\n      setupMessageEventListener(generatorWrapper);\n      var iterateEntries = ++generatorWrapper.onFulfilled;\n      generatorWrapper.isDone[iterateEntries] = CustomMap;\n      if (generatorWrapper.entryIdCounter) {\n        CustomMap = {};\n        generatorWrapper.entryIdCounter.sendPostMessage((CustomMap.__tcfapiCall = {\n          command: value,\n          version: 2,\n          callId: iterateEntries,\n          parameter: findEntry\n        }, CustomMap), \"*\");\n      }\n    } else {\n      CustomMap({}, false);\n    }\n  };\n  var createElementWithAttributes = function (generatorWrapper) {\n    if (generatorWrapper.entryIdCounter) {\n      return generatorWrapper.entryIdCounter;\n    }\n    generatorWrapper.entryIdCounter = findFrameByName(generatorWrapper.tasks, \"__tcfapiLocator\");\n    return generatorWrapper.entryIdCounter;\n  };\n  var setupMessageEventListener = function (generatorWrapper) {\n    if (!generatorWrapper.setTimeoutWrapper) {\n      generatorWrapper.setTimeoutWrapper = function (value) {\n        try {\n          var CustomMap = (typeof value.data === \"string\" ? JSON.parse(value.data) : value.data).__tcfapiReturn;\n          generatorWrapper.isDone[CustomMap.callId](CustomMap.returnValue, CustomMap.success);\n        } catch (findEntry) {}\n      };\n      addEventListenerWithNormalization(generatorWrapper.tasks, \"message\", generatorWrapper.setTimeoutWrapper);\n    }\n  };\n  var isGdprConsentGiven = function (generatorWrapper) {\n    if (generatorWrapper.gdprApplies === false) {\n      return true;\n    }\n    if (undefined === generatorWrapper.internalErrorState) {\n      generatorWrapper.internalErrorState = validateSignalData(generatorWrapper);\n    }\n    if (generatorWrapper.cmpStatus === \"error\" || generatorWrapper.internalErrorState !== 0) {\n      if (generatorWrapper.internalBlockOnErrors) {\n        sendBeaconWithParams({\n          iterateEntries: String(generatorWrapper.internalErrorState)\n        }, \"tcfe\");\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      if (generatorWrapper.cmpStatus !== \"loaded\" || generatorWrapper.eventStatus !== \"tcloaded\" && generatorWrapper.eventStatus !== \"useractioncomplete\") {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  };\n  var checkSpecialFeatureConsents = function (generatorWrapper) {\n    var value = [\"2\", \"7\", \"9\", \"10\"];\n    if (generatorWrapper.gdprApplies === false) {\n      return true;\n    } else {\n      return value.every(function (CustomMap) {\n        return checkPublisherRestrictions(generatorWrapper, CustomMap, 3);\n      });\n    }\n  };\n  createCustomClassInstance([1, 8, 9, 10, 11, 12, 2, 3, 4, 5, 15, 16]);\n  createCustomClassInstance([1, 6, 7, 9, 10, 11, 12, 2, 3, 4, 5, 13, 14]);\n  createCustomClassInstance([1, 6, 7, 9, 10, 11, 12, 2, 3, 4, 5, 13, 14]);\n  new CustomClass();\n  var table = function (generatorWrapper, value) {\n    this.tasks = this.isDone = this.createDeferred = \"\";\n    this.settlePromise = null;\n    this.executeCallbacks = this.setTimeoutWrapper = \"\";\n    this.handleAsync = false;\n    var CustomMap;\n    if (generatorWrapper instanceof table) {\n      if (undefined !== value) {\n        this.handleAsync = value;\n      } else {\n        this.handleAsync = generatorWrapper.handleAsync;\n      }\n      setScheme(this, generatorWrapper.createDeferred);\n      this.isDone = generatorWrapper.isDone;\n      this.tasks = generatorWrapper.tasks;\n      setPort(this, generatorWrapper.settlePromise);\n      this.setTimeoutWrapper = generatorWrapper.setTimeoutWrapper;\n      setQueryParameters(this, my(generatorWrapper.entryIdCounter));\n      this.executeCallbacks = generatorWrapper.dispatchUnhandledRejection();\n    } else if (generatorWrapper && (CustomMap = String(generatorWrapper).match(urlRegex))) {\n      this.handleAsync = !!value;\n      setScheme(this, CustomMap[1] || \"\", true);\n      this.isDone = decodeURIConditionally(CustomMap[2] || \"\");\n      this.tasks = decodeURIConditionally(CustomMap[3] || \"\", true);\n      setPort(this, CustomMap[4]);\n      this.setTimeoutWrapper = decodeURIConditionally(CustomMap[5] || \"\", true);\n      setQueryParameters(this, CustomMap[6] || \"\", true);\n      this.executeCallbacks = decodeURIConditionally(CustomMap[7] || \"\");\n    } else {\n      this.handleAsync = !!value;\n      this.entryIdCounter = new URLParameters(null, this.handleAsync);\n    }\n  };\n  table.prototype.toString = function () {\n    var generatorWrapper = [];\n    var value = this.createDeferred;\n    if (value) {\n      generatorWrapper.push(encodeURIConditionally(value, regexForHashSlashQuestionAt, true), \":\");\n    }\n    var CustomMap = this.tasks;\n    if (CustomMap || value == \"file\") {\n      generatorWrapper.push(\"//\");\n      if (value = this.isDone) {\n        generatorWrapper.push(encodeURIConditionally(value, regexForHashSlashQuestionAt, true), \"@\");\n      }\n      generatorWrapper.push(encodeURIComponent(String(CustomMap)).replace(/%25([0-9a-fA-F]{2})/g, \"%$1\"));\n      CustomMap = this.settlePromise;\n      if (CustomMap != null) {\n        generatorWrapper.push(\":\", String(CustomMap));\n      }\n    }\n    if (CustomMap = this.setTimeoutWrapper) {\n      if (this.tasks && CustomMap.charAt(0) != \"/\") {\n        generatorWrapper.push(\"/\");\n      }\n      generatorWrapper.push(encodeURIConditionally(CustomMap, CustomMap.charAt(0) == \"/\" ? regexForHashQuestion : regexForHashColonQuestion, true));\n    }\n    if (CustomMap = this.entryIdCounter.toString()) {\n      generatorWrapper.push(\"?\", CustomMap);\n    }\n    if (CustomMap = this.dispatchUnhandledRejection()) {\n      generatorWrapper.push(\"#\", encodeURIConditionally(CustomMap, regexForHash));\n    }\n    return generatorWrapper.join(\"\");\n  };\n  table.prototype.resolve = function (generatorWrapper) {\n    var value = this.handleThenable();\n    var CustomMap = !!generatorWrapper.createDeferred;\n    if (CustomMap) {\n      setScheme(value, generatorWrapper.createDeferred);\n    } else {\n      CustomMap = !!generatorWrapper.isDone;\n    }\n    if (CustomMap) {\n      value.isDone = generatorWrapper.isDone;\n    } else {\n      CustomMap = !!generatorWrapper.tasks;\n    }\n    if (CustomMap) {\n      value.tasks = generatorWrapper.tasks;\n    } else {\n      CustomMap = generatorWrapper.settlePromise != null;\n    }\n    var findEntry = generatorWrapper.setTimeoutWrapper;\n    if (CustomMap) {\n      setPort(value, generatorWrapper.settlePromise);\n    } else if (CustomMap = !!generatorWrapper.setTimeoutWrapper) {\n      if (findEntry.charAt(0) != \"/\") {\n        if (this.tasks && !this.setTimeoutWrapper) {\n          findEntry = \"/\" + findEntry;\n        } else {\n          var iterateEntries = value.setTimeoutWrapper.lastIndexOf(\"/\");\n          if (-1 != iterateEntries) {\n            findEntry = value.setTimeoutWrapper.slice(0, iterateEntries + 1) + findEntry;\n          }\n        }\n      }\n      iterateEntries = findEntry;\n      if (iterateEntries == \"..\" || iterateEntries == \".\") {\n        findEntry = \"\";\n      } else if (includesString(iterateEntries, \"./\") || includesString(iterateEntries, \"/.\")) {\n        findEntry = iterateEntries.lastIndexOf(\"/\", 0) == 0;\n        iterateEntries = iterateEntries.split(\"/\");\n        for (var createCircularNode = [], entryIdCounter = 0; entryIdCounter < iterateEntries.length;) {\n          var key = iterateEntries[entryIdCounter++];\n          if (key == \".\") {\n            if (findEntry && entryIdCounter == iterateEntries.length) {\n              createCircularNode.push(\"\");\n            }\n          } else if (key == \"..\") {\n            if (createCircularNode.length > 1 || createCircularNode.length == 1 && createCircularNode[0] != \"\") {\n              createCircularNode.pop();\n            }\n            if (findEntry && entryIdCounter == iterateEntries.length) {\n              createCircularNode.push(\"\");\n            }\n          } else {\n            createCircularNode.push(key);\n            findEntry = true;\n          }\n        }\n        findEntry = createCircularNode.join(\"/\");\n      } else {\n        findEntry = iterateEntries;\n      }\n    }\n    if (CustomMap) {\n      value.setTimeoutWrapper = findEntry;\n    } else {\n      CustomMap = generatorWrapper.entryIdCounter.toString() !== \"\";\n    }\n    if (CustomMap) {\n      setQueryParameters(value, my(generatorWrapper.entryIdCounter));\n    } else {\n      CustomMap = !!generatorWrapper.executeCallbacks;\n    }\n    if (CustomMap) {\n      value.executeCallbacks = generatorWrapper.dispatchUnhandledRejection();\n    }\n    return value;\n  };\n  table.prototype.handleThenable = function () {\n    return new table(this);\n  };\n  var setScheme = function (generatorWrapper, value, CustomMap) {\n    if (CustomMap) {\n      generatorWrapper.createDeferred = decodeURIConditionally(value, true);\n    } else {\n      generatorWrapper.createDeferred = value;\n    }\n    if (generatorWrapper.createDeferred) {\n      generatorWrapper.createDeferred = generatorWrapper.createDeferred.replace(/:$/, \"\");\n    }\n  };\n  var setPort = function (generatorWrapper, value) {\n    if (value) {\n      value = Number(value);\n      if (isNaN(value) || value < 0) {\n        throw Error(\"Bad port number \" + value);\n      }\n      generatorWrapper.settlePromise = value;\n    } else {\n      generatorWrapper.settlePromise = null;\n    }\n  };\n  var setQueryParameters = function (generatorWrapper, value, CustomMap) {\n    if (value instanceof URLParameters) {\n      generatorWrapper.entryIdCounter = value;\n      setCaseSensitivity(generatorWrapper.entryIdCounter, generatorWrapper.handleAsync);\n    } else {\n      if (!CustomMap) {\n        value = encodeURIConditionally(value, regexForHashQuestionAt);\n      }\n      generatorWrapper.entryIdCounter = new URLParameters(value, generatorWrapper.handleAsync);\n    }\n  };\n  var setParameter = function (generatorWrapper, value, CustomMap) {\n    generatorWrapper.entryIdCounter.set(value, CustomMap);\n    return generatorWrapper;\n  };\n  table.prototype.dispatchUnhandledRejection = function () {\n    return this.executeCallbacks;\n  };\n  var createOrProcessURL = function (generatorWrapper) {\n    if (generatorWrapper instanceof table) {\n      return generatorWrapper.handleThenable();\n    } else {\n      return new table(generatorWrapper, undefined);\n    }\n  };\n  var decodeURIConditionally = function (generatorWrapper, value) {\n    if (generatorWrapper) {\n      if (value) {\n        return decodeURI(generatorWrapper.replace(/%25/g, \"%2525\"));\n      } else {\n        return decodeURIComponent(generatorWrapper);\n      }\n    } else {\n      return \"\";\n    }\n  };\n  var encodeURIConditionally ="